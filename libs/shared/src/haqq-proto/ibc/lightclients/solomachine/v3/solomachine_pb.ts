// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file ibc/lightclients/solomachine/v3/solomachine.proto (package ibc.lightclients.solomachine.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * ClientState defines a solo machine client that tracks the current consensus
 * state and if the client is frozen.
 *
 * @generated from message ibc.lightclients.solomachine.v3.ClientState
 */
export class ClientState extends Message<ClientState> {
  /**
   * latest sequence of the client state
   *
   * @generated from field: uint64 sequence = 1;
   */
  sequence = protoInt64.zero;

  /**
   * frozen sequence of the solo machine
   *
   * @generated from field: bool is_frozen = 2;
   */
  isFrozen = false;

  /**
   * @generated from field: ibc.lightclients.solomachine.v3.ConsensusState consensus_state = 3;
   */
  consensusState?: ConsensusState;

  constructor(data?: PartialMessage<ClientState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.lightclients.solomachine.v3.ClientState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "is_frozen", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "consensus_state", kind: "message", T: ConsensusState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientState {
    return new ClientState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientState {
    return new ClientState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientState {
    return new ClientState().fromJsonString(jsonString, options);
  }

  static equals(a: ClientState | PlainMessage<ClientState> | undefined, b: ClientState | PlainMessage<ClientState> | undefined): boolean {
    return proto3.util.equals(ClientState, a, b);
  }
}

/**
 * ConsensusState defines a solo machine consensus state. The sequence of a
 * consensus state is contained in the "height" key used in storing the
 * consensus state.
 *
 * @generated from message ibc.lightclients.solomachine.v3.ConsensusState
 */
export class ConsensusState extends Message<ConsensusState> {
  /**
   * public key of the solo machine
   *
   * @generated from field: google.protobuf.Any public_key = 1;
   */
  publicKey?: Any;

  /**
   * diversifier allows the same public key to be re-used across different solo
   * machine clients (potentially on different chains) without being considered
   * misbehaviour.
   *
   * @generated from field: string diversifier = 2;
   */
  diversifier = "";

  /**
   * @generated from field: uint64 timestamp = 3;
   */
  timestamp = protoInt64.zero;

  constructor(data?: PartialMessage<ConsensusState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.lightclients.solomachine.v3.ConsensusState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "public_key", kind: "message", T: Any },
    { no: 2, name: "diversifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConsensusState {
    return new ConsensusState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConsensusState {
    return new ConsensusState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConsensusState {
    return new ConsensusState().fromJsonString(jsonString, options);
  }

  static equals(a: ConsensusState | PlainMessage<ConsensusState> | undefined, b: ConsensusState | PlainMessage<ConsensusState> | undefined): boolean {
    return proto3.util.equals(ConsensusState, a, b);
  }
}

/**
 * Header defines a solo machine consensus header
 *
 * @generated from message ibc.lightclients.solomachine.v3.Header
 */
export class Header extends Message<Header> {
  /**
   * @generated from field: uint64 timestamp = 1;
   */
  timestamp = protoInt64.zero;

  /**
   * @generated from field: bytes signature = 2;
   */
  signature = new Uint8Array(0);

  /**
   * @generated from field: google.protobuf.Any new_public_key = 3;
   */
  newPublicKey?: Any;

  /**
   * @generated from field: string new_diversifier = 4;
   */
  newDiversifier = "";

  constructor(data?: PartialMessage<Header>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.lightclients.solomachine.v3.Header";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "new_public_key", kind: "message", T: Any },
    { no: 4, name: "new_diversifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Header {
    return new Header().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Header {
    return new Header().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Header {
    return new Header().fromJsonString(jsonString, options);
  }

  static equals(a: Header | PlainMessage<Header> | undefined, b: Header | PlainMessage<Header> | undefined): boolean {
    return proto3.util.equals(Header, a, b);
  }
}

/**
 * Misbehaviour defines misbehaviour for a solo machine which consists
 * of a sequence and two signatures over different messages at that sequence.
 *
 * @generated from message ibc.lightclients.solomachine.v3.Misbehaviour
 */
export class Misbehaviour extends Message<Misbehaviour> {
  /**
   * @generated from field: uint64 sequence = 1;
   */
  sequence = protoInt64.zero;

  /**
   * @generated from field: ibc.lightclients.solomachine.v3.SignatureAndData signature_one = 2;
   */
  signatureOne?: SignatureAndData;

  /**
   * @generated from field: ibc.lightclients.solomachine.v3.SignatureAndData signature_two = 3;
   */
  signatureTwo?: SignatureAndData;

  constructor(data?: PartialMessage<Misbehaviour>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.lightclients.solomachine.v3.Misbehaviour";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "signature_one", kind: "message", T: SignatureAndData },
    { no: 3, name: "signature_two", kind: "message", T: SignatureAndData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Misbehaviour {
    return new Misbehaviour().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Misbehaviour {
    return new Misbehaviour().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Misbehaviour {
    return new Misbehaviour().fromJsonString(jsonString, options);
  }

  static equals(a: Misbehaviour | PlainMessage<Misbehaviour> | undefined, b: Misbehaviour | PlainMessage<Misbehaviour> | undefined): boolean {
    return proto3.util.equals(Misbehaviour, a, b);
  }
}

/**
 * SignatureAndData contains a signature and the data signed over to create that
 * signature.
 *
 * @generated from message ibc.lightclients.solomachine.v3.SignatureAndData
 */
export class SignatureAndData extends Message<SignatureAndData> {
  /**
   * @generated from field: bytes signature = 1;
   */
  signature = new Uint8Array(0);

  /**
   * @generated from field: bytes path = 2;
   */
  path = new Uint8Array(0);

  /**
   * @generated from field: bytes data = 3;
   */
  data = new Uint8Array(0);

  /**
   * @generated from field: uint64 timestamp = 4;
   */
  timestamp = protoInt64.zero;

  constructor(data?: PartialMessage<SignatureAndData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.lightclients.solomachine.v3.SignatureAndData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "path", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignatureAndData {
    return new SignatureAndData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignatureAndData {
    return new SignatureAndData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignatureAndData {
    return new SignatureAndData().fromJsonString(jsonString, options);
  }

  static equals(a: SignatureAndData | PlainMessage<SignatureAndData> | undefined, b: SignatureAndData | PlainMessage<SignatureAndData> | undefined): boolean {
    return proto3.util.equals(SignatureAndData, a, b);
  }
}

/**
 * TimestampedSignatureData contains the signature data and the timestamp of the
 * signature.
 *
 * @generated from message ibc.lightclients.solomachine.v3.TimestampedSignatureData
 */
export class TimestampedSignatureData extends Message<TimestampedSignatureData> {
  /**
   * @generated from field: bytes signature_data = 1;
   */
  signatureData = new Uint8Array(0);

  /**
   * @generated from field: uint64 timestamp = 2;
   */
  timestamp = protoInt64.zero;

  constructor(data?: PartialMessage<TimestampedSignatureData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.lightclients.solomachine.v3.TimestampedSignatureData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signature_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimestampedSignatureData {
    return new TimestampedSignatureData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimestampedSignatureData {
    return new TimestampedSignatureData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimestampedSignatureData {
    return new TimestampedSignatureData().fromJsonString(jsonString, options);
  }

  static equals(a: TimestampedSignatureData | PlainMessage<TimestampedSignatureData> | undefined, b: TimestampedSignatureData | PlainMessage<TimestampedSignatureData> | undefined): boolean {
    return proto3.util.equals(TimestampedSignatureData, a, b);
  }
}

/**
 * SignBytes defines the signed bytes used for signature verification.
 *
 * @generated from message ibc.lightclients.solomachine.v3.SignBytes
 */
export class SignBytes extends Message<SignBytes> {
  /**
   * the sequence number
   *
   * @generated from field: uint64 sequence = 1;
   */
  sequence = protoInt64.zero;

  /**
   * the proof timestamp
   *
   * @generated from field: uint64 timestamp = 2;
   */
  timestamp = protoInt64.zero;

  /**
   * the public key diversifier
   *
   * @generated from field: string diversifier = 3;
   */
  diversifier = "";

  /**
   * the standardised path bytes
   *
   * @generated from field: bytes path = 4;
   */
  path = new Uint8Array(0);

  /**
   * the marshaled data bytes
   *
   * @generated from field: bytes data = 5;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<SignBytes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.lightclients.solomachine.v3.SignBytes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "diversifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "path", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignBytes {
    return new SignBytes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignBytes {
    return new SignBytes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignBytes {
    return new SignBytes().fromJsonString(jsonString, options);
  }

  static equals(a: SignBytes | PlainMessage<SignBytes> | undefined, b: SignBytes | PlainMessage<SignBytes> | undefined): boolean {
    return proto3.util.equals(SignBytes, a, b);
  }
}

/**
 * HeaderData returns the SignBytes data for update verification.
 *
 * @generated from message ibc.lightclients.solomachine.v3.HeaderData
 */
export class HeaderData extends Message<HeaderData> {
  /**
   * header public key
   *
   * @generated from field: google.protobuf.Any new_pub_key = 1;
   */
  newPubKey?: Any;

  /**
   * header diversifier
   *
   * @generated from field: string new_diversifier = 2;
   */
  newDiversifier = "";

  constructor(data?: PartialMessage<HeaderData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.lightclients.solomachine.v3.HeaderData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "new_pub_key", kind: "message", T: Any },
    { no: 2, name: "new_diversifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HeaderData {
    return new HeaderData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HeaderData {
    return new HeaderData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HeaderData {
    return new HeaderData().fromJsonString(jsonString, options);
  }

  static equals(a: HeaderData | PlainMessage<HeaderData> | undefined, b: HeaderData | PlainMessage<HeaderData> | undefined): boolean {
    return proto3.util.equals(HeaderData, a, b);
  }
}

