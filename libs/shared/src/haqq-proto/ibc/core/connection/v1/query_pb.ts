// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file ibc/core/connection/v1/query.proto (package ibc.core.connection.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Any, Message, proto3, protoInt64 } from '@bufbuild/protobuf';
import { ConnectionEnd, IdentifiedConnection, Params } from './connection_pb';
import { Height, IdentifiedClientState } from '../../client/v1/client_pb';
import {
  PageRequest,
  PageResponse,
} from '../../../../cosmos/base/query/v1beta1/pagination_pb';

/**
 * QueryConnectionRequest is the request type for the Query/Connection RPC
 * method
 *
 * @generated from message ibc.core.connection.v1.QueryConnectionRequest
 */
export class QueryConnectionRequest extends Message<QueryConnectionRequest> {
  /**
   * connection unique identifier
   *
   * @generated from field: string connection_id = 1;
   */
  connectionId = '';

  constructor(data?: PartialMessage<QueryConnectionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'ibc.core.connection.v1.QueryConnectionRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'connection_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryConnectionRequest {
    return new QueryConnectionRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryConnectionRequest {
    return new QueryConnectionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryConnectionRequest {
    return new QueryConnectionRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryConnectionRequest
      | PlainMessage<QueryConnectionRequest>
      | undefined,
    b:
      | QueryConnectionRequest
      | PlainMessage<QueryConnectionRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryConnectionRequest, a, b);
  }
}

/**
 * QueryConnectionResponse is the response type for the Query/Connection RPC
 * method. Besides the connection end, it includes a proof and the height from
 * which the proof was retrieved.
 *
 * @generated from message ibc.core.connection.v1.QueryConnectionResponse
 */
export class QueryConnectionResponse extends Message<QueryConnectionResponse> {
  /**
   * connection associated with the request identifier
   *
   * @generated from field: ibc.core.connection.v1.ConnectionEnd connection = 1;
   */
  connection?: ConnectionEnd;

  /**
   * merkle proof of existence
   *
   * @generated from field: bytes proof = 2;
   */
  proof = new Uint8Array(0);

  /**
   * height at which the proof was retrieved
   *
   * @generated from field: ibc.core.client.v1.Height proof_height = 3;
   */
  proofHeight?: Height;

  constructor(data?: PartialMessage<QueryConnectionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'ibc.core.connection.v1.QueryConnectionResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'connection', kind: 'message', T: ConnectionEnd },
    { no: 2, name: 'proof', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: 'proof_height', kind: 'message', T: Height },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryConnectionResponse {
    return new QueryConnectionResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryConnectionResponse {
    return new QueryConnectionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryConnectionResponse {
    return new QueryConnectionResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryConnectionResponse
      | PlainMessage<QueryConnectionResponse>
      | undefined,
    b:
      | QueryConnectionResponse
      | PlainMessage<QueryConnectionResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryConnectionResponse, a, b);
  }
}

/**
 * QueryConnectionsRequest is the request type for the Query/Connections RPC
 * method
 *
 * @generated from message ibc.core.connection.v1.QueryConnectionsRequest
 */
export class QueryConnectionsRequest extends Message<QueryConnectionsRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryConnectionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'ibc.core.connection.v1.QueryConnectionsRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'pagination', kind: 'message', T: PageRequest },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryConnectionsRequest {
    return new QueryConnectionsRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryConnectionsRequest {
    return new QueryConnectionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryConnectionsRequest {
    return new QueryConnectionsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryConnectionsRequest
      | PlainMessage<QueryConnectionsRequest>
      | undefined,
    b:
      | QueryConnectionsRequest
      | PlainMessage<QueryConnectionsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryConnectionsRequest, a, b);
  }
}

/**
 * QueryConnectionsResponse is the response type for the Query/Connections RPC
 * method.
 *
 * @generated from message ibc.core.connection.v1.QueryConnectionsResponse
 */
export class QueryConnectionsResponse extends Message<QueryConnectionsResponse> {
  /**
   * list of stored connections of the chain.
   *
   * @generated from field: repeated ibc.core.connection.v1.IdentifiedConnection connections = 1;
   */
  connections: IdentifiedConnection[] = [];

  /**
   * pagination response
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  /**
   * query block height
   *
   * @generated from field: ibc.core.client.v1.Height height = 3;
   */
  height?: Height;

  constructor(data?: PartialMessage<QueryConnectionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'ibc.core.connection.v1.QueryConnectionsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'connections',
      kind: 'message',
      T: IdentifiedConnection,
      repeated: true,
    },
    { no: 2, name: 'pagination', kind: 'message', T: PageResponse },
    { no: 3, name: 'height', kind: 'message', T: Height },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryConnectionsResponse {
    return new QueryConnectionsResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryConnectionsResponse {
    return new QueryConnectionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryConnectionsResponse {
    return new QueryConnectionsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryConnectionsResponse
      | PlainMessage<QueryConnectionsResponse>
      | undefined,
    b:
      | QueryConnectionsResponse
      | PlainMessage<QueryConnectionsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryConnectionsResponse, a, b);
  }
}

/**
 * QueryClientConnectionsRequest is the request type for the
 * Query/ClientConnections RPC method
 *
 * @generated from message ibc.core.connection.v1.QueryClientConnectionsRequest
 */
export class QueryClientConnectionsRequest extends Message<QueryClientConnectionsRequest> {
  /**
   * client identifier associated with a connection
   *
   * @generated from field: string client_id = 1;
   */
  clientId = '';

  constructor(data?: PartialMessage<QueryClientConnectionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'ibc.core.connection.v1.QueryClientConnectionsRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'client_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryClientConnectionsRequest {
    return new QueryClientConnectionsRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryClientConnectionsRequest {
    return new QueryClientConnectionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryClientConnectionsRequest {
    return new QueryClientConnectionsRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QueryClientConnectionsRequest
      | PlainMessage<QueryClientConnectionsRequest>
      | undefined,
    b:
      | QueryClientConnectionsRequest
      | PlainMessage<QueryClientConnectionsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryClientConnectionsRequest, a, b);
  }
}

/**
 * QueryClientConnectionsResponse is the response type for the
 * Query/ClientConnections RPC method
 *
 * @generated from message ibc.core.connection.v1.QueryClientConnectionsResponse
 */
export class QueryClientConnectionsResponse extends Message<QueryClientConnectionsResponse> {
  /**
   * slice of all the connection paths associated with a client.
   *
   * @generated from field: repeated string connection_paths = 1;
   */
  connectionPaths: string[] = [];

  /**
   * merkle proof of existence
   *
   * @generated from field: bytes proof = 2;
   */
  proof = new Uint8Array(0);

  /**
   * height at which the proof was generated
   *
   * @generated from field: ibc.core.client.v1.Height proof_height = 3;
   */
  proofHeight?: Height;

  constructor(data?: PartialMessage<QueryClientConnectionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'ibc.core.connection.v1.QueryClientConnectionsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'connection_paths',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    { no: 2, name: 'proof', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: 'proof_height', kind: 'message', T: Height },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryClientConnectionsResponse {
    return new QueryClientConnectionsResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryClientConnectionsResponse {
    return new QueryClientConnectionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryClientConnectionsResponse {
    return new QueryClientConnectionsResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QueryClientConnectionsResponse
      | PlainMessage<QueryClientConnectionsResponse>
      | undefined,
    b:
      | QueryClientConnectionsResponse
      | PlainMessage<QueryClientConnectionsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryClientConnectionsResponse, a, b);
  }
}

/**
 * QueryConnectionClientStateRequest is the request type for the
 * Query/ConnectionClientState RPC method
 *
 * @generated from message ibc.core.connection.v1.QueryConnectionClientStateRequest
 */
export class QueryConnectionClientStateRequest extends Message<QueryConnectionClientStateRequest> {
  /**
   * connection identifier
   *
   * @generated from field: string connection_id = 1;
   */
  connectionId = '';

  constructor(data?: PartialMessage<QueryConnectionClientStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'ibc.core.connection.v1.QueryConnectionClientStateRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'connection_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryConnectionClientStateRequest {
    return new QueryConnectionClientStateRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryConnectionClientStateRequest {
    return new QueryConnectionClientStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryConnectionClientStateRequest {
    return new QueryConnectionClientStateRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QueryConnectionClientStateRequest
      | PlainMessage<QueryConnectionClientStateRequest>
      | undefined,
    b:
      | QueryConnectionClientStateRequest
      | PlainMessage<QueryConnectionClientStateRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryConnectionClientStateRequest, a, b);
  }
}

/**
 * QueryConnectionClientStateResponse is the response type for the
 * Query/ConnectionClientState RPC method
 *
 * @generated from message ibc.core.connection.v1.QueryConnectionClientStateResponse
 */
export class QueryConnectionClientStateResponse extends Message<QueryConnectionClientStateResponse> {
  /**
   * client state associated with the channel
   *
   * @generated from field: ibc.core.client.v1.IdentifiedClientState identified_client_state = 1;
   */
  identifiedClientState?: IdentifiedClientState;

  /**
   * merkle proof of existence
   *
   * @generated from field: bytes proof = 2;
   */
  proof = new Uint8Array(0);

  /**
   * height at which the proof was retrieved
   *
   * @generated from field: ibc.core.client.v1.Height proof_height = 3;
   */
  proofHeight?: Height;

  constructor(data?: PartialMessage<QueryConnectionClientStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'ibc.core.connection.v1.QueryConnectionClientStateResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'identified_client_state',
      kind: 'message',
      T: IdentifiedClientState,
    },
    { no: 2, name: 'proof', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: 'proof_height', kind: 'message', T: Height },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryConnectionClientStateResponse {
    return new QueryConnectionClientStateResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryConnectionClientStateResponse {
    return new QueryConnectionClientStateResponse().fromJson(
      jsonValue,
      options,
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryConnectionClientStateResponse {
    return new QueryConnectionClientStateResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QueryConnectionClientStateResponse
      | PlainMessage<QueryConnectionClientStateResponse>
      | undefined,
    b:
      | QueryConnectionClientStateResponse
      | PlainMessage<QueryConnectionClientStateResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryConnectionClientStateResponse, a, b);
  }
}

/**
 * QueryConnectionConsensusStateRequest is the request type for the
 * Query/ConnectionConsensusState RPC method
 *
 * @generated from message ibc.core.connection.v1.QueryConnectionConsensusStateRequest
 */
export class QueryConnectionConsensusStateRequest extends Message<QueryConnectionConsensusStateRequest> {
  /**
   * connection identifier
   *
   * @generated from field: string connection_id = 1;
   */
  connectionId = '';

  /**
   * @generated from field: uint64 revision_number = 2;
   */
  revisionNumber = protoInt64.zero;

  /**
   * @generated from field: uint64 revision_height = 3;
   */
  revisionHeight = protoInt64.zero;

  constructor(data?: PartialMessage<QueryConnectionConsensusStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'ibc.core.connection.v1.QueryConnectionConsensusStateRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'connection_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 2,
      name: 'revision_number',
      kind: 'scalar',
      T: 4 /* ScalarType.UINT64 */,
    },
    {
      no: 3,
      name: 'revision_height',
      kind: 'scalar',
      T: 4 /* ScalarType.UINT64 */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryConnectionConsensusStateRequest {
    return new QueryConnectionConsensusStateRequest().fromBinary(
      bytes,
      options,
    );
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryConnectionConsensusStateRequest {
    return new QueryConnectionConsensusStateRequest().fromJson(
      jsonValue,
      options,
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryConnectionConsensusStateRequest {
    return new QueryConnectionConsensusStateRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QueryConnectionConsensusStateRequest
      | PlainMessage<QueryConnectionConsensusStateRequest>
      | undefined,
    b:
      | QueryConnectionConsensusStateRequest
      | PlainMessage<QueryConnectionConsensusStateRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryConnectionConsensusStateRequest, a, b);
  }
}

/**
 * QueryConnectionConsensusStateResponse is the response type for the
 * Query/ConnectionConsensusState RPC method
 *
 * @generated from message ibc.core.connection.v1.QueryConnectionConsensusStateResponse
 */
export class QueryConnectionConsensusStateResponse extends Message<QueryConnectionConsensusStateResponse> {
  /**
   * consensus state associated with the channel
   *
   * @generated from field: google.protobuf.Any consensus_state = 1;
   */
  consensusState?: Any;

  /**
   * client ID associated with the consensus state
   *
   * @generated from field: string client_id = 2;
   */
  clientId = '';

  /**
   * merkle proof of existence
   *
   * @generated from field: bytes proof = 3;
   */
  proof = new Uint8Array(0);

  /**
   * height at which the proof was retrieved
   *
   * @generated from field: ibc.core.client.v1.Height proof_height = 4;
   */
  proofHeight?: Height;

  constructor(data?: PartialMessage<QueryConnectionConsensusStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'ibc.core.connection.v1.QueryConnectionConsensusStateResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'consensus_state', kind: 'message', T: Any },
    { no: 2, name: 'client_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'proof', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: 'proof_height', kind: 'message', T: Height },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryConnectionConsensusStateResponse {
    return new QueryConnectionConsensusStateResponse().fromBinary(
      bytes,
      options,
    );
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryConnectionConsensusStateResponse {
    return new QueryConnectionConsensusStateResponse().fromJson(
      jsonValue,
      options,
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryConnectionConsensusStateResponse {
    return new QueryConnectionConsensusStateResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QueryConnectionConsensusStateResponse
      | PlainMessage<QueryConnectionConsensusStateResponse>
      | undefined,
    b:
      | QueryConnectionConsensusStateResponse
      | PlainMessage<QueryConnectionConsensusStateResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryConnectionConsensusStateResponse, a, b);
  }
}

/**
 * QueryConnectionParamsRequest is the request type for the Query/ConnectionParams RPC method.
 *
 * @generated from message ibc.core.connection.v1.QueryConnectionParamsRequest
 */
export class QueryConnectionParamsRequest extends Message<QueryConnectionParamsRequest> {
  constructor(data?: PartialMessage<QueryConnectionParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'ibc.core.connection.v1.QueryConnectionParamsRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryConnectionParamsRequest {
    return new QueryConnectionParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryConnectionParamsRequest {
    return new QueryConnectionParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryConnectionParamsRequest {
    return new QueryConnectionParamsRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QueryConnectionParamsRequest
      | PlainMessage<QueryConnectionParamsRequest>
      | undefined,
    b:
      | QueryConnectionParamsRequest
      | PlainMessage<QueryConnectionParamsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryConnectionParamsRequest, a, b);
  }
}

/**
 * QueryConnectionParamsResponse is the response type for the Query/ConnectionParams RPC method.
 *
 * @generated from message ibc.core.connection.v1.QueryConnectionParamsResponse
 */
export class QueryConnectionParamsResponse extends Message<QueryConnectionParamsResponse> {
  /**
   * params defines the parameters of the module.
   *
   * @generated from field: ibc.core.connection.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryConnectionParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'ibc.core.connection.v1.QueryConnectionParamsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'params', kind: 'message', T: Params },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryConnectionParamsResponse {
    return new QueryConnectionParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryConnectionParamsResponse {
    return new QueryConnectionParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryConnectionParamsResponse {
    return new QueryConnectionParamsResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QueryConnectionParamsResponse
      | PlainMessage<QueryConnectionParamsResponse>
      | undefined,
    b:
      | QueryConnectionParamsResponse
      | PlainMessage<QueryConnectionParamsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryConnectionParamsResponse, a, b);
  }
}
