// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file ibc/core/channel/v1/genesis.proto (package ibc.core.channel.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { IdentifiedChannel, PacketState } from "./channel_pb.js";

/**
 * GenesisState defines the ibc channel submodule's genesis state.
 *
 * @generated from message ibc.core.channel.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * @generated from field: repeated ibc.core.channel.v1.IdentifiedChannel channels = 1;
   */
  channels: IdentifiedChannel[] = [];

  /**
   * @generated from field: repeated ibc.core.channel.v1.PacketState acknowledgements = 2;
   */
  acknowledgements: PacketState[] = [];

  /**
   * @generated from field: repeated ibc.core.channel.v1.PacketState commitments = 3;
   */
  commitments: PacketState[] = [];

  /**
   * @generated from field: repeated ibc.core.channel.v1.PacketState receipts = 4;
   */
  receipts: PacketState[] = [];

  /**
   * @generated from field: repeated ibc.core.channel.v1.PacketSequence send_sequences = 5;
   */
  sendSequences: PacketSequence[] = [];

  /**
   * @generated from field: repeated ibc.core.channel.v1.PacketSequence recv_sequences = 6;
   */
  recvSequences: PacketSequence[] = [];

  /**
   * @generated from field: repeated ibc.core.channel.v1.PacketSequence ack_sequences = 7;
   */
  ackSequences: PacketSequence[] = [];

  /**
   * the sequence for the next generated channel identifier
   *
   * @generated from field: uint64 next_channel_sequence = 8;
   */
  nextChannelSequence = protoInt64.zero;

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channels", kind: "message", T: IdentifiedChannel, repeated: true },
    { no: 2, name: "acknowledgements", kind: "message", T: PacketState, repeated: true },
    { no: 3, name: "commitments", kind: "message", T: PacketState, repeated: true },
    { no: 4, name: "receipts", kind: "message", T: PacketState, repeated: true },
    { no: 5, name: "send_sequences", kind: "message", T: PacketSequence, repeated: true },
    { no: 6, name: "recv_sequences", kind: "message", T: PacketSequence, repeated: true },
    { no: 7, name: "ack_sequences", kind: "message", T: PacketSequence, repeated: true },
    { no: 8, name: "next_channel_sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * PacketSequence defines the genesis type necessary to retrieve and store
 * next send and receive sequences.
 *
 * @generated from message ibc.core.channel.v1.PacketSequence
 */
export class PacketSequence extends Message<PacketSequence> {
  /**
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  /**
   * @generated from field: uint64 sequence = 3;
   */
  sequence = protoInt64.zero;

  constructor(data?: PartialMessage<PacketSequence>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.PacketSequence";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PacketSequence {
    return new PacketSequence().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PacketSequence {
    return new PacketSequence().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PacketSequence {
    return new PacketSequence().fromJsonString(jsonString, options);
  }

  static equals(a: PacketSequence | PlainMessage<PacketSequence> | undefined, b: PacketSequence | PlainMessage<PacketSequence> | undefined): boolean {
    return proto3.util.equals(PacketSequence, a, b);
  }
}

