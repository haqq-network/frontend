// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file ibc/core/channel/v1/query.proto (package ibc.core.channel.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Channel, IdentifiedChannel, PacketState } from "./channel_pb.js";
import { Height, IdentifiedClientState } from "../../client/v1/client_pb.js";
import { PageRequest, PageResponse } from "../../../../cosmos/base/query/v1beta1/pagination_pb.js";

/**
 * QueryChannelRequest is the request type for the Query/Channel RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryChannelRequest
 */
export class QueryChannelRequest extends Message<QueryChannelRequest> {
  /**
   * port unique identifier
   *
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * channel unique identifier
   *
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  constructor(data?: PartialMessage<QueryChannelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryChannelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryChannelRequest {
    return new QueryChannelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryChannelRequest {
    return new QueryChannelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryChannelRequest {
    return new QueryChannelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryChannelRequest | PlainMessage<QueryChannelRequest> | undefined, b: QueryChannelRequest | PlainMessage<QueryChannelRequest> | undefined): boolean {
    return proto3.util.equals(QueryChannelRequest, a, b);
  }
}

/**
 * QueryChannelResponse is the response type for the Query/Channel RPC method.
 * Besides the Channel end, it includes a proof and the height from which the
 * proof was retrieved.
 *
 * @generated from message ibc.core.channel.v1.QueryChannelResponse
 */
export class QueryChannelResponse extends Message<QueryChannelResponse> {
  /**
   * channel associated with the request identifiers
   *
   * @generated from field: ibc.core.channel.v1.Channel channel = 1;
   */
  channel?: Channel;

  /**
   * merkle proof of existence
   *
   * @generated from field: bytes proof = 2;
   */
  proof = new Uint8Array(0);

  /**
   * height at which the proof was retrieved
   *
   * @generated from field: ibc.core.client.v1.Height proof_height = 3;
   */
  proofHeight?: Height;

  constructor(data?: PartialMessage<QueryChannelResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryChannelResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel", kind: "message", T: Channel },
    { no: 2, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryChannelResponse {
    return new QueryChannelResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryChannelResponse {
    return new QueryChannelResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryChannelResponse {
    return new QueryChannelResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryChannelResponse | PlainMessage<QueryChannelResponse> | undefined, b: QueryChannelResponse | PlainMessage<QueryChannelResponse> | undefined): boolean {
    return proto3.util.equals(QueryChannelResponse, a, b);
  }
}

/**
 * QueryChannelsRequest is the request type for the Query/Channels RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryChannelsRequest
 */
export class QueryChannelsRequest extends Message<QueryChannelsRequest> {
  /**
   * pagination request
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryChannelsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryChannelsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryChannelsRequest {
    return new QueryChannelsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryChannelsRequest {
    return new QueryChannelsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryChannelsRequest {
    return new QueryChannelsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryChannelsRequest | PlainMessage<QueryChannelsRequest> | undefined, b: QueryChannelsRequest | PlainMessage<QueryChannelsRequest> | undefined): boolean {
    return proto3.util.equals(QueryChannelsRequest, a, b);
  }
}

/**
 * QueryChannelsResponse is the response type for the Query/Channels RPC method.
 *
 * @generated from message ibc.core.channel.v1.QueryChannelsResponse
 */
export class QueryChannelsResponse extends Message<QueryChannelsResponse> {
  /**
   * list of stored channels of the chain.
   *
   * @generated from field: repeated ibc.core.channel.v1.IdentifiedChannel channels = 1;
   */
  channels: IdentifiedChannel[] = [];

  /**
   * pagination response
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  /**
   * query block height
   *
   * @generated from field: ibc.core.client.v1.Height height = 3;
   */
  height?: Height;

  constructor(data?: PartialMessage<QueryChannelsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryChannelsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channels", kind: "message", T: IdentifiedChannel, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
    { no: 3, name: "height", kind: "message", T: Height },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryChannelsResponse {
    return new QueryChannelsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryChannelsResponse {
    return new QueryChannelsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryChannelsResponse {
    return new QueryChannelsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryChannelsResponse | PlainMessage<QueryChannelsResponse> | undefined, b: QueryChannelsResponse | PlainMessage<QueryChannelsResponse> | undefined): boolean {
    return proto3.util.equals(QueryChannelsResponse, a, b);
  }
}

/**
 * QueryConnectionChannelsRequest is the request type for the
 * Query/QueryConnectionChannels RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryConnectionChannelsRequest
 */
export class QueryConnectionChannelsRequest extends Message<QueryConnectionChannelsRequest> {
  /**
   * connection unique identifier
   *
   * @generated from field: string connection = 1;
   */
  connection = "";

  /**
   * pagination request
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryConnectionChannelsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryConnectionChannelsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connection", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryConnectionChannelsRequest {
    return new QueryConnectionChannelsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryConnectionChannelsRequest {
    return new QueryConnectionChannelsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryConnectionChannelsRequest {
    return new QueryConnectionChannelsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryConnectionChannelsRequest | PlainMessage<QueryConnectionChannelsRequest> | undefined, b: QueryConnectionChannelsRequest | PlainMessage<QueryConnectionChannelsRequest> | undefined): boolean {
    return proto3.util.equals(QueryConnectionChannelsRequest, a, b);
  }
}

/**
 * QueryConnectionChannelsResponse is the Response type for the
 * Query/QueryConnectionChannels RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryConnectionChannelsResponse
 */
export class QueryConnectionChannelsResponse extends Message<QueryConnectionChannelsResponse> {
  /**
   * list of channels associated with a connection.
   *
   * @generated from field: repeated ibc.core.channel.v1.IdentifiedChannel channels = 1;
   */
  channels: IdentifiedChannel[] = [];

  /**
   * pagination response
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  /**
   * query block height
   *
   * @generated from field: ibc.core.client.v1.Height height = 3;
   */
  height?: Height;

  constructor(data?: PartialMessage<QueryConnectionChannelsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryConnectionChannelsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channels", kind: "message", T: IdentifiedChannel, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
    { no: 3, name: "height", kind: "message", T: Height },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryConnectionChannelsResponse {
    return new QueryConnectionChannelsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryConnectionChannelsResponse {
    return new QueryConnectionChannelsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryConnectionChannelsResponse {
    return new QueryConnectionChannelsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryConnectionChannelsResponse | PlainMessage<QueryConnectionChannelsResponse> | undefined, b: QueryConnectionChannelsResponse | PlainMessage<QueryConnectionChannelsResponse> | undefined): boolean {
    return proto3.util.equals(QueryConnectionChannelsResponse, a, b);
  }
}

/**
 * QueryChannelClientStateRequest is the request type for the Query/ClientState
 * RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryChannelClientStateRequest
 */
export class QueryChannelClientStateRequest extends Message<QueryChannelClientStateRequest> {
  /**
   * port unique identifier
   *
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * channel unique identifier
   *
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  constructor(data?: PartialMessage<QueryChannelClientStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryChannelClientStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryChannelClientStateRequest {
    return new QueryChannelClientStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryChannelClientStateRequest {
    return new QueryChannelClientStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryChannelClientStateRequest {
    return new QueryChannelClientStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryChannelClientStateRequest | PlainMessage<QueryChannelClientStateRequest> | undefined, b: QueryChannelClientStateRequest | PlainMessage<QueryChannelClientStateRequest> | undefined): boolean {
    return proto3.util.equals(QueryChannelClientStateRequest, a, b);
  }
}

/**
 * QueryChannelClientStateResponse is the Response type for the
 * Query/QueryChannelClientState RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryChannelClientStateResponse
 */
export class QueryChannelClientStateResponse extends Message<QueryChannelClientStateResponse> {
  /**
   * client state associated with the channel
   *
   * @generated from field: ibc.core.client.v1.IdentifiedClientState identified_client_state = 1;
   */
  identifiedClientState?: IdentifiedClientState;

  /**
   * merkle proof of existence
   *
   * @generated from field: bytes proof = 2;
   */
  proof = new Uint8Array(0);

  /**
   * height at which the proof was retrieved
   *
   * @generated from field: ibc.core.client.v1.Height proof_height = 3;
   */
  proofHeight?: Height;

  constructor(data?: PartialMessage<QueryChannelClientStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryChannelClientStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "identified_client_state", kind: "message", T: IdentifiedClientState },
    { no: 2, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryChannelClientStateResponse {
    return new QueryChannelClientStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryChannelClientStateResponse {
    return new QueryChannelClientStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryChannelClientStateResponse {
    return new QueryChannelClientStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryChannelClientStateResponse | PlainMessage<QueryChannelClientStateResponse> | undefined, b: QueryChannelClientStateResponse | PlainMessage<QueryChannelClientStateResponse> | undefined): boolean {
    return proto3.util.equals(QueryChannelClientStateResponse, a, b);
  }
}

/**
 * QueryChannelConsensusStateRequest is the request type for the
 * Query/ConsensusState RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryChannelConsensusStateRequest
 */
export class QueryChannelConsensusStateRequest extends Message<QueryChannelConsensusStateRequest> {
  /**
   * port unique identifier
   *
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * channel unique identifier
   *
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  /**
   * revision number of the consensus state
   *
   * @generated from field: uint64 revision_number = 3;
   */
  revisionNumber = protoInt64.zero;

  /**
   * revision height of the consensus state
   *
   * @generated from field: uint64 revision_height = 4;
   */
  revisionHeight = protoInt64.zero;

  constructor(data?: PartialMessage<QueryChannelConsensusStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryChannelConsensusStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "revision_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "revision_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryChannelConsensusStateRequest {
    return new QueryChannelConsensusStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryChannelConsensusStateRequest {
    return new QueryChannelConsensusStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryChannelConsensusStateRequest {
    return new QueryChannelConsensusStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryChannelConsensusStateRequest | PlainMessage<QueryChannelConsensusStateRequest> | undefined, b: QueryChannelConsensusStateRequest | PlainMessage<QueryChannelConsensusStateRequest> | undefined): boolean {
    return proto3.util.equals(QueryChannelConsensusStateRequest, a, b);
  }
}

/**
 * QueryChannelClientStateResponse is the Response type for the
 * Query/QueryChannelClientState RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryChannelConsensusStateResponse
 */
export class QueryChannelConsensusStateResponse extends Message<QueryChannelConsensusStateResponse> {
  /**
   * consensus state associated with the channel
   *
   * @generated from field: google.protobuf.Any consensus_state = 1;
   */
  consensusState?: Any;

  /**
   * client ID associated with the consensus state
   *
   * @generated from field: string client_id = 2;
   */
  clientId = "";

  /**
   * merkle proof of existence
   *
   * @generated from field: bytes proof = 3;
   */
  proof = new Uint8Array(0);

  /**
   * height at which the proof was retrieved
   *
   * @generated from field: ibc.core.client.v1.Height proof_height = 4;
   */
  proofHeight?: Height;

  constructor(data?: PartialMessage<QueryChannelConsensusStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryChannelConsensusStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "consensus_state", kind: "message", T: Any },
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "proof_height", kind: "message", T: Height },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryChannelConsensusStateResponse {
    return new QueryChannelConsensusStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryChannelConsensusStateResponse {
    return new QueryChannelConsensusStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryChannelConsensusStateResponse {
    return new QueryChannelConsensusStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryChannelConsensusStateResponse | PlainMessage<QueryChannelConsensusStateResponse> | undefined, b: QueryChannelConsensusStateResponse | PlainMessage<QueryChannelConsensusStateResponse> | undefined): boolean {
    return proto3.util.equals(QueryChannelConsensusStateResponse, a, b);
  }
}

/**
 * QueryPacketCommitmentRequest is the request type for the
 * Query/PacketCommitment RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryPacketCommitmentRequest
 */
export class QueryPacketCommitmentRequest extends Message<QueryPacketCommitmentRequest> {
  /**
   * port unique identifier
   *
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * channel unique identifier
   *
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  /**
   * packet sequence
   *
   * @generated from field: uint64 sequence = 3;
   */
  sequence = protoInt64.zero;

  constructor(data?: PartialMessage<QueryPacketCommitmentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryPacketCommitmentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPacketCommitmentRequest {
    return new QueryPacketCommitmentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPacketCommitmentRequest {
    return new QueryPacketCommitmentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPacketCommitmentRequest {
    return new QueryPacketCommitmentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPacketCommitmentRequest | PlainMessage<QueryPacketCommitmentRequest> | undefined, b: QueryPacketCommitmentRequest | PlainMessage<QueryPacketCommitmentRequest> | undefined): boolean {
    return proto3.util.equals(QueryPacketCommitmentRequest, a, b);
  }
}

/**
 * QueryPacketCommitmentResponse defines the client query response for a packet
 * which also includes a proof and the height from which the proof was
 * retrieved
 *
 * @generated from message ibc.core.channel.v1.QueryPacketCommitmentResponse
 */
export class QueryPacketCommitmentResponse extends Message<QueryPacketCommitmentResponse> {
  /**
   * packet associated with the request fields
   *
   * @generated from field: bytes commitment = 1;
   */
  commitment = new Uint8Array(0);

  /**
   * merkle proof of existence
   *
   * @generated from field: bytes proof = 2;
   */
  proof = new Uint8Array(0);

  /**
   * height at which the proof was retrieved
   *
   * @generated from field: ibc.core.client.v1.Height proof_height = 3;
   */
  proofHeight?: Height;

  constructor(data?: PartialMessage<QueryPacketCommitmentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryPacketCommitmentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commitment", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPacketCommitmentResponse {
    return new QueryPacketCommitmentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPacketCommitmentResponse {
    return new QueryPacketCommitmentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPacketCommitmentResponse {
    return new QueryPacketCommitmentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPacketCommitmentResponse | PlainMessage<QueryPacketCommitmentResponse> | undefined, b: QueryPacketCommitmentResponse | PlainMessage<QueryPacketCommitmentResponse> | undefined): boolean {
    return proto3.util.equals(QueryPacketCommitmentResponse, a, b);
  }
}

/**
 * QueryPacketCommitmentsRequest is the request type for the
 * Query/QueryPacketCommitments RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryPacketCommitmentsRequest
 */
export class QueryPacketCommitmentsRequest extends Message<QueryPacketCommitmentsRequest> {
  /**
   * port unique identifier
   *
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * channel unique identifier
   *
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  /**
   * pagination request
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryPacketCommitmentsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryPacketCommitmentsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPacketCommitmentsRequest {
    return new QueryPacketCommitmentsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPacketCommitmentsRequest {
    return new QueryPacketCommitmentsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPacketCommitmentsRequest {
    return new QueryPacketCommitmentsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPacketCommitmentsRequest | PlainMessage<QueryPacketCommitmentsRequest> | undefined, b: QueryPacketCommitmentsRequest | PlainMessage<QueryPacketCommitmentsRequest> | undefined): boolean {
    return proto3.util.equals(QueryPacketCommitmentsRequest, a, b);
  }
}

/**
 * QueryPacketCommitmentsResponse is the request type for the
 * Query/QueryPacketCommitments RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryPacketCommitmentsResponse
 */
export class QueryPacketCommitmentsResponse extends Message<QueryPacketCommitmentsResponse> {
  /**
   * @generated from field: repeated ibc.core.channel.v1.PacketState commitments = 1;
   */
  commitments: PacketState[] = [];

  /**
   * pagination response
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  /**
   * query block height
   *
   * @generated from field: ibc.core.client.v1.Height height = 3;
   */
  height?: Height;

  constructor(data?: PartialMessage<QueryPacketCommitmentsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryPacketCommitmentsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commitments", kind: "message", T: PacketState, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
    { no: 3, name: "height", kind: "message", T: Height },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPacketCommitmentsResponse {
    return new QueryPacketCommitmentsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPacketCommitmentsResponse {
    return new QueryPacketCommitmentsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPacketCommitmentsResponse {
    return new QueryPacketCommitmentsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPacketCommitmentsResponse | PlainMessage<QueryPacketCommitmentsResponse> | undefined, b: QueryPacketCommitmentsResponse | PlainMessage<QueryPacketCommitmentsResponse> | undefined): boolean {
    return proto3.util.equals(QueryPacketCommitmentsResponse, a, b);
  }
}

/**
 * QueryPacketReceiptRequest is the request type for the
 * Query/PacketReceipt RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryPacketReceiptRequest
 */
export class QueryPacketReceiptRequest extends Message<QueryPacketReceiptRequest> {
  /**
   * port unique identifier
   *
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * channel unique identifier
   *
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  /**
   * packet sequence
   *
   * @generated from field: uint64 sequence = 3;
   */
  sequence = protoInt64.zero;

  constructor(data?: PartialMessage<QueryPacketReceiptRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryPacketReceiptRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPacketReceiptRequest {
    return new QueryPacketReceiptRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPacketReceiptRequest {
    return new QueryPacketReceiptRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPacketReceiptRequest {
    return new QueryPacketReceiptRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPacketReceiptRequest | PlainMessage<QueryPacketReceiptRequest> | undefined, b: QueryPacketReceiptRequest | PlainMessage<QueryPacketReceiptRequest> | undefined): boolean {
    return proto3.util.equals(QueryPacketReceiptRequest, a, b);
  }
}

/**
 * QueryPacketReceiptResponse defines the client query response for a packet
 * receipt which also includes a proof, and the height from which the proof was
 * retrieved
 *
 * @generated from message ibc.core.channel.v1.QueryPacketReceiptResponse
 */
export class QueryPacketReceiptResponse extends Message<QueryPacketReceiptResponse> {
  /**
   * success flag for if receipt exists
   *
   * @generated from field: bool received = 2;
   */
  received = false;

  /**
   * merkle proof of existence
   *
   * @generated from field: bytes proof = 3;
   */
  proof = new Uint8Array(0);

  /**
   * height at which the proof was retrieved
   *
   * @generated from field: ibc.core.client.v1.Height proof_height = 4;
   */
  proofHeight?: Height;

  constructor(data?: PartialMessage<QueryPacketReceiptResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryPacketReceiptResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "received", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "proof_height", kind: "message", T: Height },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPacketReceiptResponse {
    return new QueryPacketReceiptResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPacketReceiptResponse {
    return new QueryPacketReceiptResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPacketReceiptResponse {
    return new QueryPacketReceiptResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPacketReceiptResponse | PlainMessage<QueryPacketReceiptResponse> | undefined, b: QueryPacketReceiptResponse | PlainMessage<QueryPacketReceiptResponse> | undefined): boolean {
    return proto3.util.equals(QueryPacketReceiptResponse, a, b);
  }
}

/**
 * QueryPacketAcknowledgementRequest is the request type for the
 * Query/PacketAcknowledgement RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryPacketAcknowledgementRequest
 */
export class QueryPacketAcknowledgementRequest extends Message<QueryPacketAcknowledgementRequest> {
  /**
   * port unique identifier
   *
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * channel unique identifier
   *
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  /**
   * packet sequence
   *
   * @generated from field: uint64 sequence = 3;
   */
  sequence = protoInt64.zero;

  constructor(data?: PartialMessage<QueryPacketAcknowledgementRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryPacketAcknowledgementRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPacketAcknowledgementRequest {
    return new QueryPacketAcknowledgementRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPacketAcknowledgementRequest {
    return new QueryPacketAcknowledgementRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPacketAcknowledgementRequest {
    return new QueryPacketAcknowledgementRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPacketAcknowledgementRequest | PlainMessage<QueryPacketAcknowledgementRequest> | undefined, b: QueryPacketAcknowledgementRequest | PlainMessage<QueryPacketAcknowledgementRequest> | undefined): boolean {
    return proto3.util.equals(QueryPacketAcknowledgementRequest, a, b);
  }
}

/**
 * QueryPacketAcknowledgementResponse defines the client query response for a
 * packet which also includes a proof and the height from which the
 * proof was retrieved
 *
 * @generated from message ibc.core.channel.v1.QueryPacketAcknowledgementResponse
 */
export class QueryPacketAcknowledgementResponse extends Message<QueryPacketAcknowledgementResponse> {
  /**
   * packet associated with the request fields
   *
   * @generated from field: bytes acknowledgement = 1;
   */
  acknowledgement = new Uint8Array(0);

  /**
   * merkle proof of existence
   *
   * @generated from field: bytes proof = 2;
   */
  proof = new Uint8Array(0);

  /**
   * height at which the proof was retrieved
   *
   * @generated from field: ibc.core.client.v1.Height proof_height = 3;
   */
  proofHeight?: Height;

  constructor(data?: PartialMessage<QueryPacketAcknowledgementResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryPacketAcknowledgementResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "acknowledgement", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPacketAcknowledgementResponse {
    return new QueryPacketAcknowledgementResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPacketAcknowledgementResponse {
    return new QueryPacketAcknowledgementResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPacketAcknowledgementResponse {
    return new QueryPacketAcknowledgementResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPacketAcknowledgementResponse | PlainMessage<QueryPacketAcknowledgementResponse> | undefined, b: QueryPacketAcknowledgementResponse | PlainMessage<QueryPacketAcknowledgementResponse> | undefined): boolean {
    return proto3.util.equals(QueryPacketAcknowledgementResponse, a, b);
  }
}

/**
 * QueryPacketAcknowledgementsRequest is the request type for the
 * Query/QueryPacketCommitments RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
 */
export class QueryPacketAcknowledgementsRequest extends Message<QueryPacketAcknowledgementsRequest> {
  /**
   * port unique identifier
   *
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * channel unique identifier
   *
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  /**
   * pagination request
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequest;

  /**
   * list of packet sequences
   *
   * @generated from field: repeated uint64 packet_commitment_sequences = 4;
   */
  packetCommitmentSequences: bigint[] = [];

  constructor(data?: PartialMessage<QueryPacketAcknowledgementsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryPacketAcknowledgementsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
    { no: 4, name: "packet_commitment_sequences", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPacketAcknowledgementsRequest {
    return new QueryPacketAcknowledgementsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPacketAcknowledgementsRequest {
    return new QueryPacketAcknowledgementsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPacketAcknowledgementsRequest {
    return new QueryPacketAcknowledgementsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPacketAcknowledgementsRequest | PlainMessage<QueryPacketAcknowledgementsRequest> | undefined, b: QueryPacketAcknowledgementsRequest | PlainMessage<QueryPacketAcknowledgementsRequest> | undefined): boolean {
    return proto3.util.equals(QueryPacketAcknowledgementsRequest, a, b);
  }
}

/**
 * QueryPacketAcknowledgemetsResponse is the request type for the
 * Query/QueryPacketAcknowledgements RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
 */
export class QueryPacketAcknowledgementsResponse extends Message<QueryPacketAcknowledgementsResponse> {
  /**
   * @generated from field: repeated ibc.core.channel.v1.PacketState acknowledgements = 1;
   */
  acknowledgements: PacketState[] = [];

  /**
   * pagination response
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  /**
   * query block height
   *
   * @generated from field: ibc.core.client.v1.Height height = 3;
   */
  height?: Height;

  constructor(data?: PartialMessage<QueryPacketAcknowledgementsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryPacketAcknowledgementsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "acknowledgements", kind: "message", T: PacketState, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
    { no: 3, name: "height", kind: "message", T: Height },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPacketAcknowledgementsResponse {
    return new QueryPacketAcknowledgementsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPacketAcknowledgementsResponse {
    return new QueryPacketAcknowledgementsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPacketAcknowledgementsResponse {
    return new QueryPacketAcknowledgementsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPacketAcknowledgementsResponse | PlainMessage<QueryPacketAcknowledgementsResponse> | undefined, b: QueryPacketAcknowledgementsResponse | PlainMessage<QueryPacketAcknowledgementsResponse> | undefined): boolean {
    return proto3.util.equals(QueryPacketAcknowledgementsResponse, a, b);
  }
}

/**
 * QueryUnreceivedPacketsRequest is the request type for the
 * Query/UnreceivedPackets RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryUnreceivedPacketsRequest
 */
export class QueryUnreceivedPacketsRequest extends Message<QueryUnreceivedPacketsRequest> {
  /**
   * port unique identifier
   *
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * channel unique identifier
   *
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  /**
   * list of packet sequences
   *
   * @generated from field: repeated uint64 packet_commitment_sequences = 3;
   */
  packetCommitmentSequences: bigint[] = [];

  constructor(data?: PartialMessage<QueryUnreceivedPacketsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryUnreceivedPacketsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "packet_commitment_sequences", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUnreceivedPacketsRequest {
    return new QueryUnreceivedPacketsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUnreceivedPacketsRequest {
    return new QueryUnreceivedPacketsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUnreceivedPacketsRequest {
    return new QueryUnreceivedPacketsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUnreceivedPacketsRequest | PlainMessage<QueryUnreceivedPacketsRequest> | undefined, b: QueryUnreceivedPacketsRequest | PlainMessage<QueryUnreceivedPacketsRequest> | undefined): boolean {
    return proto3.util.equals(QueryUnreceivedPacketsRequest, a, b);
  }
}

/**
 * QueryUnreceivedPacketsResponse is the response type for the
 * Query/UnreceivedPacketCommitments RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryUnreceivedPacketsResponse
 */
export class QueryUnreceivedPacketsResponse extends Message<QueryUnreceivedPacketsResponse> {
  /**
   * list of unreceived packet sequences
   *
   * @generated from field: repeated uint64 sequences = 1;
   */
  sequences: bigint[] = [];

  /**
   * query block height
   *
   * @generated from field: ibc.core.client.v1.Height height = 2;
   */
  height?: Height;

  constructor(data?: PartialMessage<QueryUnreceivedPacketsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryUnreceivedPacketsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sequences", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 2, name: "height", kind: "message", T: Height },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUnreceivedPacketsResponse {
    return new QueryUnreceivedPacketsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUnreceivedPacketsResponse {
    return new QueryUnreceivedPacketsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUnreceivedPacketsResponse {
    return new QueryUnreceivedPacketsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUnreceivedPacketsResponse | PlainMessage<QueryUnreceivedPacketsResponse> | undefined, b: QueryUnreceivedPacketsResponse | PlainMessage<QueryUnreceivedPacketsResponse> | undefined): boolean {
    return proto3.util.equals(QueryUnreceivedPacketsResponse, a, b);
  }
}

/**
 * QueryUnreceivedAcks is the request type for the
 * Query/UnreceivedAcks RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryUnreceivedAcksRequest
 */
export class QueryUnreceivedAcksRequest extends Message<QueryUnreceivedAcksRequest> {
  /**
   * port unique identifier
   *
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * channel unique identifier
   *
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  /**
   * list of acknowledgement sequences
   *
   * @generated from field: repeated uint64 packet_ack_sequences = 3;
   */
  packetAckSequences: bigint[] = [];

  constructor(data?: PartialMessage<QueryUnreceivedAcksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryUnreceivedAcksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "packet_ack_sequences", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUnreceivedAcksRequest {
    return new QueryUnreceivedAcksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUnreceivedAcksRequest {
    return new QueryUnreceivedAcksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUnreceivedAcksRequest {
    return new QueryUnreceivedAcksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUnreceivedAcksRequest | PlainMessage<QueryUnreceivedAcksRequest> | undefined, b: QueryUnreceivedAcksRequest | PlainMessage<QueryUnreceivedAcksRequest> | undefined): boolean {
    return proto3.util.equals(QueryUnreceivedAcksRequest, a, b);
  }
}

/**
 * QueryUnreceivedAcksResponse is the response type for the
 * Query/UnreceivedAcks RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryUnreceivedAcksResponse
 */
export class QueryUnreceivedAcksResponse extends Message<QueryUnreceivedAcksResponse> {
  /**
   * list of unreceived acknowledgement sequences
   *
   * @generated from field: repeated uint64 sequences = 1;
   */
  sequences: bigint[] = [];

  /**
   * query block height
   *
   * @generated from field: ibc.core.client.v1.Height height = 2;
   */
  height?: Height;

  constructor(data?: PartialMessage<QueryUnreceivedAcksResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryUnreceivedAcksResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sequences", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 2, name: "height", kind: "message", T: Height },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUnreceivedAcksResponse {
    return new QueryUnreceivedAcksResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUnreceivedAcksResponse {
    return new QueryUnreceivedAcksResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUnreceivedAcksResponse {
    return new QueryUnreceivedAcksResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUnreceivedAcksResponse | PlainMessage<QueryUnreceivedAcksResponse> | undefined, b: QueryUnreceivedAcksResponse | PlainMessage<QueryUnreceivedAcksResponse> | undefined): boolean {
    return proto3.util.equals(QueryUnreceivedAcksResponse, a, b);
  }
}

/**
 * QueryNextSequenceReceiveRequest is the request type for the
 * Query/QueryNextSequenceReceiveRequest RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryNextSequenceReceiveRequest
 */
export class QueryNextSequenceReceiveRequest extends Message<QueryNextSequenceReceiveRequest> {
  /**
   * port unique identifier
   *
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * channel unique identifier
   *
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  constructor(data?: PartialMessage<QueryNextSequenceReceiveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryNextSequenceReceiveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryNextSequenceReceiveRequest {
    return new QueryNextSequenceReceiveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryNextSequenceReceiveRequest {
    return new QueryNextSequenceReceiveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryNextSequenceReceiveRequest {
    return new QueryNextSequenceReceiveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryNextSequenceReceiveRequest | PlainMessage<QueryNextSequenceReceiveRequest> | undefined, b: QueryNextSequenceReceiveRequest | PlainMessage<QueryNextSequenceReceiveRequest> | undefined): boolean {
    return proto3.util.equals(QueryNextSequenceReceiveRequest, a, b);
  }
}

/**
 * QuerySequenceResponse is the request type for the
 * Query/QueryNextSequenceReceiveResponse RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryNextSequenceReceiveResponse
 */
export class QueryNextSequenceReceiveResponse extends Message<QueryNextSequenceReceiveResponse> {
  /**
   * next sequence receive number
   *
   * @generated from field: uint64 next_sequence_receive = 1;
   */
  nextSequenceReceive = protoInt64.zero;

  /**
   * merkle proof of existence
   *
   * @generated from field: bytes proof = 2;
   */
  proof = new Uint8Array(0);

  /**
   * height at which the proof was retrieved
   *
   * @generated from field: ibc.core.client.v1.Height proof_height = 3;
   */
  proofHeight?: Height;

  constructor(data?: PartialMessage<QueryNextSequenceReceiveResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryNextSequenceReceiveResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "next_sequence_receive", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryNextSequenceReceiveResponse {
    return new QueryNextSequenceReceiveResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryNextSequenceReceiveResponse {
    return new QueryNextSequenceReceiveResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryNextSequenceReceiveResponse {
    return new QueryNextSequenceReceiveResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryNextSequenceReceiveResponse | PlainMessage<QueryNextSequenceReceiveResponse> | undefined, b: QueryNextSequenceReceiveResponse | PlainMessage<QueryNextSequenceReceiveResponse> | undefined): boolean {
    return proto3.util.equals(QueryNextSequenceReceiveResponse, a, b);
  }
}

/**
 * QueryNextSequenceSendRequest is the request type for the
 * Query/QueryNextSequenceSend RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryNextSequenceSendRequest
 */
export class QueryNextSequenceSendRequest extends Message<QueryNextSequenceSendRequest> {
  /**
   * port unique identifier
   *
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * channel unique identifier
   *
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  constructor(data?: PartialMessage<QueryNextSequenceSendRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryNextSequenceSendRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryNextSequenceSendRequest {
    return new QueryNextSequenceSendRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryNextSequenceSendRequest {
    return new QueryNextSequenceSendRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryNextSequenceSendRequest {
    return new QueryNextSequenceSendRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryNextSequenceSendRequest | PlainMessage<QueryNextSequenceSendRequest> | undefined, b: QueryNextSequenceSendRequest | PlainMessage<QueryNextSequenceSendRequest> | undefined): boolean {
    return proto3.util.equals(QueryNextSequenceSendRequest, a, b);
  }
}

/**
 * QueryNextSequenceSendResponse is the request type for the
 * Query/QueryNextSequenceSend RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryNextSequenceSendResponse
 */
export class QueryNextSequenceSendResponse extends Message<QueryNextSequenceSendResponse> {
  /**
   * next sequence send number
   *
   * @generated from field: uint64 next_sequence_send = 1;
   */
  nextSequenceSend = protoInt64.zero;

  /**
   * merkle proof of existence
   *
   * @generated from field: bytes proof = 2;
   */
  proof = new Uint8Array(0);

  /**
   * height at which the proof was retrieved
   *
   * @generated from field: ibc.core.client.v1.Height proof_height = 3;
   */
  proofHeight?: Height;

  constructor(data?: PartialMessage<QueryNextSequenceSendResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.QueryNextSequenceSendResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "next_sequence_send", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryNextSequenceSendResponse {
    return new QueryNextSequenceSendResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryNextSequenceSendResponse {
    return new QueryNextSequenceSendResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryNextSequenceSendResponse {
    return new QueryNextSequenceSendResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryNextSequenceSendResponse | PlainMessage<QueryNextSequenceSendResponse> | undefined, b: QueryNextSequenceSendResponse | PlainMessage<QueryNextSequenceSendResponse> | undefined): boolean {
    return proto3.util.equals(QueryNextSequenceSendResponse, a, b);
  }
}

