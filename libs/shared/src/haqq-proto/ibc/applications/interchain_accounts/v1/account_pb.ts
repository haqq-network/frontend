// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file ibc/applications/interchain_accounts/v1/account.proto (package ibc.applications.interchain_accounts.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { BaseAccount } from "../../../../cosmos/auth/v1beta1/auth_pb.js";

/**
 * An InterchainAccount is defined as a BaseAccount & the address of the account owner on the controller chain
 *
 * @generated from message ibc.applications.interchain_accounts.v1.InterchainAccount
 */
export class InterchainAccount extends Message<InterchainAccount> {
  /**
   * @generated from field: cosmos.auth.v1beta1.BaseAccount base_account = 1;
   */
  baseAccount?: BaseAccount;

  /**
   * @generated from field: string account_owner = 2;
   */
  accountOwner = "";

  constructor(data?: PartialMessage<InterchainAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.interchain_accounts.v1.InterchainAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_account", kind: "message", T: BaseAccount },
    { no: 2, name: "account_owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InterchainAccount {
    return new InterchainAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InterchainAccount {
    return new InterchainAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InterchainAccount {
    return new InterchainAccount().fromJsonString(jsonString, options);
  }

  static equals(a: InterchainAccount | PlainMessage<InterchainAccount> | undefined, b: InterchainAccount | PlainMessage<InterchainAccount> | undefined): boolean {
    return proto3.util.equals(InterchainAccount, a, b);
  }
}

