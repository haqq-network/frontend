// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file ibc/applications/interchain_accounts/controller/v1/tx.proto (package ibc.applications.interchain_accounts.controller.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3, protoInt64 } from '@bufbuild/protobuf';
import { InterchainAccountPacketData } from '../../v1/packet_pb';
import { Params } from './controller_pb';

/**
 * MsgRegisterInterchainAccount defines the payload for Msg/RegisterAccount
 *
 * @generated from message ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccount
 */
export class MsgRegisterInterchainAccount extends Message<MsgRegisterInterchainAccount> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = '';

  /**
   * @generated from field: string connection_id = 2;
   */
  connectionId = '';

  /**
   * @generated from field: string version = 3;
   */
  version = '';

  constructor(data?: PartialMessage<MsgRegisterInterchainAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccount';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'owner', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'connection_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 3, name: 'version', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgRegisterInterchainAccount {
    return new MsgRegisterInterchainAccount().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgRegisterInterchainAccount {
    return new MsgRegisterInterchainAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgRegisterInterchainAccount {
    return new MsgRegisterInterchainAccount().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | MsgRegisterInterchainAccount
      | PlainMessage<MsgRegisterInterchainAccount>
      | undefined,
    b:
      | MsgRegisterInterchainAccount
      | PlainMessage<MsgRegisterInterchainAccount>
      | undefined,
  ): boolean {
    return proto3.util.equals(MsgRegisterInterchainAccount, a, b);
  }
}

/**
 * MsgRegisterInterchainAccountResponse defines the response for Msg/RegisterAccount
 *
 * @generated from message ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccountResponse
 */
export class MsgRegisterInterchainAccountResponse extends Message<MsgRegisterInterchainAccountResponse> {
  /**
   * @generated from field: string channel_id = 1;
   */
  channelId = '';

  /**
   * @generated from field: string port_id = 2;
   */
  portId = '';

  constructor(data?: PartialMessage<MsgRegisterInterchainAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccountResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'channel_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'port_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgRegisterInterchainAccountResponse {
    return new MsgRegisterInterchainAccountResponse().fromBinary(
      bytes,
      options,
    );
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgRegisterInterchainAccountResponse {
    return new MsgRegisterInterchainAccountResponse().fromJson(
      jsonValue,
      options,
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgRegisterInterchainAccountResponse {
    return new MsgRegisterInterchainAccountResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | MsgRegisterInterchainAccountResponse
      | PlainMessage<MsgRegisterInterchainAccountResponse>
      | undefined,
    b:
      | MsgRegisterInterchainAccountResponse
      | PlainMessage<MsgRegisterInterchainAccountResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(MsgRegisterInterchainAccountResponse, a, b);
  }
}

/**
 * MsgSendTx defines the payload for Msg/SendTx
 *
 * @generated from message ibc.applications.interchain_accounts.controller.v1.MsgSendTx
 */
export class MsgSendTx extends Message<MsgSendTx> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = '';

  /**
   * @generated from field: string connection_id = 2;
   */
  connectionId = '';

  /**
   * @generated from field: ibc.applications.interchain_accounts.v1.InterchainAccountPacketData packet_data = 3;
   */
  packetData?: InterchainAccountPacketData;

  /**
   * Relative timeout timestamp provided will be added to the current block time during transaction execution.
   * The timeout timestamp must be non-zero.
   *
   * @generated from field: uint64 relative_timeout = 4;
   */
  relativeTimeout = protoInt64.zero;

  constructor(data?: PartialMessage<MsgSendTx>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'ibc.applications.interchain_accounts.controller.v1.MsgSendTx';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'owner', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'connection_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 3,
      name: 'packet_data',
      kind: 'message',
      T: InterchainAccountPacketData,
    },
    {
      no: 4,
      name: 'relative_timeout',
      kind: 'scalar',
      T: 4 /* ScalarType.UINT64 */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgSendTx {
    return new MsgSendTx().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgSendTx {
    return new MsgSendTx().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgSendTx {
    return new MsgSendTx().fromJsonString(jsonString, options);
  }

  static equals(
    a: MsgSendTx | PlainMessage<MsgSendTx> | undefined,
    b: MsgSendTx | PlainMessage<MsgSendTx> | undefined,
  ): boolean {
    return proto3.util.equals(MsgSendTx, a, b);
  }
}

/**
 * MsgSendTxResponse defines the response for MsgSendTx
 *
 * @generated from message ibc.applications.interchain_accounts.controller.v1.MsgSendTxResponse
 */
export class MsgSendTxResponse extends Message<MsgSendTxResponse> {
  /**
   * @generated from field: uint64 sequence = 1;
   */
  sequence = protoInt64.zero;

  constructor(data?: PartialMessage<MsgSendTxResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'ibc.applications.interchain_accounts.controller.v1.MsgSendTxResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'sequence', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgSendTxResponse {
    return new MsgSendTxResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgSendTxResponse {
    return new MsgSendTxResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgSendTxResponse {
    return new MsgSendTxResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: MsgSendTxResponse | PlainMessage<MsgSendTxResponse> | undefined,
    b: MsgSendTxResponse | PlainMessage<MsgSendTxResponse> | undefined,
  ): boolean {
    return proto3.util.equals(MsgSendTxResponse, a, b);
  }
}

/**
 * MsgUpdateParams defines the payload for Msg/UpdateParams
 *
 * @generated from message ibc.applications.interchain_accounts.controller.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * signer address (it may be the the address that controls the module, which defaults to x/gov unless overwritten).
   *
   * @generated from field: string signer = 1;
   */
  signer = '';

  /**
   * params defines the 27-interchain-accounts/controller parameters to update.
   *
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: ibc.applications.interchain_accounts.controller.v1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'ibc.applications.interchain_accounts.controller.v1.MsgUpdateParams';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'signer', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'params', kind: 'message', T: Params },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(
    a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined,
    b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined,
  ): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse defines the response for Msg/UpdateParams
 *
 * @generated from message ibc.applications.interchain_accounts.controller.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'ibc.applications.interchain_accounts.controller.v1.MsgUpdateParamsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | MsgUpdateParamsResponse
      | PlainMessage<MsgUpdateParamsResponse>
      | undefined,
    b:
      | MsgUpdateParamsResponse
      | PlainMessage<MsgUpdateParamsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}
