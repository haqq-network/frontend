// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file ibc/applications/fee/v1/fee.proto (package ibc.applications.fee.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';
import { Coin } from '../../../../cosmos/base/v1beta1/coin_pb';
import { PacketId } from '../../../core/channel/v1/channel_pb';

/**
 * Fee defines the ICS29 receive, acknowledgement and timeout fees
 *
 * @generated from message ibc.applications.fee.v1.Fee
 */
export class Fee extends Message<Fee> {
  /**
   * the packet receive fee
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin recv_fee = 1;
   */
  recvFee: Coin[] = [];

  /**
   * the packet acknowledgement fee
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin ack_fee = 2;
   */
  ackFee: Coin[] = [];

  /**
   * the packet timeout fee
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin timeout_fee = 3;
   */
  timeoutFee: Coin[] = [];

  constructor(data?: PartialMessage<Fee>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'ibc.applications.fee.v1.Fee';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'recv_fee', kind: 'message', T: Coin, repeated: true },
    { no: 2, name: 'ack_fee', kind: 'message', T: Coin, repeated: true },
    { no: 3, name: 'timeout_fee', kind: 'message', T: Coin, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Fee {
    return new Fee().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Fee {
    return new Fee().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Fee {
    return new Fee().fromJsonString(jsonString, options);
  }

  static equals(
    a: Fee | PlainMessage<Fee> | undefined,
    b: Fee | PlainMessage<Fee> | undefined,
  ): boolean {
    return proto3.util.equals(Fee, a, b);
  }
}

/**
 * PacketFee contains ICS29 relayer fees, refund address and optional list of permitted relayers
 *
 * @generated from message ibc.applications.fee.v1.PacketFee
 */
export class PacketFee extends Message<PacketFee> {
  /**
   * fee encapsulates the recv, ack and timeout fees associated with an IBC packet
   *
   * @generated from field: ibc.applications.fee.v1.Fee fee = 1;
   */
  fee?: Fee;

  /**
   * the refund address for unspent fees
   *
   * @generated from field: string refund_address = 2;
   */
  refundAddress = '';

  /**
   * optional list of relayers permitted to receive fees
   *
   * @generated from field: repeated string relayers = 3;
   */
  relayers: string[] = [];

  constructor(data?: PartialMessage<PacketFee>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'ibc.applications.fee.v1.PacketFee';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'fee', kind: 'message', T: Fee },
    {
      no: 2,
      name: 'refund_address',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 3,
      name: 'relayers',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): PacketFee {
    return new PacketFee().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): PacketFee {
    return new PacketFee().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): PacketFee {
    return new PacketFee().fromJsonString(jsonString, options);
  }

  static equals(
    a: PacketFee | PlainMessage<PacketFee> | undefined,
    b: PacketFee | PlainMessage<PacketFee> | undefined,
  ): boolean {
    return proto3.util.equals(PacketFee, a, b);
  }
}

/**
 * PacketFees contains a list of type PacketFee
 *
 * @generated from message ibc.applications.fee.v1.PacketFees
 */
export class PacketFees extends Message<PacketFees> {
  /**
   * list of packet fees
   *
   * @generated from field: repeated ibc.applications.fee.v1.PacketFee packet_fees = 1;
   */
  packetFees: PacketFee[] = [];

  constructor(data?: PartialMessage<PacketFees>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'ibc.applications.fee.v1.PacketFees';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'packet_fees',
      kind: 'message',
      T: PacketFee,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): PacketFees {
    return new PacketFees().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): PacketFees {
    return new PacketFees().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): PacketFees {
    return new PacketFees().fromJsonString(jsonString, options);
  }

  static equals(
    a: PacketFees | PlainMessage<PacketFees> | undefined,
    b: PacketFees | PlainMessage<PacketFees> | undefined,
  ): boolean {
    return proto3.util.equals(PacketFees, a, b);
  }
}

/**
 * IdentifiedPacketFees contains a list of type PacketFee and associated PacketId
 *
 * @generated from message ibc.applications.fee.v1.IdentifiedPacketFees
 */
export class IdentifiedPacketFees extends Message<IdentifiedPacketFees> {
  /**
   * unique packet identifier comprised of the channel ID, port ID and sequence
   *
   * @generated from field: ibc.core.channel.v1.PacketId packet_id = 1;
   */
  packetId?: PacketId;

  /**
   * list of packet fees
   *
   * @generated from field: repeated ibc.applications.fee.v1.PacketFee packet_fees = 2;
   */
  packetFees: PacketFee[] = [];

  constructor(data?: PartialMessage<IdentifiedPacketFees>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'ibc.applications.fee.v1.IdentifiedPacketFees';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'packet_id', kind: 'message', T: PacketId },
    {
      no: 2,
      name: 'packet_fees',
      kind: 'message',
      T: PacketFee,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IdentifiedPacketFees {
    return new IdentifiedPacketFees().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IdentifiedPacketFees {
    return new IdentifiedPacketFees().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IdentifiedPacketFees {
    return new IdentifiedPacketFees().fromJsonString(jsonString, options);
  }

  static equals(
    a: IdentifiedPacketFees | PlainMessage<IdentifiedPacketFees> | undefined,
    b: IdentifiedPacketFees | PlainMessage<IdentifiedPacketFees> | undefined,
  ): boolean {
    return proto3.util.equals(IdentifiedPacketFees, a, b);
  }
}
