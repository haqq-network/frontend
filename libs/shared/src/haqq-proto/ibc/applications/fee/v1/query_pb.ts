// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file ibc/applications/fee/v1/query.proto (package ibc.applications.fee.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { PageRequest, PageResponse } from "../../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { IdentifiedPacketFees } from "./fee_pb.js";
import { PacketId } from "../../../core/channel/v1/channel_pb.js";
import { Coin } from "../../../../cosmos/base/v1beta1/coin_pb.js";
import { FeeEnabledChannel } from "./genesis_pb.js";

/**
 * QueryIncentivizedPacketsRequest defines the request type for the IncentivizedPackets rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryIncentivizedPacketsRequest
 */
export class QueryIncentivizedPacketsRequest extends Message<QueryIncentivizedPacketsRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  /**
   * block height at which to query
   *
   * @generated from field: uint64 query_height = 2;
   */
  queryHeight = protoInt64.zero;

  constructor(data?: PartialMessage<QueryIncentivizedPacketsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fee.v1.QueryIncentivizedPacketsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
    { no: 2, name: "query_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIncentivizedPacketsRequest {
    return new QueryIncentivizedPacketsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIncentivizedPacketsRequest {
    return new QueryIncentivizedPacketsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIncentivizedPacketsRequest {
    return new QueryIncentivizedPacketsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIncentivizedPacketsRequest | PlainMessage<QueryIncentivizedPacketsRequest> | undefined, b: QueryIncentivizedPacketsRequest | PlainMessage<QueryIncentivizedPacketsRequest> | undefined): boolean {
    return proto3.util.equals(QueryIncentivizedPacketsRequest, a, b);
  }
}

/**
 * QueryIncentivizedPacketsResponse defines the response type for the IncentivizedPackets rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryIncentivizedPacketsResponse
 */
export class QueryIncentivizedPacketsResponse extends Message<QueryIncentivizedPacketsResponse> {
  /**
   * list of identified fees for incentivized packets
   *
   * @generated from field: repeated ibc.applications.fee.v1.IdentifiedPacketFees incentivized_packets = 1;
   */
  incentivizedPackets: IdentifiedPacketFees[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryIncentivizedPacketsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fee.v1.QueryIncentivizedPacketsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "incentivized_packets", kind: "message", T: IdentifiedPacketFees, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIncentivizedPacketsResponse {
    return new QueryIncentivizedPacketsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIncentivizedPacketsResponse {
    return new QueryIncentivizedPacketsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIncentivizedPacketsResponse {
    return new QueryIncentivizedPacketsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIncentivizedPacketsResponse | PlainMessage<QueryIncentivizedPacketsResponse> | undefined, b: QueryIncentivizedPacketsResponse | PlainMessage<QueryIncentivizedPacketsResponse> | undefined): boolean {
    return proto3.util.equals(QueryIncentivizedPacketsResponse, a, b);
  }
}

/**
 * QueryIncentivizedPacketRequest defines the request type for the IncentivizedPacket rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryIncentivizedPacketRequest
 */
export class QueryIncentivizedPacketRequest extends Message<QueryIncentivizedPacketRequest> {
  /**
   * unique packet identifier comprised of channel ID, port ID and sequence
   *
   * @generated from field: ibc.core.channel.v1.PacketId packet_id = 1;
   */
  packetId?: PacketId;

  /**
   * block height at which to query
   *
   * @generated from field: uint64 query_height = 2;
   */
  queryHeight = protoInt64.zero;

  constructor(data?: PartialMessage<QueryIncentivizedPacketRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fee.v1.QueryIncentivizedPacketRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "packet_id", kind: "message", T: PacketId },
    { no: 2, name: "query_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIncentivizedPacketRequest {
    return new QueryIncentivizedPacketRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIncentivizedPacketRequest {
    return new QueryIncentivizedPacketRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIncentivizedPacketRequest {
    return new QueryIncentivizedPacketRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIncentivizedPacketRequest | PlainMessage<QueryIncentivizedPacketRequest> | undefined, b: QueryIncentivizedPacketRequest | PlainMessage<QueryIncentivizedPacketRequest> | undefined): boolean {
    return proto3.util.equals(QueryIncentivizedPacketRequest, a, b);
  }
}

/**
 * QueryIncentivizedPacketsResponse defines the response type for the IncentivizedPacket rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryIncentivizedPacketResponse
 */
export class QueryIncentivizedPacketResponse extends Message<QueryIncentivizedPacketResponse> {
  /**
   * the identified fees for the incentivized packet
   *
   * @generated from field: ibc.applications.fee.v1.IdentifiedPacketFees incentivized_packet = 1;
   */
  incentivizedPacket?: IdentifiedPacketFees;

  constructor(data?: PartialMessage<QueryIncentivizedPacketResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fee.v1.QueryIncentivizedPacketResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "incentivized_packet", kind: "message", T: IdentifiedPacketFees },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIncentivizedPacketResponse {
    return new QueryIncentivizedPacketResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIncentivizedPacketResponse {
    return new QueryIncentivizedPacketResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIncentivizedPacketResponse {
    return new QueryIncentivizedPacketResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIncentivizedPacketResponse | PlainMessage<QueryIncentivizedPacketResponse> | undefined, b: QueryIncentivizedPacketResponse | PlainMessage<QueryIncentivizedPacketResponse> | undefined): boolean {
    return proto3.util.equals(QueryIncentivizedPacketResponse, a, b);
  }
}

/**
 * QueryIncentivizedPacketsForChannelRequest defines the request type for querying for all incentivized packets
 * for a specific channel
 *
 * @generated from message ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest
 */
export class QueryIncentivizedPacketsForChannelRequest extends Message<QueryIncentivizedPacketsForChannelRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  /**
   * @generated from field: string port_id = 2;
   */
  portId = "";

  /**
   * @generated from field: string channel_id = 3;
   */
  channelId = "";

  /**
   * Height to query at
   *
   * @generated from field: uint64 query_height = 4;
   */
  queryHeight = protoInt64.zero;

  constructor(data?: PartialMessage<QueryIncentivizedPacketsForChannelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
    { no: 2, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "query_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIncentivizedPacketsForChannelRequest {
    return new QueryIncentivizedPacketsForChannelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIncentivizedPacketsForChannelRequest {
    return new QueryIncentivizedPacketsForChannelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIncentivizedPacketsForChannelRequest {
    return new QueryIncentivizedPacketsForChannelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIncentivizedPacketsForChannelRequest | PlainMessage<QueryIncentivizedPacketsForChannelRequest> | undefined, b: QueryIncentivizedPacketsForChannelRequest | PlainMessage<QueryIncentivizedPacketsForChannelRequest> | undefined): boolean {
    return proto3.util.equals(QueryIncentivizedPacketsForChannelRequest, a, b);
  }
}

/**
 * QueryIncentivizedPacketsResponse defines the response type for the incentivized packets RPC
 *
 * @generated from message ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse
 */
export class QueryIncentivizedPacketsForChannelResponse extends Message<QueryIncentivizedPacketsForChannelResponse> {
  /**
   * Map of all incentivized_packets
   *
   * @generated from field: repeated ibc.applications.fee.v1.IdentifiedPacketFees incentivized_packets = 1;
   */
  incentivizedPackets: IdentifiedPacketFees[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryIncentivizedPacketsForChannelResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "incentivized_packets", kind: "message", T: IdentifiedPacketFees, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIncentivizedPacketsForChannelResponse {
    return new QueryIncentivizedPacketsForChannelResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIncentivizedPacketsForChannelResponse {
    return new QueryIncentivizedPacketsForChannelResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIncentivizedPacketsForChannelResponse {
    return new QueryIncentivizedPacketsForChannelResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIncentivizedPacketsForChannelResponse | PlainMessage<QueryIncentivizedPacketsForChannelResponse> | undefined, b: QueryIncentivizedPacketsForChannelResponse | PlainMessage<QueryIncentivizedPacketsForChannelResponse> | undefined): boolean {
    return proto3.util.equals(QueryIncentivizedPacketsForChannelResponse, a, b);
  }
}

/**
 * QueryTotalRecvFeesRequest defines the request type for the TotalRecvFees rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryTotalRecvFeesRequest
 */
export class QueryTotalRecvFeesRequest extends Message<QueryTotalRecvFeesRequest> {
  /**
   * the packet identifier for the associated fees
   *
   * @generated from field: ibc.core.channel.v1.PacketId packet_id = 1;
   */
  packetId?: PacketId;

  constructor(data?: PartialMessage<QueryTotalRecvFeesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fee.v1.QueryTotalRecvFeesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "packet_id", kind: "message", T: PacketId },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalRecvFeesRequest {
    return new QueryTotalRecvFeesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalRecvFeesRequest {
    return new QueryTotalRecvFeesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalRecvFeesRequest {
    return new QueryTotalRecvFeesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalRecvFeesRequest | PlainMessage<QueryTotalRecvFeesRequest> | undefined, b: QueryTotalRecvFeesRequest | PlainMessage<QueryTotalRecvFeesRequest> | undefined): boolean {
    return proto3.util.equals(QueryTotalRecvFeesRequest, a, b);
  }
}

/**
 * QueryTotalRecvFeesResponse defines the response type for the TotalRecvFees rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryTotalRecvFeesResponse
 */
export class QueryTotalRecvFeesResponse extends Message<QueryTotalRecvFeesResponse> {
  /**
   * the total packet receive fees
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin recv_fees = 1;
   */
  recvFees: Coin[] = [];

  constructor(data?: PartialMessage<QueryTotalRecvFeesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fee.v1.QueryTotalRecvFeesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "recv_fees", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalRecvFeesResponse {
    return new QueryTotalRecvFeesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalRecvFeesResponse {
    return new QueryTotalRecvFeesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalRecvFeesResponse {
    return new QueryTotalRecvFeesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalRecvFeesResponse | PlainMessage<QueryTotalRecvFeesResponse> | undefined, b: QueryTotalRecvFeesResponse | PlainMessage<QueryTotalRecvFeesResponse> | undefined): boolean {
    return proto3.util.equals(QueryTotalRecvFeesResponse, a, b);
  }
}

/**
 * QueryTotalAckFeesRequest defines the request type for the TotalAckFees rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryTotalAckFeesRequest
 */
export class QueryTotalAckFeesRequest extends Message<QueryTotalAckFeesRequest> {
  /**
   * the packet identifier for the associated fees
   *
   * @generated from field: ibc.core.channel.v1.PacketId packet_id = 1;
   */
  packetId?: PacketId;

  constructor(data?: PartialMessage<QueryTotalAckFeesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fee.v1.QueryTotalAckFeesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "packet_id", kind: "message", T: PacketId },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalAckFeesRequest {
    return new QueryTotalAckFeesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalAckFeesRequest {
    return new QueryTotalAckFeesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalAckFeesRequest {
    return new QueryTotalAckFeesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalAckFeesRequest | PlainMessage<QueryTotalAckFeesRequest> | undefined, b: QueryTotalAckFeesRequest | PlainMessage<QueryTotalAckFeesRequest> | undefined): boolean {
    return proto3.util.equals(QueryTotalAckFeesRequest, a, b);
  }
}

/**
 * QueryTotalAckFeesResponse defines the response type for the TotalAckFees rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryTotalAckFeesResponse
 */
export class QueryTotalAckFeesResponse extends Message<QueryTotalAckFeesResponse> {
  /**
   * the total packet acknowledgement fees
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin ack_fees = 1;
   */
  ackFees: Coin[] = [];

  constructor(data?: PartialMessage<QueryTotalAckFeesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fee.v1.QueryTotalAckFeesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ack_fees", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalAckFeesResponse {
    return new QueryTotalAckFeesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalAckFeesResponse {
    return new QueryTotalAckFeesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalAckFeesResponse {
    return new QueryTotalAckFeesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalAckFeesResponse | PlainMessage<QueryTotalAckFeesResponse> | undefined, b: QueryTotalAckFeesResponse | PlainMessage<QueryTotalAckFeesResponse> | undefined): boolean {
    return proto3.util.equals(QueryTotalAckFeesResponse, a, b);
  }
}

/**
 * QueryTotalTimeoutFeesRequest defines the request type for the TotalTimeoutFees rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest
 */
export class QueryTotalTimeoutFeesRequest extends Message<QueryTotalTimeoutFeesRequest> {
  /**
   * the packet identifier for the associated fees
   *
   * @generated from field: ibc.core.channel.v1.PacketId packet_id = 1;
   */
  packetId?: PacketId;

  constructor(data?: PartialMessage<QueryTotalTimeoutFeesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "packet_id", kind: "message", T: PacketId },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalTimeoutFeesRequest {
    return new QueryTotalTimeoutFeesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalTimeoutFeesRequest {
    return new QueryTotalTimeoutFeesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalTimeoutFeesRequest {
    return new QueryTotalTimeoutFeesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalTimeoutFeesRequest | PlainMessage<QueryTotalTimeoutFeesRequest> | undefined, b: QueryTotalTimeoutFeesRequest | PlainMessage<QueryTotalTimeoutFeesRequest> | undefined): boolean {
    return proto3.util.equals(QueryTotalTimeoutFeesRequest, a, b);
  }
}

/**
 * QueryTotalTimeoutFeesResponse defines the response type for the TotalTimeoutFees rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse
 */
export class QueryTotalTimeoutFeesResponse extends Message<QueryTotalTimeoutFeesResponse> {
  /**
   * the total packet timeout fees
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin timeout_fees = 1;
   */
  timeoutFees: Coin[] = [];

  constructor(data?: PartialMessage<QueryTotalTimeoutFeesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timeout_fees", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalTimeoutFeesResponse {
    return new QueryTotalTimeoutFeesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalTimeoutFeesResponse {
    return new QueryTotalTimeoutFeesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalTimeoutFeesResponse {
    return new QueryTotalTimeoutFeesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalTimeoutFeesResponse | PlainMessage<QueryTotalTimeoutFeesResponse> | undefined, b: QueryTotalTimeoutFeesResponse | PlainMessage<QueryTotalTimeoutFeesResponse> | undefined): boolean {
    return proto3.util.equals(QueryTotalTimeoutFeesResponse, a, b);
  }
}

/**
 * QueryPayeeRequest defines the request type for the Payee rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryPayeeRequest
 */
export class QueryPayeeRequest extends Message<QueryPayeeRequest> {
  /**
   * unique channel identifier
   *
   * @generated from field: string channel_id = 1;
   */
  channelId = "";

  /**
   * the relayer address to which the distribution address is registered
   *
   * @generated from field: string relayer = 2;
   */
  relayer = "";

  constructor(data?: PartialMessage<QueryPayeeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fee.v1.QueryPayeeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "relayer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPayeeRequest {
    return new QueryPayeeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPayeeRequest {
    return new QueryPayeeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPayeeRequest {
    return new QueryPayeeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPayeeRequest | PlainMessage<QueryPayeeRequest> | undefined, b: QueryPayeeRequest | PlainMessage<QueryPayeeRequest> | undefined): boolean {
    return proto3.util.equals(QueryPayeeRequest, a, b);
  }
}

/**
 * QueryPayeeResponse defines the response type for the Payee rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryPayeeResponse
 */
export class QueryPayeeResponse extends Message<QueryPayeeResponse> {
  /**
   * the payee address to which packet fees are paid out
   *
   * @generated from field: string payee_address = 1;
   */
  payeeAddress = "";

  constructor(data?: PartialMessage<QueryPayeeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fee.v1.QueryPayeeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "payee_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPayeeResponse {
    return new QueryPayeeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPayeeResponse {
    return new QueryPayeeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPayeeResponse {
    return new QueryPayeeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPayeeResponse | PlainMessage<QueryPayeeResponse> | undefined, b: QueryPayeeResponse | PlainMessage<QueryPayeeResponse> | undefined): boolean {
    return proto3.util.equals(QueryPayeeResponse, a, b);
  }
}

/**
 * QueryCounterpartyPayeeRequest defines the request type for the CounterpartyPayee rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryCounterpartyPayeeRequest
 */
export class QueryCounterpartyPayeeRequest extends Message<QueryCounterpartyPayeeRequest> {
  /**
   * unique channel identifier
   *
   * @generated from field: string channel_id = 1;
   */
  channelId = "";

  /**
   * the relayer address to which the counterparty is registered
   *
   * @generated from field: string relayer = 2;
   */
  relayer = "";

  constructor(data?: PartialMessage<QueryCounterpartyPayeeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fee.v1.QueryCounterpartyPayeeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "relayer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCounterpartyPayeeRequest {
    return new QueryCounterpartyPayeeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCounterpartyPayeeRequest {
    return new QueryCounterpartyPayeeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCounterpartyPayeeRequest {
    return new QueryCounterpartyPayeeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCounterpartyPayeeRequest | PlainMessage<QueryCounterpartyPayeeRequest> | undefined, b: QueryCounterpartyPayeeRequest | PlainMessage<QueryCounterpartyPayeeRequest> | undefined): boolean {
    return proto3.util.equals(QueryCounterpartyPayeeRequest, a, b);
  }
}

/**
 * QueryCounterpartyPayeeResponse defines the response type for the CounterpartyPayee rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryCounterpartyPayeeResponse
 */
export class QueryCounterpartyPayeeResponse extends Message<QueryCounterpartyPayeeResponse> {
  /**
   * the counterparty payee address used to compensate forward relaying
   *
   * @generated from field: string counterparty_payee = 1;
   */
  counterpartyPayee = "";

  constructor(data?: PartialMessage<QueryCounterpartyPayeeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fee.v1.QueryCounterpartyPayeeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "counterparty_payee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCounterpartyPayeeResponse {
    return new QueryCounterpartyPayeeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCounterpartyPayeeResponse {
    return new QueryCounterpartyPayeeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCounterpartyPayeeResponse {
    return new QueryCounterpartyPayeeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCounterpartyPayeeResponse | PlainMessage<QueryCounterpartyPayeeResponse> | undefined, b: QueryCounterpartyPayeeResponse | PlainMessage<QueryCounterpartyPayeeResponse> | undefined): boolean {
    return proto3.util.equals(QueryCounterpartyPayeeResponse, a, b);
  }
}

/**
 * QueryFeeEnabledChannelsRequest defines the request type for the FeeEnabledChannels rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest
 */
export class QueryFeeEnabledChannelsRequest extends Message<QueryFeeEnabledChannelsRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  /**
   * block height at which to query
   *
   * @generated from field: uint64 query_height = 2;
   */
  queryHeight = protoInt64.zero;

  constructor(data?: PartialMessage<QueryFeeEnabledChannelsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
    { no: 2, name: "query_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFeeEnabledChannelsRequest {
    return new QueryFeeEnabledChannelsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFeeEnabledChannelsRequest {
    return new QueryFeeEnabledChannelsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFeeEnabledChannelsRequest {
    return new QueryFeeEnabledChannelsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFeeEnabledChannelsRequest | PlainMessage<QueryFeeEnabledChannelsRequest> | undefined, b: QueryFeeEnabledChannelsRequest | PlainMessage<QueryFeeEnabledChannelsRequest> | undefined): boolean {
    return proto3.util.equals(QueryFeeEnabledChannelsRequest, a, b);
  }
}

/**
 * QueryFeeEnabledChannelsResponse defines the response type for the FeeEnabledChannels rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse
 */
export class QueryFeeEnabledChannelsResponse extends Message<QueryFeeEnabledChannelsResponse> {
  /**
   * list of fee enabled channels
   *
   * @generated from field: repeated ibc.applications.fee.v1.FeeEnabledChannel fee_enabled_channels = 1;
   */
  feeEnabledChannels: FeeEnabledChannel[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryFeeEnabledChannelsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fee_enabled_channels", kind: "message", T: FeeEnabledChannel, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFeeEnabledChannelsResponse {
    return new QueryFeeEnabledChannelsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFeeEnabledChannelsResponse {
    return new QueryFeeEnabledChannelsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFeeEnabledChannelsResponse {
    return new QueryFeeEnabledChannelsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFeeEnabledChannelsResponse | PlainMessage<QueryFeeEnabledChannelsResponse> | undefined, b: QueryFeeEnabledChannelsResponse | PlainMessage<QueryFeeEnabledChannelsResponse> | undefined): boolean {
    return proto3.util.equals(QueryFeeEnabledChannelsResponse, a, b);
  }
}

/**
 * QueryFeeEnabledChannelRequest defines the request type for the FeeEnabledChannel rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryFeeEnabledChannelRequest
 */
export class QueryFeeEnabledChannelRequest extends Message<QueryFeeEnabledChannelRequest> {
  /**
   * unique port identifier
   *
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * unique channel identifier
   *
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  constructor(data?: PartialMessage<QueryFeeEnabledChannelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fee.v1.QueryFeeEnabledChannelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFeeEnabledChannelRequest {
    return new QueryFeeEnabledChannelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFeeEnabledChannelRequest {
    return new QueryFeeEnabledChannelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFeeEnabledChannelRequest {
    return new QueryFeeEnabledChannelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFeeEnabledChannelRequest | PlainMessage<QueryFeeEnabledChannelRequest> | undefined, b: QueryFeeEnabledChannelRequest | PlainMessage<QueryFeeEnabledChannelRequest> | undefined): boolean {
    return proto3.util.equals(QueryFeeEnabledChannelRequest, a, b);
  }
}

/**
 * QueryFeeEnabledChannelResponse defines the response type for the FeeEnabledChannel rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryFeeEnabledChannelResponse
 */
export class QueryFeeEnabledChannelResponse extends Message<QueryFeeEnabledChannelResponse> {
  /**
   * boolean flag representing the fee enabled channel status
   *
   * @generated from field: bool fee_enabled = 1;
   */
  feeEnabled = false;

  constructor(data?: PartialMessage<QueryFeeEnabledChannelResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fee.v1.QueryFeeEnabledChannelResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fee_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFeeEnabledChannelResponse {
    return new QueryFeeEnabledChannelResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFeeEnabledChannelResponse {
    return new QueryFeeEnabledChannelResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFeeEnabledChannelResponse {
    return new QueryFeeEnabledChannelResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFeeEnabledChannelResponse | PlainMessage<QueryFeeEnabledChannelResponse> | undefined, b: QueryFeeEnabledChannelResponse | PlainMessage<QueryFeeEnabledChannelResponse> | undefined): boolean {
    return proto3.util.equals(QueryFeeEnabledChannelResponse, a, b);
  }
}

