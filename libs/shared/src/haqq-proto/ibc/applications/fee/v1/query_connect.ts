// @generated by protoc-gen-connect-es v1.1.3 with parameter "target=ts"
// @generated from file ibc/applications/fee/v1/query.proto (package ibc.applications.fee.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { QueryCounterpartyPayeeRequest, QueryCounterpartyPayeeResponse, QueryFeeEnabledChannelRequest, QueryFeeEnabledChannelResponse, QueryFeeEnabledChannelsRequest, QueryFeeEnabledChannelsResponse, QueryIncentivizedPacketRequest, QueryIncentivizedPacketResponse, QueryIncentivizedPacketsForChannelRequest, QueryIncentivizedPacketsForChannelResponse, QueryIncentivizedPacketsRequest, QueryIncentivizedPacketsResponse, QueryPayeeRequest, QueryPayeeResponse, QueryTotalAckFeesRequest, QueryTotalAckFeesResponse, QueryTotalRecvFeesRequest, QueryTotalRecvFeesResponse, QueryTotalTimeoutFeesRequest, QueryTotalTimeoutFeesResponse } from "./query_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * Query defines the ICS29 gRPC querier service.
 *
 * @generated from service ibc.applications.fee.v1.Query
 */
export const Query = {
  typeName: "ibc.applications.fee.v1.Query",
  methods: {
    /**
     * IncentivizedPackets returns all incentivized packets and their associated fees
     *
     * @generated from rpc ibc.applications.fee.v1.Query.IncentivizedPackets
     */
    incentivizedPackets: {
      name: "IncentivizedPackets",
      I: QueryIncentivizedPacketsRequest,
      O: QueryIncentivizedPacketsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * IncentivizedPacket returns all packet fees for a packet given its identifier
     *
     * @generated from rpc ibc.applications.fee.v1.Query.IncentivizedPacket
     */
    incentivizedPacket: {
      name: "IncentivizedPacket",
      I: QueryIncentivizedPacketRequest,
      O: QueryIncentivizedPacketResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Gets all incentivized packets for a specific channel
     *
     * @generated from rpc ibc.applications.fee.v1.Query.IncentivizedPacketsForChannel
     */
    incentivizedPacketsForChannel: {
      name: "IncentivizedPacketsForChannel",
      I: QueryIncentivizedPacketsForChannelRequest,
      O: QueryIncentivizedPacketsForChannelResponse,
      kind: MethodKind.Unary,
    },
    /**
     * TotalRecvFees returns the total receive fees for a packet given its identifier
     *
     * @generated from rpc ibc.applications.fee.v1.Query.TotalRecvFees
     */
    totalRecvFees: {
      name: "TotalRecvFees",
      I: QueryTotalRecvFeesRequest,
      O: QueryTotalRecvFeesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * TotalAckFees returns the total acknowledgement fees for a packet given its identifier
     *
     * @generated from rpc ibc.applications.fee.v1.Query.TotalAckFees
     */
    totalAckFees: {
      name: "TotalAckFees",
      I: QueryTotalAckFeesRequest,
      O: QueryTotalAckFeesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * TotalTimeoutFees returns the total timeout fees for a packet given its identifier
     *
     * @generated from rpc ibc.applications.fee.v1.Query.TotalTimeoutFees
     */
    totalTimeoutFees: {
      name: "TotalTimeoutFees",
      I: QueryTotalTimeoutFeesRequest,
      O: QueryTotalTimeoutFeesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Payee returns the registered payee address for a specific channel given the relayer address
     *
     * @generated from rpc ibc.applications.fee.v1.Query.Payee
     */
    payee: {
      name: "Payee",
      I: QueryPayeeRequest,
      O: QueryPayeeResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CounterpartyPayee returns the registered counterparty payee for forward relaying
     *
     * @generated from rpc ibc.applications.fee.v1.Query.CounterpartyPayee
     */
    counterpartyPayee: {
      name: "CounterpartyPayee",
      I: QueryCounterpartyPayeeRequest,
      O: QueryCounterpartyPayeeResponse,
      kind: MethodKind.Unary,
    },
    /**
     * FeeEnabledChannels returns a list of all fee enabled channels
     *
     * @generated from rpc ibc.applications.fee.v1.Query.FeeEnabledChannels
     */
    feeEnabledChannels: {
      name: "FeeEnabledChannels",
      I: QueryFeeEnabledChannelsRequest,
      O: QueryFeeEnabledChannelsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * FeeEnabledChannel returns true if the provided port and channel identifiers belong to a fee enabled channel
     *
     * @generated from rpc ibc.applications.fee.v1.Query.FeeEnabledChannel
     */
    feeEnabledChannel: {
      name: "FeeEnabledChannel",
      I: QueryFeeEnabledChannelRequest,
      O: QueryFeeEnabledChannelResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

