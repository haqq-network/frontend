// @generated by protoc-gen-connect-es v1.1.3 with parameter "target=ts"
// @generated from file ethermint/evm/v1/query.proto (package ethermint.evm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { EstimateGasResponse, EthCallRequest, QueryAccountRequest, QueryAccountResponse, QueryBalanceRequest, QueryBalanceResponse, QueryBaseFeeRequest, QueryBaseFeeResponse, QueryCodeRequest, QueryCodeResponse, QueryCosmosAccountRequest, QueryCosmosAccountResponse, QueryParamsRequest, QueryParamsResponse, QueryStorageRequest, QueryStorageResponse, QueryTraceBlockRequest, QueryTraceBlockResponse, QueryTraceTxRequest, QueryTraceTxResponse, QueryValidatorAccountRequest, QueryValidatorAccountResponse } from "./query_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { MsgEthereumTxResponse } from "./tx_pb.js";

/**
 * Query defines the gRPC querier service.
 *
 * @generated from service ethermint.evm.v1.Query
 */
export const Query = {
  typeName: "ethermint.evm.v1.Query",
  methods: {
    /**
     * Account queries an Ethereum account.
     *
     * @generated from rpc ethermint.evm.v1.Query.Account
     */
    account: {
      name: "Account",
      I: QueryAccountRequest,
      O: QueryAccountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CosmosAccount queries an Ethereum account's Cosmos Address.
     *
     * @generated from rpc ethermint.evm.v1.Query.CosmosAccount
     */
    cosmosAccount: {
      name: "CosmosAccount",
      I: QueryCosmosAccountRequest,
      O: QueryCosmosAccountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ValidatorAccount queries an Ethereum account's from a validator consensus
     * Address.
     *
     * @generated from rpc ethermint.evm.v1.Query.ValidatorAccount
     */
    validatorAccount: {
      name: "ValidatorAccount",
      I: QueryValidatorAccountRequest,
      O: QueryValidatorAccountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Balance queries the balance of a the EVM denomination for a single
     * EthAccount.
     *
     * @generated from rpc ethermint.evm.v1.Query.Balance
     */
    balance: {
      name: "Balance",
      I: QueryBalanceRequest,
      O: QueryBalanceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Storage queries the balance of all coins for a single account.
     *
     * @generated from rpc ethermint.evm.v1.Query.Storage
     */
    storage: {
      name: "Storage",
      I: QueryStorageRequest,
      O: QueryStorageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Code queries the balance of all coins for a single account.
     *
     * @generated from rpc ethermint.evm.v1.Query.Code
     */
    code: {
      name: "Code",
      I: QueryCodeRequest,
      O: QueryCodeResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Params queries the parameters of x/evm module.
     *
     * @generated from rpc ethermint.evm.v1.Query.Params
     */
    params: {
      name: "Params",
      I: QueryParamsRequest,
      O: QueryParamsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * EthCall implements the `eth_call` rpc api
     *
     * @generated from rpc ethermint.evm.v1.Query.EthCall
     */
    ethCall: {
      name: "EthCall",
      I: EthCallRequest,
      O: MsgEthereumTxResponse,
      kind: MethodKind.Unary,
    },
    /**
     * EstimateGas implements the `eth_estimateGas` rpc api
     *
     * @generated from rpc ethermint.evm.v1.Query.EstimateGas
     */
    estimateGas: {
      name: "EstimateGas",
      I: EthCallRequest,
      O: EstimateGasResponse,
      kind: MethodKind.Unary,
    },
    /**
     * TraceTx implements the `debug_traceTransaction` rpc api
     *
     * @generated from rpc ethermint.evm.v1.Query.TraceTx
     */
    traceTx: {
      name: "TraceTx",
      I: QueryTraceTxRequest,
      O: QueryTraceTxResponse,
      kind: MethodKind.Unary,
    },
    /**
     * TraceBlock implements the `debug_traceBlockByNumber` and
     * `debug_traceBlockByHash` rpc api
     *
     * @generated from rpc ethermint.evm.v1.Query.TraceBlock
     */
    traceBlock: {
      name: "TraceBlock",
      I: QueryTraceBlockRequest,
      O: QueryTraceBlockResponse,
      kind: MethodKind.Unary,
    },
    /**
     * BaseFee queries the base fee of the parent block of the current block,
     * it's similar to feemarket module's method, but also checks london hardfork
     * status.
     *
     * @generated from rpc ethermint.evm.v1.Query.BaseFee
     */
    baseFee: {
      name: "BaseFee",
      I: QueryBaseFeeRequest,
      O: QueryBaseFeeResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

