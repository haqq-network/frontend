// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file ethermint/evm/v1/events.proto (package ethermint.evm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * EventEthereumTx defines the event for an Ethereum transaction
 *
 * @generated from message ethermint.evm.v1.EventEthereumTx
 */
export class EventEthereumTx extends Message<EventEthereumTx> {
  /**
   * amount
   *
   * @generated from field: string amount = 1;
   */
  amount = "";

  /**
   * eth_hash is the Ethereum hash of the transaction
   *
   * @generated from field: string eth_hash = 2;
   */
  ethHash = "";

  /**
   * index of the transaction in the block
   *
   * @generated from field: string index = 3;
   */
  index = "";

  /**
   * gas_used is the amount of gas used by the transaction
   *
   * @generated from field: string gas_used = 4;
   */
  gasUsed = "";

  /**
   * hash is the Tendermint hash of the transaction
   *
   * @generated from field: string hash = 5;
   */
  hash = "";

  /**
   * recipient of the transaction
   *
   * @generated from field: string recipient = 6;
   */
  recipient = "";

  /**
   * eth_tx_failed contains a VM error should it occur
   *
   * @generated from field: string eth_tx_failed = 7;
   */
  ethTxFailed = "";

  constructor(data?: PartialMessage<EventEthereumTx>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ethermint.evm.v1.EventEthereumTx";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "eth_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "index", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "gas_used", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "eth_tx_failed", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventEthereumTx {
    return new EventEthereumTx().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventEthereumTx {
    return new EventEthereumTx().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventEthereumTx {
    return new EventEthereumTx().fromJsonString(jsonString, options);
  }

  static equals(a: EventEthereumTx | PlainMessage<EventEthereumTx> | undefined, b: EventEthereumTx | PlainMessage<EventEthereumTx> | undefined): boolean {
    return proto3.util.equals(EventEthereumTx, a, b);
  }
}

/**
 * EventTxLog defines the event for an Ethereum transaction log
 *
 * @generated from message ethermint.evm.v1.EventTxLog
 */
export class EventTxLog extends Message<EventTxLog> {
  /**
   * tx_logs is an array of transaction logs
   *
   * @generated from field: repeated string tx_logs = 1;
   */
  txLogs: string[] = [];

  constructor(data?: PartialMessage<EventTxLog>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ethermint.evm.v1.EventTxLog";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx_logs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventTxLog {
    return new EventTxLog().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventTxLog {
    return new EventTxLog().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventTxLog {
    return new EventTxLog().fromJsonString(jsonString, options);
  }

  static equals(a: EventTxLog | PlainMessage<EventTxLog> | undefined, b: EventTxLog | PlainMessage<EventTxLog> | undefined): boolean {
    return proto3.util.equals(EventTxLog, a, b);
  }
}

/**
 * EventMessage
 *
 * @generated from message ethermint.evm.v1.EventMessage
 */
export class EventMessage extends Message<EventMessage> {
  /**
   * module which emits the event
   *
   * @generated from field: string module = 1;
   */
  module = "";

  /**
   * sender of the message
   *
   * @generated from field: string sender = 2;
   */
  sender = "";

  /**
   * tx_type is the type of the message
   *
   * @generated from field: string tx_type = 3;
   */
  txType = "";

  constructor(data?: PartialMessage<EventMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ethermint.evm.v1.EventMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tx_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventMessage {
    return new EventMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventMessage {
    return new EventMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventMessage {
    return new EventMessage().fromJsonString(jsonString, options);
  }

  static equals(a: EventMessage | PlainMessage<EventMessage> | undefined, b: EventMessage | PlainMessage<EventMessage> | undefined): boolean {
    return proto3.util.equals(EventMessage, a, b);
  }
}

/**
 * EventBlockBloom defines an Ethereum block bloom filter event
 *
 * @generated from message ethermint.evm.v1.EventBlockBloom
 */
export class EventBlockBloom extends Message<EventBlockBloom> {
  /**
   * bloom is the bloom filter of the block
   *
   * @generated from field: string bloom = 1;
   */
  bloom = "";

  constructor(data?: PartialMessage<EventBlockBloom>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ethermint.evm.v1.EventBlockBloom";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bloom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventBlockBloom {
    return new EventBlockBloom().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventBlockBloom {
    return new EventBlockBloom().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventBlockBloom {
    return new EventBlockBloom().fromJsonString(jsonString, options);
  }

  static equals(a: EventBlockBloom | PlainMessage<EventBlockBloom> | undefined, b: EventBlockBloom | PlainMessage<EventBlockBloom> | undefined): boolean {
    return proto3.util.equals(EventBlockBloom, a, b);
  }
}

