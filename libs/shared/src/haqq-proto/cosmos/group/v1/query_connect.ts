// Since: cosmos-sdk 0.46

// @generated by protoc-gen-connect-es v1.1.3 with parameter "target=ts"
// @generated from file cosmos/group/v1/query.proto (package cosmos.group.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import {
  QueryGroupInfoRequest,
  QueryGroupInfoResponse,
  QueryGroupMembersRequest,
  QueryGroupMembersResponse,
  QueryGroupPoliciesByAdminRequest,
  QueryGroupPoliciesByAdminResponse,
  QueryGroupPoliciesByGroupRequest,
  QueryGroupPoliciesByGroupResponse,
  QueryGroupPolicyInfoRequest,
  QueryGroupPolicyInfoResponse,
  QueryGroupsByAdminRequest,
  QueryGroupsByAdminResponse,
  QueryGroupsByMemberRequest,
  QueryGroupsByMemberResponse,
  QueryProposalRequest,
  QueryProposalResponse,
  QueryProposalsByGroupPolicyRequest,
  QueryProposalsByGroupPolicyResponse,
  QueryTallyResultRequest,
  QueryTallyResultResponse,
  QueryVoteByProposalVoterRequest,
  QueryVoteByProposalVoterResponse,
  QueryVotesByProposalRequest,
  QueryVotesByProposalResponse,
  QueryVotesByVoterRequest,
  QueryVotesByVoterResponse,
} from './query_pb';
import { MethodKind } from '@bufbuild/protobuf';

/**
 * Query is the cosmos.group.v1 Query service.
 *
 * @generated from service cosmos.group.v1.Query
 */
export const Query = {
  typeName: 'cosmos.group.v1.Query',
  methods: {
    /**
     * GroupInfo queries group info based on group id.
     *
     * @generated from rpc cosmos.group.v1.Query.GroupInfo
     */
    groupInfo: {
      name: 'GroupInfo',
      I: QueryGroupInfoRequest,
      O: QueryGroupInfoResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GroupPolicyInfo queries group policy info based on account address of group policy.
     *
     * @generated from rpc cosmos.group.v1.Query.GroupPolicyInfo
     */
    groupPolicyInfo: {
      name: 'GroupPolicyInfo',
      I: QueryGroupPolicyInfoRequest,
      O: QueryGroupPolicyInfoResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GroupMembers queries members of a group by group id.
     *
     * @generated from rpc cosmos.group.v1.Query.GroupMembers
     */
    groupMembers: {
      name: 'GroupMembers',
      I: QueryGroupMembersRequest,
      O: QueryGroupMembersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GroupsByAdmin queries groups by admin address.
     *
     * @generated from rpc cosmos.group.v1.Query.GroupsByAdmin
     */
    groupsByAdmin: {
      name: 'GroupsByAdmin',
      I: QueryGroupsByAdminRequest,
      O: QueryGroupsByAdminResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GroupPoliciesByGroup queries group policies by group id.
     *
     * @generated from rpc cosmos.group.v1.Query.GroupPoliciesByGroup
     */
    groupPoliciesByGroup: {
      name: 'GroupPoliciesByGroup',
      I: QueryGroupPoliciesByGroupRequest,
      O: QueryGroupPoliciesByGroupResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GroupPoliciesByAdmin queries group policies by admin address.
     *
     * @generated from rpc cosmos.group.v1.Query.GroupPoliciesByAdmin
     */
    groupPoliciesByAdmin: {
      name: 'GroupPoliciesByAdmin',
      I: QueryGroupPoliciesByAdminRequest,
      O: QueryGroupPoliciesByAdminResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Proposal queries a proposal based on proposal id.
     *
     * @generated from rpc cosmos.group.v1.Query.Proposal
     */
    proposal: {
      name: 'Proposal',
      I: QueryProposalRequest,
      O: QueryProposalResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ProposalsByGroupPolicy queries proposals based on account address of group policy.
     *
     * @generated from rpc cosmos.group.v1.Query.ProposalsByGroupPolicy
     */
    proposalsByGroupPolicy: {
      name: 'ProposalsByGroupPolicy',
      I: QueryProposalsByGroupPolicyRequest,
      O: QueryProposalsByGroupPolicyResponse,
      kind: MethodKind.Unary,
    },
    /**
     * VoteByProposalVoter queries a vote by proposal id and voter.
     *
     * @generated from rpc cosmos.group.v1.Query.VoteByProposalVoter
     */
    voteByProposalVoter: {
      name: 'VoteByProposalVoter',
      I: QueryVoteByProposalVoterRequest,
      O: QueryVoteByProposalVoterResponse,
      kind: MethodKind.Unary,
    },
    /**
     * VotesByProposal queries a vote by proposal id.
     *
     * @generated from rpc cosmos.group.v1.Query.VotesByProposal
     */
    votesByProposal: {
      name: 'VotesByProposal',
      I: QueryVotesByProposalRequest,
      O: QueryVotesByProposalResponse,
      kind: MethodKind.Unary,
    },
    /**
     * VotesByVoter queries a vote by voter.
     *
     * @generated from rpc cosmos.group.v1.Query.VotesByVoter
     */
    votesByVoter: {
      name: 'VotesByVoter',
      I: QueryVotesByVoterRequest,
      O: QueryVotesByVoterResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GroupsByMember queries groups by member address.
     *
     * @generated from rpc cosmos.group.v1.Query.GroupsByMember
     */
    groupsByMember: {
      name: 'GroupsByMember',
      I: QueryGroupsByMemberRequest,
      O: QueryGroupsByMemberResponse,
      kind: MethodKind.Unary,
    },
    /**
     * TallyResult returns the tally result of a proposal. If the proposal is
     * still in voting period, then this query computes the current tally state,
     * which might not be final. On the other hand, if the proposal is final,
     * then it simply returns the `final_tally_result` state stored in the
     * proposal itself.
     *
     * @generated from rpc cosmos.group.v1.Query.TallyResult
     */
    tallyResult: {
      name: 'TallyResult',
      I: QueryTallyResultRequest,
      O: QueryTallyResultResponse,
      kind: MethodKind.Unary,
    },
  },
} as const;
