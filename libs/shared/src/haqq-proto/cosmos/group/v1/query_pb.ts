// Since: cosmos-sdk 0.46

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file cosmos/group/v1/query.proto (package cosmos.group.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { GroupInfo, GroupMember, GroupPolicyInfo, Proposal, TallyResult, Vote } from "./types_pb.js";
import { PageRequest, PageResponse } from "../../base/query/v1beta1/pagination_pb.js";

/**
 * QueryGroupInfoRequest is the Query/GroupInfo request type.
 *
 * @generated from message cosmos.group.v1.QueryGroupInfoRequest
 */
export class QueryGroupInfoRequest extends Message<QueryGroupInfoRequest> {
  /**
   * group_id is the unique ID of the group.
   *
   * @generated from field: uint64 group_id = 1;
   */
  groupId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryGroupInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryGroupInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGroupInfoRequest {
    return new QueryGroupInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGroupInfoRequest {
    return new QueryGroupInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGroupInfoRequest {
    return new QueryGroupInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGroupInfoRequest | PlainMessage<QueryGroupInfoRequest> | undefined, b: QueryGroupInfoRequest | PlainMessage<QueryGroupInfoRequest> | undefined): boolean {
    return proto3.util.equals(QueryGroupInfoRequest, a, b);
  }
}

/**
 * QueryGroupInfoResponse is the Query/GroupInfo response type.
 *
 * @generated from message cosmos.group.v1.QueryGroupInfoResponse
 */
export class QueryGroupInfoResponse extends Message<QueryGroupInfoResponse> {
  /**
   * info is the GroupInfo of the group.
   *
   * @generated from field: cosmos.group.v1.GroupInfo info = 1;
   */
  info?: GroupInfo;

  constructor(data?: PartialMessage<QueryGroupInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryGroupInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: GroupInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGroupInfoResponse {
    return new QueryGroupInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGroupInfoResponse {
    return new QueryGroupInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGroupInfoResponse {
    return new QueryGroupInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGroupInfoResponse | PlainMessage<QueryGroupInfoResponse> | undefined, b: QueryGroupInfoResponse | PlainMessage<QueryGroupInfoResponse> | undefined): boolean {
    return proto3.util.equals(QueryGroupInfoResponse, a, b);
  }
}

/**
 * QueryGroupPolicyInfoRequest is the Query/GroupPolicyInfo request type.
 *
 * @generated from message cosmos.group.v1.QueryGroupPolicyInfoRequest
 */
export class QueryGroupPolicyInfoRequest extends Message<QueryGroupPolicyInfoRequest> {
  /**
   * address is the account address of the group policy.
   *
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<QueryGroupPolicyInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryGroupPolicyInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGroupPolicyInfoRequest {
    return new QueryGroupPolicyInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGroupPolicyInfoRequest {
    return new QueryGroupPolicyInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGroupPolicyInfoRequest {
    return new QueryGroupPolicyInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGroupPolicyInfoRequest | PlainMessage<QueryGroupPolicyInfoRequest> | undefined, b: QueryGroupPolicyInfoRequest | PlainMessage<QueryGroupPolicyInfoRequest> | undefined): boolean {
    return proto3.util.equals(QueryGroupPolicyInfoRequest, a, b);
  }
}

/**
 * QueryGroupPolicyInfoResponse is the Query/GroupPolicyInfo response type.
 *
 * @generated from message cosmos.group.v1.QueryGroupPolicyInfoResponse
 */
export class QueryGroupPolicyInfoResponse extends Message<QueryGroupPolicyInfoResponse> {
  /**
   * info is the GroupPolicyInfo of the group policy.
   *
   * @generated from field: cosmos.group.v1.GroupPolicyInfo info = 1;
   */
  info?: GroupPolicyInfo;

  constructor(data?: PartialMessage<QueryGroupPolicyInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryGroupPolicyInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: GroupPolicyInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGroupPolicyInfoResponse {
    return new QueryGroupPolicyInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGroupPolicyInfoResponse {
    return new QueryGroupPolicyInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGroupPolicyInfoResponse {
    return new QueryGroupPolicyInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGroupPolicyInfoResponse | PlainMessage<QueryGroupPolicyInfoResponse> | undefined, b: QueryGroupPolicyInfoResponse | PlainMessage<QueryGroupPolicyInfoResponse> | undefined): boolean {
    return proto3.util.equals(QueryGroupPolicyInfoResponse, a, b);
  }
}

/**
 * QueryGroupMembersRequest is the Query/GroupMembers request type.
 *
 * @generated from message cosmos.group.v1.QueryGroupMembersRequest
 */
export class QueryGroupMembersRequest extends Message<QueryGroupMembersRequest> {
  /**
   * group_id is the unique ID of the group.
   *
   * @generated from field: uint64 group_id = 1;
   */
  groupId = protoInt64.zero;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryGroupMembersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryGroupMembersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGroupMembersRequest {
    return new QueryGroupMembersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGroupMembersRequest {
    return new QueryGroupMembersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGroupMembersRequest {
    return new QueryGroupMembersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGroupMembersRequest | PlainMessage<QueryGroupMembersRequest> | undefined, b: QueryGroupMembersRequest | PlainMessage<QueryGroupMembersRequest> | undefined): boolean {
    return proto3.util.equals(QueryGroupMembersRequest, a, b);
  }
}

/**
 * QueryGroupMembersResponse is the Query/GroupMembersResponse response type.
 *
 * @generated from message cosmos.group.v1.QueryGroupMembersResponse
 */
export class QueryGroupMembersResponse extends Message<QueryGroupMembersResponse> {
  /**
   * members are the members of the group with given group_id.
   *
   * @generated from field: repeated cosmos.group.v1.GroupMember members = 1;
   */
  members: GroupMember[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryGroupMembersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryGroupMembersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "members", kind: "message", T: GroupMember, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGroupMembersResponse {
    return new QueryGroupMembersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGroupMembersResponse {
    return new QueryGroupMembersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGroupMembersResponse {
    return new QueryGroupMembersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGroupMembersResponse | PlainMessage<QueryGroupMembersResponse> | undefined, b: QueryGroupMembersResponse | PlainMessage<QueryGroupMembersResponse> | undefined): boolean {
    return proto3.util.equals(QueryGroupMembersResponse, a, b);
  }
}

/**
 * QueryGroupsByAdminRequest is the Query/GroupsByAdmin request type.
 *
 * @generated from message cosmos.group.v1.QueryGroupsByAdminRequest
 */
export class QueryGroupsByAdminRequest extends Message<QueryGroupsByAdminRequest> {
  /**
   * admin is the account address of a group's admin.
   *
   * @generated from field: string admin = 1;
   */
  admin = "";

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryGroupsByAdminRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryGroupsByAdminRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGroupsByAdminRequest {
    return new QueryGroupsByAdminRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGroupsByAdminRequest {
    return new QueryGroupsByAdminRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGroupsByAdminRequest {
    return new QueryGroupsByAdminRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGroupsByAdminRequest | PlainMessage<QueryGroupsByAdminRequest> | undefined, b: QueryGroupsByAdminRequest | PlainMessage<QueryGroupsByAdminRequest> | undefined): boolean {
    return proto3.util.equals(QueryGroupsByAdminRequest, a, b);
  }
}

/**
 * QueryGroupsByAdminResponse is the Query/GroupsByAdminResponse response type.
 *
 * @generated from message cosmos.group.v1.QueryGroupsByAdminResponse
 */
export class QueryGroupsByAdminResponse extends Message<QueryGroupsByAdminResponse> {
  /**
   * groups are the groups info with the provided admin.
   *
   * @generated from field: repeated cosmos.group.v1.GroupInfo groups = 1;
   */
  groups: GroupInfo[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryGroupsByAdminResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryGroupsByAdminResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "groups", kind: "message", T: GroupInfo, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGroupsByAdminResponse {
    return new QueryGroupsByAdminResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGroupsByAdminResponse {
    return new QueryGroupsByAdminResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGroupsByAdminResponse {
    return new QueryGroupsByAdminResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGroupsByAdminResponse | PlainMessage<QueryGroupsByAdminResponse> | undefined, b: QueryGroupsByAdminResponse | PlainMessage<QueryGroupsByAdminResponse> | undefined): boolean {
    return proto3.util.equals(QueryGroupsByAdminResponse, a, b);
  }
}

/**
 * QueryGroupPoliciesByGroupRequest is the Query/GroupPoliciesByGroup request type.
 *
 * @generated from message cosmos.group.v1.QueryGroupPoliciesByGroupRequest
 */
export class QueryGroupPoliciesByGroupRequest extends Message<QueryGroupPoliciesByGroupRequest> {
  /**
   * group_id is the unique ID of the group policy's group.
   *
   * @generated from field: uint64 group_id = 1;
   */
  groupId = protoInt64.zero;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryGroupPoliciesByGroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryGroupPoliciesByGroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGroupPoliciesByGroupRequest {
    return new QueryGroupPoliciesByGroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGroupPoliciesByGroupRequest {
    return new QueryGroupPoliciesByGroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGroupPoliciesByGroupRequest {
    return new QueryGroupPoliciesByGroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGroupPoliciesByGroupRequest | PlainMessage<QueryGroupPoliciesByGroupRequest> | undefined, b: QueryGroupPoliciesByGroupRequest | PlainMessage<QueryGroupPoliciesByGroupRequest> | undefined): boolean {
    return proto3.util.equals(QueryGroupPoliciesByGroupRequest, a, b);
  }
}

/**
 * QueryGroupPoliciesByGroupResponse is the Query/GroupPoliciesByGroup response type.
 *
 * @generated from message cosmos.group.v1.QueryGroupPoliciesByGroupResponse
 */
export class QueryGroupPoliciesByGroupResponse extends Message<QueryGroupPoliciesByGroupResponse> {
  /**
   * group_policies are the group policies info associated with the provided group.
   *
   * @generated from field: repeated cosmos.group.v1.GroupPolicyInfo group_policies = 1;
   */
  groupPolicies: GroupPolicyInfo[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryGroupPoliciesByGroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryGroupPoliciesByGroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group_policies", kind: "message", T: GroupPolicyInfo, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGroupPoliciesByGroupResponse {
    return new QueryGroupPoliciesByGroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGroupPoliciesByGroupResponse {
    return new QueryGroupPoliciesByGroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGroupPoliciesByGroupResponse {
    return new QueryGroupPoliciesByGroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGroupPoliciesByGroupResponse | PlainMessage<QueryGroupPoliciesByGroupResponse> | undefined, b: QueryGroupPoliciesByGroupResponse | PlainMessage<QueryGroupPoliciesByGroupResponse> | undefined): boolean {
    return proto3.util.equals(QueryGroupPoliciesByGroupResponse, a, b);
  }
}

/**
 * QueryGroupPoliciesByAdminRequest is the Query/GroupPoliciesByAdmin request type.
 *
 * @generated from message cosmos.group.v1.QueryGroupPoliciesByAdminRequest
 */
export class QueryGroupPoliciesByAdminRequest extends Message<QueryGroupPoliciesByAdminRequest> {
  /**
   * admin is the admin address of the group policy.
   *
   * @generated from field: string admin = 1;
   */
  admin = "";

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryGroupPoliciesByAdminRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryGroupPoliciesByAdminRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGroupPoliciesByAdminRequest {
    return new QueryGroupPoliciesByAdminRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGroupPoliciesByAdminRequest {
    return new QueryGroupPoliciesByAdminRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGroupPoliciesByAdminRequest {
    return new QueryGroupPoliciesByAdminRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGroupPoliciesByAdminRequest | PlainMessage<QueryGroupPoliciesByAdminRequest> | undefined, b: QueryGroupPoliciesByAdminRequest | PlainMessage<QueryGroupPoliciesByAdminRequest> | undefined): boolean {
    return proto3.util.equals(QueryGroupPoliciesByAdminRequest, a, b);
  }
}

/**
 * QueryGroupPoliciesByAdminResponse is the Query/GroupPoliciesByAdmin response type.
 *
 * @generated from message cosmos.group.v1.QueryGroupPoliciesByAdminResponse
 */
export class QueryGroupPoliciesByAdminResponse extends Message<QueryGroupPoliciesByAdminResponse> {
  /**
   * group_policies are the group policies info with provided admin.
   *
   * @generated from field: repeated cosmos.group.v1.GroupPolicyInfo group_policies = 1;
   */
  groupPolicies: GroupPolicyInfo[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryGroupPoliciesByAdminResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryGroupPoliciesByAdminResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group_policies", kind: "message", T: GroupPolicyInfo, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGroupPoliciesByAdminResponse {
    return new QueryGroupPoliciesByAdminResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGroupPoliciesByAdminResponse {
    return new QueryGroupPoliciesByAdminResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGroupPoliciesByAdminResponse {
    return new QueryGroupPoliciesByAdminResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGroupPoliciesByAdminResponse | PlainMessage<QueryGroupPoliciesByAdminResponse> | undefined, b: QueryGroupPoliciesByAdminResponse | PlainMessage<QueryGroupPoliciesByAdminResponse> | undefined): boolean {
    return proto3.util.equals(QueryGroupPoliciesByAdminResponse, a, b);
  }
}

/**
 * QueryProposalRequest is the Query/Proposal request type.
 *
 * @generated from message cosmos.group.v1.QueryProposalRequest
 */
export class QueryProposalRequest extends Message<QueryProposalRequest> {
  /**
   * proposal_id is the unique ID of a proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryProposalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryProposalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryProposalRequest {
    return new QueryProposalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryProposalRequest {
    return new QueryProposalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryProposalRequest {
    return new QueryProposalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryProposalRequest | PlainMessage<QueryProposalRequest> | undefined, b: QueryProposalRequest | PlainMessage<QueryProposalRequest> | undefined): boolean {
    return proto3.util.equals(QueryProposalRequest, a, b);
  }
}

/**
 * QueryProposalResponse is the Query/Proposal response type.
 *
 * @generated from message cosmos.group.v1.QueryProposalResponse
 */
export class QueryProposalResponse extends Message<QueryProposalResponse> {
  /**
   * proposal is the proposal info.
   *
   * @generated from field: cosmos.group.v1.Proposal proposal = 1;
   */
  proposal?: Proposal;

  constructor(data?: PartialMessage<QueryProposalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryProposalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal", kind: "message", T: Proposal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryProposalResponse {
    return new QueryProposalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryProposalResponse {
    return new QueryProposalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryProposalResponse {
    return new QueryProposalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryProposalResponse | PlainMessage<QueryProposalResponse> | undefined, b: QueryProposalResponse | PlainMessage<QueryProposalResponse> | undefined): boolean {
    return proto3.util.equals(QueryProposalResponse, a, b);
  }
}

/**
 * QueryProposalsByGroupPolicyRequest is the Query/ProposalByGroupPolicy request type.
 *
 * @generated from message cosmos.group.v1.QueryProposalsByGroupPolicyRequest
 */
export class QueryProposalsByGroupPolicyRequest extends Message<QueryProposalsByGroupPolicyRequest> {
  /**
   * address is the account address of the group policy related to proposals.
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryProposalsByGroupPolicyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryProposalsByGroupPolicyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryProposalsByGroupPolicyRequest {
    return new QueryProposalsByGroupPolicyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryProposalsByGroupPolicyRequest {
    return new QueryProposalsByGroupPolicyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryProposalsByGroupPolicyRequest {
    return new QueryProposalsByGroupPolicyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryProposalsByGroupPolicyRequest | PlainMessage<QueryProposalsByGroupPolicyRequest> | undefined, b: QueryProposalsByGroupPolicyRequest | PlainMessage<QueryProposalsByGroupPolicyRequest> | undefined): boolean {
    return proto3.util.equals(QueryProposalsByGroupPolicyRequest, a, b);
  }
}

/**
 * QueryProposalsByGroupPolicyResponse is the Query/ProposalByGroupPolicy response type.
 *
 * @generated from message cosmos.group.v1.QueryProposalsByGroupPolicyResponse
 */
export class QueryProposalsByGroupPolicyResponse extends Message<QueryProposalsByGroupPolicyResponse> {
  /**
   * proposals are the proposals with given group policy.
   *
   * @generated from field: repeated cosmos.group.v1.Proposal proposals = 1;
   */
  proposals: Proposal[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryProposalsByGroupPolicyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryProposalsByGroupPolicyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposals", kind: "message", T: Proposal, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryProposalsByGroupPolicyResponse {
    return new QueryProposalsByGroupPolicyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryProposalsByGroupPolicyResponse {
    return new QueryProposalsByGroupPolicyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryProposalsByGroupPolicyResponse {
    return new QueryProposalsByGroupPolicyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryProposalsByGroupPolicyResponse | PlainMessage<QueryProposalsByGroupPolicyResponse> | undefined, b: QueryProposalsByGroupPolicyResponse | PlainMessage<QueryProposalsByGroupPolicyResponse> | undefined): boolean {
    return proto3.util.equals(QueryProposalsByGroupPolicyResponse, a, b);
  }
}

/**
 * QueryVoteByProposalVoterRequest is the Query/VoteByProposalVoter request type.
 *
 * @generated from message cosmos.group.v1.QueryVoteByProposalVoterRequest
 */
export class QueryVoteByProposalVoterRequest extends Message<QueryVoteByProposalVoterRequest> {
  /**
   * proposal_id is the unique ID of a proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId = protoInt64.zero;

  /**
   * voter is a proposal voter account address.
   *
   * @generated from field: string voter = 2;
   */
  voter = "";

  constructor(data?: PartialMessage<QueryVoteByProposalVoterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryVoteByProposalVoterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "voter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVoteByProposalVoterRequest {
    return new QueryVoteByProposalVoterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVoteByProposalVoterRequest {
    return new QueryVoteByProposalVoterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVoteByProposalVoterRequest {
    return new QueryVoteByProposalVoterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVoteByProposalVoterRequest | PlainMessage<QueryVoteByProposalVoterRequest> | undefined, b: QueryVoteByProposalVoterRequest | PlainMessage<QueryVoteByProposalVoterRequest> | undefined): boolean {
    return proto3.util.equals(QueryVoteByProposalVoterRequest, a, b);
  }
}

/**
 * QueryVoteByProposalVoterResponse is the Query/VoteByProposalVoter response type.
 *
 * @generated from message cosmos.group.v1.QueryVoteByProposalVoterResponse
 */
export class QueryVoteByProposalVoterResponse extends Message<QueryVoteByProposalVoterResponse> {
  /**
   * vote is the vote with given proposal_id and voter.
   *
   * @generated from field: cosmos.group.v1.Vote vote = 1;
   */
  vote?: Vote;

  constructor(data?: PartialMessage<QueryVoteByProposalVoterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryVoteByProposalVoterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vote", kind: "message", T: Vote },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVoteByProposalVoterResponse {
    return new QueryVoteByProposalVoterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVoteByProposalVoterResponse {
    return new QueryVoteByProposalVoterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVoteByProposalVoterResponse {
    return new QueryVoteByProposalVoterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVoteByProposalVoterResponse | PlainMessage<QueryVoteByProposalVoterResponse> | undefined, b: QueryVoteByProposalVoterResponse | PlainMessage<QueryVoteByProposalVoterResponse> | undefined): boolean {
    return proto3.util.equals(QueryVoteByProposalVoterResponse, a, b);
  }
}

/**
 * QueryVotesByProposalRequest is the Query/VotesByProposal request type.
 *
 * @generated from message cosmos.group.v1.QueryVotesByProposalRequest
 */
export class QueryVotesByProposalRequest extends Message<QueryVotesByProposalRequest> {
  /**
   * proposal_id is the unique ID of a proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId = protoInt64.zero;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryVotesByProposalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryVotesByProposalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVotesByProposalRequest {
    return new QueryVotesByProposalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVotesByProposalRequest {
    return new QueryVotesByProposalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVotesByProposalRequest {
    return new QueryVotesByProposalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVotesByProposalRequest | PlainMessage<QueryVotesByProposalRequest> | undefined, b: QueryVotesByProposalRequest | PlainMessage<QueryVotesByProposalRequest> | undefined): boolean {
    return proto3.util.equals(QueryVotesByProposalRequest, a, b);
  }
}

/**
 * QueryVotesByProposalResponse is the Query/VotesByProposal response type.
 *
 * @generated from message cosmos.group.v1.QueryVotesByProposalResponse
 */
export class QueryVotesByProposalResponse extends Message<QueryVotesByProposalResponse> {
  /**
   * votes are the list of votes for given proposal_id.
   *
   * @generated from field: repeated cosmos.group.v1.Vote votes = 1;
   */
  votes: Vote[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryVotesByProposalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryVotesByProposalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "votes", kind: "message", T: Vote, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVotesByProposalResponse {
    return new QueryVotesByProposalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVotesByProposalResponse {
    return new QueryVotesByProposalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVotesByProposalResponse {
    return new QueryVotesByProposalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVotesByProposalResponse | PlainMessage<QueryVotesByProposalResponse> | undefined, b: QueryVotesByProposalResponse | PlainMessage<QueryVotesByProposalResponse> | undefined): boolean {
    return proto3.util.equals(QueryVotesByProposalResponse, a, b);
  }
}

/**
 * QueryVotesByVoterRequest is the Query/VotesByVoter request type.
 *
 * @generated from message cosmos.group.v1.QueryVotesByVoterRequest
 */
export class QueryVotesByVoterRequest extends Message<QueryVotesByVoterRequest> {
  /**
   * voter is a proposal voter account address.
   *
   * @generated from field: string voter = 1;
   */
  voter = "";

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryVotesByVoterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryVotesByVoterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "voter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVotesByVoterRequest {
    return new QueryVotesByVoterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVotesByVoterRequest {
    return new QueryVotesByVoterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVotesByVoterRequest {
    return new QueryVotesByVoterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVotesByVoterRequest | PlainMessage<QueryVotesByVoterRequest> | undefined, b: QueryVotesByVoterRequest | PlainMessage<QueryVotesByVoterRequest> | undefined): boolean {
    return proto3.util.equals(QueryVotesByVoterRequest, a, b);
  }
}

/**
 * QueryVotesByVoterResponse is the Query/VotesByVoter response type.
 *
 * @generated from message cosmos.group.v1.QueryVotesByVoterResponse
 */
export class QueryVotesByVoterResponse extends Message<QueryVotesByVoterResponse> {
  /**
   * votes are the list of votes by given voter.
   *
   * @generated from field: repeated cosmos.group.v1.Vote votes = 1;
   */
  votes: Vote[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryVotesByVoterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryVotesByVoterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "votes", kind: "message", T: Vote, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVotesByVoterResponse {
    return new QueryVotesByVoterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVotesByVoterResponse {
    return new QueryVotesByVoterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVotesByVoterResponse {
    return new QueryVotesByVoterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVotesByVoterResponse | PlainMessage<QueryVotesByVoterResponse> | undefined, b: QueryVotesByVoterResponse | PlainMessage<QueryVotesByVoterResponse> | undefined): boolean {
    return proto3.util.equals(QueryVotesByVoterResponse, a, b);
  }
}

/**
 * QueryGroupsByMemberRequest is the Query/GroupsByMember request type.
 *
 * @generated from message cosmos.group.v1.QueryGroupsByMemberRequest
 */
export class QueryGroupsByMemberRequest extends Message<QueryGroupsByMemberRequest> {
  /**
   * address is the group member address.
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryGroupsByMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryGroupsByMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGroupsByMemberRequest {
    return new QueryGroupsByMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGroupsByMemberRequest {
    return new QueryGroupsByMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGroupsByMemberRequest {
    return new QueryGroupsByMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGroupsByMemberRequest | PlainMessage<QueryGroupsByMemberRequest> | undefined, b: QueryGroupsByMemberRequest | PlainMessage<QueryGroupsByMemberRequest> | undefined): boolean {
    return proto3.util.equals(QueryGroupsByMemberRequest, a, b);
  }
}

/**
 * QueryGroupsByMemberResponse is the Query/GroupsByMember response type.
 *
 * @generated from message cosmos.group.v1.QueryGroupsByMemberResponse
 */
export class QueryGroupsByMemberResponse extends Message<QueryGroupsByMemberResponse> {
  /**
   * groups are the groups info with the provided group member.
   *
   * @generated from field: repeated cosmos.group.v1.GroupInfo groups = 1;
   */
  groups: GroupInfo[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryGroupsByMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryGroupsByMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "groups", kind: "message", T: GroupInfo, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGroupsByMemberResponse {
    return new QueryGroupsByMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGroupsByMemberResponse {
    return new QueryGroupsByMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGroupsByMemberResponse {
    return new QueryGroupsByMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGroupsByMemberResponse | PlainMessage<QueryGroupsByMemberResponse> | undefined, b: QueryGroupsByMemberResponse | PlainMessage<QueryGroupsByMemberResponse> | undefined): boolean {
    return proto3.util.equals(QueryGroupsByMemberResponse, a, b);
  }
}

/**
 * QueryTallyResultRequest is the Query/TallyResult request type.
 *
 * @generated from message cosmos.group.v1.QueryTallyResultRequest
 */
export class QueryTallyResultRequest extends Message<QueryTallyResultRequest> {
  /**
   * proposal_id is the unique id of a proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryTallyResultRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryTallyResultRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTallyResultRequest {
    return new QueryTallyResultRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTallyResultRequest {
    return new QueryTallyResultRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTallyResultRequest {
    return new QueryTallyResultRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTallyResultRequest | PlainMessage<QueryTallyResultRequest> | undefined, b: QueryTallyResultRequest | PlainMessage<QueryTallyResultRequest> | undefined): boolean {
    return proto3.util.equals(QueryTallyResultRequest, a, b);
  }
}

/**
 * QueryTallyResultResponse is the Query/TallyResult response type.
 *
 * @generated from message cosmos.group.v1.QueryTallyResultResponse
 */
export class QueryTallyResultResponse extends Message<QueryTallyResultResponse> {
  /**
   * tally defines the requested tally.
   *
   * @generated from field: cosmos.group.v1.TallyResult tally = 1;
   */
  tally?: TallyResult;

  constructor(data?: PartialMessage<QueryTallyResultResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.QueryTallyResultResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tally", kind: "message", T: TallyResult },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTallyResultResponse {
    return new QueryTallyResultResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTallyResultResponse {
    return new QueryTallyResultResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTallyResultResponse {
    return new QueryTallyResultResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTallyResultResponse | PlainMessage<QueryTallyResultResponse> | undefined, b: QueryTallyResultResponse | PlainMessage<QueryTallyResultResponse> | undefined): boolean {
    return proto3.util.equals(QueryTallyResultResponse, a, b);
  }
}

