// Since: cosmos-sdk 0.46

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file cosmos/group/v1/tx.proto (package cosmos.group.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { MemberRequest, ProposalExecutorResult, VoteOption } from "./types_pb.js";

/**
 * Exec defines modes of execution of a proposal on creation or on new vote.
 *
 * @generated from enum cosmos.group.v1.Exec
 */
export enum Exec {
  /**
   * An empty value means that there should be a separate
   * MsgExec request for the proposal to execute.
   *
   * @generated from enum value: EXEC_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Try to execute the proposal immediately.
   * If the proposal is not allowed per the DecisionPolicy,
   * the proposal will still be open and could
   * be executed at a later point.
   *
   * @generated from enum value: EXEC_TRY = 1;
   */
  TRY = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Exec)
proto3.util.setEnumType(Exec, "cosmos.group.v1.Exec", [
  { no: 0, name: "EXEC_UNSPECIFIED" },
  { no: 1, name: "EXEC_TRY" },
]);

/**
 * MsgCreateGroup is the Msg/CreateGroup request type.
 *
 * @generated from message cosmos.group.v1.MsgCreateGroup
 */
export class MsgCreateGroup extends Message<MsgCreateGroup> {
  /**
   * admin is the account address of the group admin.
   *
   * @generated from field: string admin = 1;
   */
  admin = "";

  /**
   * members defines the group members.
   *
   * @generated from field: repeated cosmos.group.v1.MemberRequest members = 2;
   */
  members: MemberRequest[] = [];

  /**
   * metadata is any arbitrary metadata to attached to the group.
   *
   * @generated from field: string metadata = 3;
   */
  metadata = "";

  constructor(data?: PartialMessage<MsgCreateGroup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgCreateGroup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "members", kind: "message", T: MemberRequest, repeated: true },
    { no: 3, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateGroup {
    return new MsgCreateGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateGroup {
    return new MsgCreateGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateGroup {
    return new MsgCreateGroup().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateGroup | PlainMessage<MsgCreateGroup> | undefined, b: MsgCreateGroup | PlainMessage<MsgCreateGroup> | undefined): boolean {
    return proto3.util.equals(MsgCreateGroup, a, b);
  }
}

/**
 * MsgCreateGroupResponse is the Msg/CreateGroup response type.
 *
 * @generated from message cosmos.group.v1.MsgCreateGroupResponse
 */
export class MsgCreateGroupResponse extends Message<MsgCreateGroupResponse> {
  /**
   * group_id is the unique ID of the newly created group.
   *
   * @generated from field: uint64 group_id = 1;
   */
  groupId = protoInt64.zero;

  constructor(data?: PartialMessage<MsgCreateGroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgCreateGroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateGroupResponse {
    return new MsgCreateGroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateGroupResponse {
    return new MsgCreateGroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateGroupResponse {
    return new MsgCreateGroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateGroupResponse | PlainMessage<MsgCreateGroupResponse> | undefined, b: MsgCreateGroupResponse | PlainMessage<MsgCreateGroupResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreateGroupResponse, a, b);
  }
}

/**
 * MsgUpdateGroupMembers is the Msg/UpdateGroupMembers request type.
 *
 * @generated from message cosmos.group.v1.MsgUpdateGroupMembers
 */
export class MsgUpdateGroupMembers extends Message<MsgUpdateGroupMembers> {
  /**
   * admin is the account address of the group admin.
   *
   * @generated from field: string admin = 1;
   */
  admin = "";

  /**
   * group_id is the unique ID of the group.
   *
   * @generated from field: uint64 group_id = 2;
   */
  groupId = protoInt64.zero;

  /**
   * member_updates is the list of members to update,
   * set weight to 0 to remove a member.
   *
   * @generated from field: repeated cosmos.group.v1.MemberRequest member_updates = 3;
   */
  memberUpdates: MemberRequest[] = [];

  constructor(data?: PartialMessage<MsgUpdateGroupMembers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgUpdateGroupMembers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "member_updates", kind: "message", T: MemberRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateGroupMembers {
    return new MsgUpdateGroupMembers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateGroupMembers {
    return new MsgUpdateGroupMembers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateGroupMembers {
    return new MsgUpdateGroupMembers().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateGroupMembers | PlainMessage<MsgUpdateGroupMembers> | undefined, b: MsgUpdateGroupMembers | PlainMessage<MsgUpdateGroupMembers> | undefined): boolean {
    return proto3.util.equals(MsgUpdateGroupMembers, a, b);
  }
}

/**
 * MsgUpdateGroupMembersResponse is the Msg/UpdateGroupMembers response type.
 *
 * @generated from message cosmos.group.v1.MsgUpdateGroupMembersResponse
 */
export class MsgUpdateGroupMembersResponse extends Message<MsgUpdateGroupMembersResponse> {
  constructor(data?: PartialMessage<MsgUpdateGroupMembersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgUpdateGroupMembersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateGroupMembersResponse {
    return new MsgUpdateGroupMembersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateGroupMembersResponse {
    return new MsgUpdateGroupMembersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateGroupMembersResponse {
    return new MsgUpdateGroupMembersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateGroupMembersResponse | PlainMessage<MsgUpdateGroupMembersResponse> | undefined, b: MsgUpdateGroupMembersResponse | PlainMessage<MsgUpdateGroupMembersResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateGroupMembersResponse, a, b);
  }
}

/**
 * MsgUpdateGroupAdmin is the Msg/UpdateGroupAdmin request type.
 *
 * @generated from message cosmos.group.v1.MsgUpdateGroupAdmin
 */
export class MsgUpdateGroupAdmin extends Message<MsgUpdateGroupAdmin> {
  /**
   * admin is the current account address of the group admin.
   *
   * @generated from field: string admin = 1;
   */
  admin = "";

  /**
   * group_id is the unique ID of the group.
   *
   * @generated from field: uint64 group_id = 2;
   */
  groupId = protoInt64.zero;

  /**
   * new_admin is the group new admin account address.
   *
   * @generated from field: string new_admin = 3;
   */
  newAdmin = "";

  constructor(data?: PartialMessage<MsgUpdateGroupAdmin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgUpdateGroupAdmin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "new_admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateGroupAdmin {
    return new MsgUpdateGroupAdmin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateGroupAdmin {
    return new MsgUpdateGroupAdmin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateGroupAdmin {
    return new MsgUpdateGroupAdmin().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateGroupAdmin | PlainMessage<MsgUpdateGroupAdmin> | undefined, b: MsgUpdateGroupAdmin | PlainMessage<MsgUpdateGroupAdmin> | undefined): boolean {
    return proto3.util.equals(MsgUpdateGroupAdmin, a, b);
  }
}

/**
 * MsgUpdateGroupAdminResponse is the Msg/UpdateGroupAdmin response type.
 *
 * @generated from message cosmos.group.v1.MsgUpdateGroupAdminResponse
 */
export class MsgUpdateGroupAdminResponse extends Message<MsgUpdateGroupAdminResponse> {
  constructor(data?: PartialMessage<MsgUpdateGroupAdminResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgUpdateGroupAdminResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateGroupAdminResponse {
    return new MsgUpdateGroupAdminResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateGroupAdminResponse {
    return new MsgUpdateGroupAdminResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateGroupAdminResponse {
    return new MsgUpdateGroupAdminResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateGroupAdminResponse | PlainMessage<MsgUpdateGroupAdminResponse> | undefined, b: MsgUpdateGroupAdminResponse | PlainMessage<MsgUpdateGroupAdminResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateGroupAdminResponse, a, b);
  }
}

/**
 * MsgUpdateGroupMetadata is the Msg/UpdateGroupMetadata request type.
 *
 * @generated from message cosmos.group.v1.MsgUpdateGroupMetadata
 */
export class MsgUpdateGroupMetadata extends Message<MsgUpdateGroupMetadata> {
  /**
   * admin is the account address of the group admin.
   *
   * @generated from field: string admin = 1;
   */
  admin = "";

  /**
   * group_id is the unique ID of the group.
   *
   * @generated from field: uint64 group_id = 2;
   */
  groupId = protoInt64.zero;

  /**
   * metadata is the updated group's metadata.
   *
   * @generated from field: string metadata = 3;
   */
  metadata = "";

  constructor(data?: PartialMessage<MsgUpdateGroupMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgUpdateGroupMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateGroupMetadata {
    return new MsgUpdateGroupMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateGroupMetadata {
    return new MsgUpdateGroupMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateGroupMetadata {
    return new MsgUpdateGroupMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateGroupMetadata | PlainMessage<MsgUpdateGroupMetadata> | undefined, b: MsgUpdateGroupMetadata | PlainMessage<MsgUpdateGroupMetadata> | undefined): boolean {
    return proto3.util.equals(MsgUpdateGroupMetadata, a, b);
  }
}

/**
 * MsgUpdateGroupMetadataResponse is the Msg/UpdateGroupMetadata response type.
 *
 * @generated from message cosmos.group.v1.MsgUpdateGroupMetadataResponse
 */
export class MsgUpdateGroupMetadataResponse extends Message<MsgUpdateGroupMetadataResponse> {
  constructor(data?: PartialMessage<MsgUpdateGroupMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgUpdateGroupMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateGroupMetadataResponse {
    return new MsgUpdateGroupMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateGroupMetadataResponse {
    return new MsgUpdateGroupMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateGroupMetadataResponse {
    return new MsgUpdateGroupMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateGroupMetadataResponse | PlainMessage<MsgUpdateGroupMetadataResponse> | undefined, b: MsgUpdateGroupMetadataResponse | PlainMessage<MsgUpdateGroupMetadataResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateGroupMetadataResponse, a, b);
  }
}

/**
 * MsgCreateGroupPolicy is the Msg/CreateGroupPolicy request type.
 *
 * @generated from message cosmos.group.v1.MsgCreateGroupPolicy
 */
export class MsgCreateGroupPolicy extends Message<MsgCreateGroupPolicy> {
  /**
   * admin is the account address of the group admin.
   *
   * @generated from field: string admin = 1;
   */
  admin = "";

  /**
   * group_id is the unique ID of the group.
   *
   * @generated from field: uint64 group_id = 2;
   */
  groupId = protoInt64.zero;

  /**
   * metadata is any arbitrary metadata attached to the group policy.
   *
   * @generated from field: string metadata = 3;
   */
  metadata = "";

  /**
   * decision_policy specifies the group policy's decision policy.
   *
   * @generated from field: google.protobuf.Any decision_policy = 4;
   */
  decisionPolicy?: Any;

  constructor(data?: PartialMessage<MsgCreateGroupPolicy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgCreateGroupPolicy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "decision_policy", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateGroupPolicy {
    return new MsgCreateGroupPolicy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateGroupPolicy {
    return new MsgCreateGroupPolicy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateGroupPolicy {
    return new MsgCreateGroupPolicy().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateGroupPolicy | PlainMessage<MsgCreateGroupPolicy> | undefined, b: MsgCreateGroupPolicy | PlainMessage<MsgCreateGroupPolicy> | undefined): boolean {
    return proto3.util.equals(MsgCreateGroupPolicy, a, b);
  }
}

/**
 * MsgCreateGroupPolicyResponse is the Msg/CreateGroupPolicy response type.
 *
 * @generated from message cosmos.group.v1.MsgCreateGroupPolicyResponse
 */
export class MsgCreateGroupPolicyResponse extends Message<MsgCreateGroupPolicyResponse> {
  /**
   * address is the account address of the newly created group policy.
   *
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<MsgCreateGroupPolicyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgCreateGroupPolicyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateGroupPolicyResponse {
    return new MsgCreateGroupPolicyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateGroupPolicyResponse {
    return new MsgCreateGroupPolicyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateGroupPolicyResponse {
    return new MsgCreateGroupPolicyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateGroupPolicyResponse | PlainMessage<MsgCreateGroupPolicyResponse> | undefined, b: MsgCreateGroupPolicyResponse | PlainMessage<MsgCreateGroupPolicyResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreateGroupPolicyResponse, a, b);
  }
}

/**
 * MsgUpdateGroupPolicyAdmin is the Msg/UpdateGroupPolicyAdmin request type.
 *
 * @generated from message cosmos.group.v1.MsgUpdateGroupPolicyAdmin
 */
export class MsgUpdateGroupPolicyAdmin extends Message<MsgUpdateGroupPolicyAdmin> {
  /**
   * admin is the account address of the group admin.
   *
   * @generated from field: string admin = 1;
   */
  admin = "";

  /**
   * group_policy_address is the account address of the group policy.
   *
   * @generated from field: string group_policy_address = 2;
   */
  groupPolicyAddress = "";

  /**
   * new_admin is the new group policy admin.
   *
   * @generated from field: string new_admin = 3;
   */
  newAdmin = "";

  constructor(data?: PartialMessage<MsgUpdateGroupPolicyAdmin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgUpdateGroupPolicyAdmin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "group_policy_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateGroupPolicyAdmin {
    return new MsgUpdateGroupPolicyAdmin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateGroupPolicyAdmin {
    return new MsgUpdateGroupPolicyAdmin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateGroupPolicyAdmin {
    return new MsgUpdateGroupPolicyAdmin().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateGroupPolicyAdmin | PlainMessage<MsgUpdateGroupPolicyAdmin> | undefined, b: MsgUpdateGroupPolicyAdmin | PlainMessage<MsgUpdateGroupPolicyAdmin> | undefined): boolean {
    return proto3.util.equals(MsgUpdateGroupPolicyAdmin, a, b);
  }
}

/**
 * MsgUpdateGroupPolicyAdminResponse is the Msg/UpdateGroupPolicyAdmin response type.
 *
 * @generated from message cosmos.group.v1.MsgUpdateGroupPolicyAdminResponse
 */
export class MsgUpdateGroupPolicyAdminResponse extends Message<MsgUpdateGroupPolicyAdminResponse> {
  constructor(data?: PartialMessage<MsgUpdateGroupPolicyAdminResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgUpdateGroupPolicyAdminResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateGroupPolicyAdminResponse {
    return new MsgUpdateGroupPolicyAdminResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateGroupPolicyAdminResponse {
    return new MsgUpdateGroupPolicyAdminResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateGroupPolicyAdminResponse {
    return new MsgUpdateGroupPolicyAdminResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateGroupPolicyAdminResponse | PlainMessage<MsgUpdateGroupPolicyAdminResponse> | undefined, b: MsgUpdateGroupPolicyAdminResponse | PlainMessage<MsgUpdateGroupPolicyAdminResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateGroupPolicyAdminResponse, a, b);
  }
}

/**
 * MsgCreateGroupWithPolicy is the Msg/CreateGroupWithPolicy request type.
 *
 * @generated from message cosmos.group.v1.MsgCreateGroupWithPolicy
 */
export class MsgCreateGroupWithPolicy extends Message<MsgCreateGroupWithPolicy> {
  /**
   * admin is the account address of the group and group policy admin.
   *
   * @generated from field: string admin = 1;
   */
  admin = "";

  /**
   * members defines the group members.
   *
   * @generated from field: repeated cosmos.group.v1.MemberRequest members = 2;
   */
  members: MemberRequest[] = [];

  /**
   * group_metadata is any arbitrary metadata attached to the group.
   *
   * @generated from field: string group_metadata = 3;
   */
  groupMetadata = "";

  /**
   * group_policy_metadata is any arbitrary metadata attached to the group policy.
   *
   * @generated from field: string group_policy_metadata = 4;
   */
  groupPolicyMetadata = "";

  /**
   * group_policy_as_admin is a boolean field, if set to true, the group policy account address will be used as group
   * and group policy admin.
   *
   * @generated from field: bool group_policy_as_admin = 5;
   */
  groupPolicyAsAdmin = false;

  /**
   * decision_policy specifies the group policy's decision policy.
   *
   * @generated from field: google.protobuf.Any decision_policy = 6;
   */
  decisionPolicy?: Any;

  constructor(data?: PartialMessage<MsgCreateGroupWithPolicy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgCreateGroupWithPolicy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "members", kind: "message", T: MemberRequest, repeated: true },
    { no: 3, name: "group_metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "group_policy_metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "group_policy_as_admin", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "decision_policy", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateGroupWithPolicy {
    return new MsgCreateGroupWithPolicy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateGroupWithPolicy {
    return new MsgCreateGroupWithPolicy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateGroupWithPolicy {
    return new MsgCreateGroupWithPolicy().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateGroupWithPolicy | PlainMessage<MsgCreateGroupWithPolicy> | undefined, b: MsgCreateGroupWithPolicy | PlainMessage<MsgCreateGroupWithPolicy> | undefined): boolean {
    return proto3.util.equals(MsgCreateGroupWithPolicy, a, b);
  }
}

/**
 * MsgCreateGroupWithPolicyResponse is the Msg/CreateGroupWithPolicy response type.
 *
 * @generated from message cosmos.group.v1.MsgCreateGroupWithPolicyResponse
 */
export class MsgCreateGroupWithPolicyResponse extends Message<MsgCreateGroupWithPolicyResponse> {
  /**
   * group_id is the unique ID of the newly created group with policy.
   *
   * @generated from field: uint64 group_id = 1;
   */
  groupId = protoInt64.zero;

  /**
   * group_policy_address is the account address of the newly created group policy.
   *
   * @generated from field: string group_policy_address = 2;
   */
  groupPolicyAddress = "";

  constructor(data?: PartialMessage<MsgCreateGroupWithPolicyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgCreateGroupWithPolicyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "group_policy_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateGroupWithPolicyResponse {
    return new MsgCreateGroupWithPolicyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateGroupWithPolicyResponse {
    return new MsgCreateGroupWithPolicyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateGroupWithPolicyResponse {
    return new MsgCreateGroupWithPolicyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateGroupWithPolicyResponse | PlainMessage<MsgCreateGroupWithPolicyResponse> | undefined, b: MsgCreateGroupWithPolicyResponse | PlainMessage<MsgCreateGroupWithPolicyResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreateGroupWithPolicyResponse, a, b);
  }
}

/**
 * MsgUpdateGroupPolicyDecisionPolicy is the Msg/UpdateGroupPolicyDecisionPolicy request type.
 *
 * @generated from message cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy
 */
export class MsgUpdateGroupPolicyDecisionPolicy extends Message<MsgUpdateGroupPolicyDecisionPolicy> {
  /**
   * admin is the account address of the group admin.
   *
   * @generated from field: string admin = 1;
   */
  admin = "";

  /**
   * group_policy_address is the account address of group policy.
   *
   * @generated from field: string group_policy_address = 2;
   */
  groupPolicyAddress = "";

  /**
   * decision_policy is the updated group policy's decision policy.
   *
   * @generated from field: google.protobuf.Any decision_policy = 3;
   */
  decisionPolicy?: Any;

  constructor(data?: PartialMessage<MsgUpdateGroupPolicyDecisionPolicy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "group_policy_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "decision_policy", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateGroupPolicyDecisionPolicy {
    return new MsgUpdateGroupPolicyDecisionPolicy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateGroupPolicyDecisionPolicy {
    return new MsgUpdateGroupPolicyDecisionPolicy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateGroupPolicyDecisionPolicy {
    return new MsgUpdateGroupPolicyDecisionPolicy().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateGroupPolicyDecisionPolicy | PlainMessage<MsgUpdateGroupPolicyDecisionPolicy> | undefined, b: MsgUpdateGroupPolicyDecisionPolicy | PlainMessage<MsgUpdateGroupPolicyDecisionPolicy> | undefined): boolean {
    return proto3.util.equals(MsgUpdateGroupPolicyDecisionPolicy, a, b);
  }
}

/**
 * MsgUpdateGroupPolicyDecisionPolicyResponse is the Msg/UpdateGroupPolicyDecisionPolicy response type.
 *
 * @generated from message cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicyResponse
 */
export class MsgUpdateGroupPolicyDecisionPolicyResponse extends Message<MsgUpdateGroupPolicyDecisionPolicyResponse> {
  constructor(data?: PartialMessage<MsgUpdateGroupPolicyDecisionPolicyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateGroupPolicyDecisionPolicyResponse {
    return new MsgUpdateGroupPolicyDecisionPolicyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateGroupPolicyDecisionPolicyResponse {
    return new MsgUpdateGroupPolicyDecisionPolicyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateGroupPolicyDecisionPolicyResponse {
    return new MsgUpdateGroupPolicyDecisionPolicyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateGroupPolicyDecisionPolicyResponse | PlainMessage<MsgUpdateGroupPolicyDecisionPolicyResponse> | undefined, b: MsgUpdateGroupPolicyDecisionPolicyResponse | PlainMessage<MsgUpdateGroupPolicyDecisionPolicyResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateGroupPolicyDecisionPolicyResponse, a, b);
  }
}

/**
 * MsgUpdateGroupPolicyMetadata is the Msg/UpdateGroupPolicyMetadata request type.
 *
 * @generated from message cosmos.group.v1.MsgUpdateGroupPolicyMetadata
 */
export class MsgUpdateGroupPolicyMetadata extends Message<MsgUpdateGroupPolicyMetadata> {
  /**
   * admin is the account address of the group admin.
   *
   * @generated from field: string admin = 1;
   */
  admin = "";

  /**
   * group_policy_address is the account address of group policy.
   *
   * @generated from field: string group_policy_address = 2;
   */
  groupPolicyAddress = "";

  /**
   * metadata is the group policy metadata to be updated.
   *
   * @generated from field: string metadata = 3;
   */
  metadata = "";

  constructor(data?: PartialMessage<MsgUpdateGroupPolicyMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgUpdateGroupPolicyMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "group_policy_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateGroupPolicyMetadata {
    return new MsgUpdateGroupPolicyMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateGroupPolicyMetadata {
    return new MsgUpdateGroupPolicyMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateGroupPolicyMetadata {
    return new MsgUpdateGroupPolicyMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateGroupPolicyMetadata | PlainMessage<MsgUpdateGroupPolicyMetadata> | undefined, b: MsgUpdateGroupPolicyMetadata | PlainMessage<MsgUpdateGroupPolicyMetadata> | undefined): boolean {
    return proto3.util.equals(MsgUpdateGroupPolicyMetadata, a, b);
  }
}

/**
 * MsgUpdateGroupPolicyMetadataResponse is the Msg/UpdateGroupPolicyMetadata response type.
 *
 * @generated from message cosmos.group.v1.MsgUpdateGroupPolicyMetadataResponse
 */
export class MsgUpdateGroupPolicyMetadataResponse extends Message<MsgUpdateGroupPolicyMetadataResponse> {
  constructor(data?: PartialMessage<MsgUpdateGroupPolicyMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgUpdateGroupPolicyMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateGroupPolicyMetadataResponse {
    return new MsgUpdateGroupPolicyMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateGroupPolicyMetadataResponse {
    return new MsgUpdateGroupPolicyMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateGroupPolicyMetadataResponse {
    return new MsgUpdateGroupPolicyMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateGroupPolicyMetadataResponse | PlainMessage<MsgUpdateGroupPolicyMetadataResponse> | undefined, b: MsgUpdateGroupPolicyMetadataResponse | PlainMessage<MsgUpdateGroupPolicyMetadataResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateGroupPolicyMetadataResponse, a, b);
  }
}

/**
 * MsgSubmitProposal is the Msg/SubmitProposal request type.
 *
 * @generated from message cosmos.group.v1.MsgSubmitProposal
 */
export class MsgSubmitProposal extends Message<MsgSubmitProposal> {
  /**
   * group_policy_address is the account address of group policy.
   *
   * @generated from field: string group_policy_address = 1;
   */
  groupPolicyAddress = "";

  /**
   * proposers are the account addresses of the proposers.
   * Proposers signatures will be counted as yes votes.
   *
   * @generated from field: repeated string proposers = 2;
   */
  proposers: string[] = [];

  /**
   * metadata is any arbitrary metadata attached to the proposal.
   *
   * @generated from field: string metadata = 3;
   */
  metadata = "";

  /**
   * messages is a list of `sdk.Msg`s that will be executed if the proposal passes.
   *
   * @generated from field: repeated google.protobuf.Any messages = 4;
   */
  messages: Any[] = [];

  /**
   * exec defines the mode of execution of the proposal,
   * whether it should be executed immediately on creation or not.
   * If so, proposers signatures are considered as Yes votes.
   *
   * @generated from field: cosmos.group.v1.Exec exec = 5;
   */
  exec = Exec.UNSPECIFIED;

  /**
   * title is the title of the proposal.
   *
   * Since: cosmos-sdk 0.47
   *
   * @generated from field: string title = 6;
   */
  title = "";

  /**
   * summary is the summary of the proposal.
   *
   * Since: cosmos-sdk 0.47
   *
   * @generated from field: string summary = 7;
   */
  summary = "";

  constructor(data?: PartialMessage<MsgSubmitProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgSubmitProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group_policy_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "proposers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "messages", kind: "message", T: Any, repeated: true },
    { no: 5, name: "exec", kind: "enum", T: proto3.getEnumType(Exec) },
    { no: 6, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "summary", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSubmitProposal {
    return new MsgSubmitProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSubmitProposal {
    return new MsgSubmitProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSubmitProposal {
    return new MsgSubmitProposal().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSubmitProposal | PlainMessage<MsgSubmitProposal> | undefined, b: MsgSubmitProposal | PlainMessage<MsgSubmitProposal> | undefined): boolean {
    return proto3.util.equals(MsgSubmitProposal, a, b);
  }
}

/**
 * MsgSubmitProposalResponse is the Msg/SubmitProposal response type.
 *
 * @generated from message cosmos.group.v1.MsgSubmitProposalResponse
 */
export class MsgSubmitProposalResponse extends Message<MsgSubmitProposalResponse> {
  /**
   * proposal is the unique ID of the proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId = protoInt64.zero;

  constructor(data?: PartialMessage<MsgSubmitProposalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgSubmitProposalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSubmitProposalResponse {
    return new MsgSubmitProposalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSubmitProposalResponse {
    return new MsgSubmitProposalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSubmitProposalResponse {
    return new MsgSubmitProposalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSubmitProposalResponse | PlainMessage<MsgSubmitProposalResponse> | undefined, b: MsgSubmitProposalResponse | PlainMessage<MsgSubmitProposalResponse> | undefined): boolean {
    return proto3.util.equals(MsgSubmitProposalResponse, a, b);
  }
}

/**
 * MsgWithdrawProposal is the Msg/WithdrawProposal request type.
 *
 * @generated from message cosmos.group.v1.MsgWithdrawProposal
 */
export class MsgWithdrawProposal extends Message<MsgWithdrawProposal> {
  /**
   * proposal is the unique ID of the proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId = protoInt64.zero;

  /**
   * address is the admin of the group policy or one of the proposer of the proposal.
   *
   * @generated from field: string address = 2;
   */
  address = "";

  constructor(data?: PartialMessage<MsgWithdrawProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgWithdrawProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawProposal {
    return new MsgWithdrawProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawProposal {
    return new MsgWithdrawProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawProposal {
    return new MsgWithdrawProposal().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawProposal | PlainMessage<MsgWithdrawProposal> | undefined, b: MsgWithdrawProposal | PlainMessage<MsgWithdrawProposal> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawProposal, a, b);
  }
}

/**
 * MsgWithdrawProposalResponse is the Msg/WithdrawProposal response type.
 *
 * @generated from message cosmos.group.v1.MsgWithdrawProposalResponse
 */
export class MsgWithdrawProposalResponse extends Message<MsgWithdrawProposalResponse> {
  constructor(data?: PartialMessage<MsgWithdrawProposalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgWithdrawProposalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawProposalResponse {
    return new MsgWithdrawProposalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawProposalResponse {
    return new MsgWithdrawProposalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawProposalResponse {
    return new MsgWithdrawProposalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawProposalResponse | PlainMessage<MsgWithdrawProposalResponse> | undefined, b: MsgWithdrawProposalResponse | PlainMessage<MsgWithdrawProposalResponse> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawProposalResponse, a, b);
  }
}

/**
 * MsgVote is the Msg/Vote request type.
 *
 * @generated from message cosmos.group.v1.MsgVote
 */
export class MsgVote extends Message<MsgVote> {
  /**
   * proposal is the unique ID of the proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId = protoInt64.zero;

  /**
   * voter is the voter account address.
   *
   * @generated from field: string voter = 2;
   */
  voter = "";

  /**
   * option is the voter's choice on the proposal.
   *
   * @generated from field: cosmos.group.v1.VoteOption option = 3;
   */
  option = VoteOption.UNSPECIFIED;

  /**
   * metadata is any arbitrary metadata attached to the vote.
   *
   * @generated from field: string metadata = 4;
   */
  metadata = "";

  /**
   * exec defines whether the proposal should be executed
   * immediately after voting or not.
   *
   * @generated from field: cosmos.group.v1.Exec exec = 5;
   */
  exec = Exec.UNSPECIFIED;

  constructor(data?: PartialMessage<MsgVote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgVote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "voter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "option", kind: "enum", T: proto3.getEnumType(VoteOption) },
    { no: 4, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "exec", kind: "enum", T: proto3.getEnumType(Exec) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgVote {
    return new MsgVote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgVote {
    return new MsgVote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgVote {
    return new MsgVote().fromJsonString(jsonString, options);
  }

  static equals(a: MsgVote | PlainMessage<MsgVote> | undefined, b: MsgVote | PlainMessage<MsgVote> | undefined): boolean {
    return proto3.util.equals(MsgVote, a, b);
  }
}

/**
 * MsgVoteResponse is the Msg/Vote response type.
 *
 * @generated from message cosmos.group.v1.MsgVoteResponse
 */
export class MsgVoteResponse extends Message<MsgVoteResponse> {
  constructor(data?: PartialMessage<MsgVoteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgVoteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgVoteResponse {
    return new MsgVoteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgVoteResponse {
    return new MsgVoteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgVoteResponse {
    return new MsgVoteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgVoteResponse | PlainMessage<MsgVoteResponse> | undefined, b: MsgVoteResponse | PlainMessage<MsgVoteResponse> | undefined): boolean {
    return proto3.util.equals(MsgVoteResponse, a, b);
  }
}

/**
 * MsgExec is the Msg/Exec request type.
 *
 * @generated from message cosmos.group.v1.MsgExec
 */
export class MsgExec extends Message<MsgExec> {
  /**
   * proposal is the unique ID of the proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId = protoInt64.zero;

  /**
   * executor is the account address used to execute the proposal.
   *
   * @generated from field: string executor = 2;
   */
  executor = "";

  constructor(data?: PartialMessage<MsgExec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgExec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "executor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExec {
    return new MsgExec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExec {
    return new MsgExec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExec {
    return new MsgExec().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExec | PlainMessage<MsgExec> | undefined, b: MsgExec | PlainMessage<MsgExec> | undefined): boolean {
    return proto3.util.equals(MsgExec, a, b);
  }
}

/**
 * MsgExecResponse is the Msg/Exec request type.
 *
 * @generated from message cosmos.group.v1.MsgExecResponse
 */
export class MsgExecResponse extends Message<MsgExecResponse> {
  /**
   * result is the final result of the proposal execution.
   *
   * @generated from field: cosmos.group.v1.ProposalExecutorResult result = 2;
   */
  result = ProposalExecutorResult.UNSPECIFIED;

  constructor(data?: PartialMessage<MsgExecResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgExecResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "result", kind: "enum", T: proto3.getEnumType(ProposalExecutorResult) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExecResponse {
    return new MsgExecResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExecResponse {
    return new MsgExecResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExecResponse {
    return new MsgExecResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExecResponse | PlainMessage<MsgExecResponse> | undefined, b: MsgExecResponse | PlainMessage<MsgExecResponse> | undefined): boolean {
    return proto3.util.equals(MsgExecResponse, a, b);
  }
}

/**
 * MsgLeaveGroup is the Msg/LeaveGroup request type.
 *
 * @generated from message cosmos.group.v1.MsgLeaveGroup
 */
export class MsgLeaveGroup extends Message<MsgLeaveGroup> {
  /**
   * address is the account address of the group member.
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * group_id is the unique ID of the group.
   *
   * @generated from field: uint64 group_id = 2;
   */
  groupId = protoInt64.zero;

  constructor(data?: PartialMessage<MsgLeaveGroup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgLeaveGroup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgLeaveGroup {
    return new MsgLeaveGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgLeaveGroup {
    return new MsgLeaveGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgLeaveGroup {
    return new MsgLeaveGroup().fromJsonString(jsonString, options);
  }

  static equals(a: MsgLeaveGroup | PlainMessage<MsgLeaveGroup> | undefined, b: MsgLeaveGroup | PlainMessage<MsgLeaveGroup> | undefined): boolean {
    return proto3.util.equals(MsgLeaveGroup, a, b);
  }
}

/**
 * MsgLeaveGroupResponse is the Msg/LeaveGroup response type.
 *
 * @generated from message cosmos.group.v1.MsgLeaveGroupResponse
 */
export class MsgLeaveGroupResponse extends Message<MsgLeaveGroupResponse> {
  constructor(data?: PartialMessage<MsgLeaveGroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.group.v1.MsgLeaveGroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgLeaveGroupResponse {
    return new MsgLeaveGroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgLeaveGroupResponse {
    return new MsgLeaveGroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgLeaveGroupResponse {
    return new MsgLeaveGroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgLeaveGroupResponse | PlainMessage<MsgLeaveGroupResponse> | undefined, b: MsgLeaveGroupResponse | PlainMessage<MsgLeaveGroupResponse> | undefined): boolean {
    return proto3.util.equals(MsgLeaveGroupResponse, a, b);
  }
}

