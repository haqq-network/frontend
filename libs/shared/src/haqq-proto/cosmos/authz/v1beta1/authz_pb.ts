// Since: cosmos-sdk 0.43

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file cosmos/authz/v1beta1/authz.proto (package cosmos.authz.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Any, Message, proto3, Timestamp } from '@bufbuild/protobuf';

/**
 * GenericAuthorization gives the grantee unrestricted permissions to execute
 * the provided method on behalf of the granter's account.
 *
 * @generated from message cosmos.authz.v1beta1.GenericAuthorization
 */
export class GenericAuthorization extends Message<GenericAuthorization> {
  /**
   * Msg, identified by it's type URL, to grant unrestricted permissions to execute
   *
   * @generated from field: string msg = 1;
   */
  msg = '';

  constructor(data?: PartialMessage<GenericAuthorization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.authz.v1beta1.GenericAuthorization';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'msg', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GenericAuthorization {
    return new GenericAuthorization().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GenericAuthorization {
    return new GenericAuthorization().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GenericAuthorization {
    return new GenericAuthorization().fromJsonString(jsonString, options);
  }

  static equals(
    a: GenericAuthorization | PlainMessage<GenericAuthorization> | undefined,
    b: GenericAuthorization | PlainMessage<GenericAuthorization> | undefined,
  ): boolean {
    return proto3.util.equals(GenericAuthorization, a, b);
  }
}

/**
 * Grant gives permissions to execute
 * the provide method with expiration time.
 *
 * @generated from message cosmos.authz.v1beta1.Grant
 */
export class Grant extends Message<Grant> {
  /**
   * @generated from field: google.protobuf.Any authorization = 1;
   */
  authorization?: Any;

  /**
   * time when the grant will expire and will be pruned. If null, then the grant
   * doesn't have a time expiration (other conditions  in `authorization`
   * may apply to invalidate the grant)
   *
   * @generated from field: google.protobuf.Timestamp expiration = 2;
   */
  expiration?: Timestamp;

  constructor(data?: PartialMessage<Grant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.authz.v1beta1.Grant';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'authorization', kind: 'message', T: Any },
    { no: 2, name: 'expiration', kind: 'message', T: Timestamp },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Grant {
    return new Grant().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Grant {
    return new Grant().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Grant {
    return new Grant().fromJsonString(jsonString, options);
  }

  static equals(
    a: Grant | PlainMessage<Grant> | undefined,
    b: Grant | PlainMessage<Grant> | undefined,
  ): boolean {
    return proto3.util.equals(Grant, a, b);
  }
}

/**
 * GrantAuthorization extends a grant with both the addresses of the grantee and granter.
 * It is used in genesis.proto and query.proto
 *
 * @generated from message cosmos.authz.v1beta1.GrantAuthorization
 */
export class GrantAuthorization extends Message<GrantAuthorization> {
  /**
   * @generated from field: string granter = 1;
   */
  granter = '';

  /**
   * @generated from field: string grantee = 2;
   */
  grantee = '';

  /**
   * @generated from field: google.protobuf.Any authorization = 3;
   */
  authorization?: Any;

  /**
   * @generated from field: google.protobuf.Timestamp expiration = 4;
   */
  expiration?: Timestamp;

  constructor(data?: PartialMessage<GrantAuthorization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.authz.v1beta1.GrantAuthorization';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'granter', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'grantee', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'authorization', kind: 'message', T: Any },
    { no: 4, name: 'expiration', kind: 'message', T: Timestamp },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GrantAuthorization {
    return new GrantAuthorization().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GrantAuthorization {
    return new GrantAuthorization().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GrantAuthorization {
    return new GrantAuthorization().fromJsonString(jsonString, options);
  }

  static equals(
    a: GrantAuthorization | PlainMessage<GrantAuthorization> | undefined,
    b: GrantAuthorization | PlainMessage<GrantAuthorization> | undefined,
  ): boolean {
    return proto3.util.equals(GrantAuthorization, a, b);
  }
}

/**
 * GrantQueueItem contains the list of TypeURL of a sdk.Msg.
 *
 * @generated from message cosmos.authz.v1beta1.GrantQueueItem
 */
export class GrantQueueItem extends Message<GrantQueueItem> {
  /**
   * msg_type_urls contains the list of TypeURL of a sdk.Msg.
   *
   * @generated from field: repeated string msg_type_urls = 1;
   */
  msgTypeUrls: string[] = [];

  constructor(data?: PartialMessage<GrantQueueItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.authz.v1beta1.GrantQueueItem';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'msg_type_urls',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GrantQueueItem {
    return new GrantQueueItem().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GrantQueueItem {
    return new GrantQueueItem().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GrantQueueItem {
    return new GrantQueueItem().fromJsonString(jsonString, options);
  }

  static equals(
    a: GrantQueueItem | PlainMessage<GrantQueueItem> | undefined,
    b: GrantQueueItem | PlainMessage<GrantQueueItem> | undefined,
  ): boolean {
    return proto3.util.equals(GrantQueueItem, a, b);
  }
}
