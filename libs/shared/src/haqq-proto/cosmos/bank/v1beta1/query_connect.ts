// @generated by protoc-gen-connect-es v1.1.3 with parameter "target=ts"
// @generated from file cosmos/bank/v1beta1/query.proto (package cosmos.bank.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { QueryAllBalancesRequest, QueryAllBalancesResponse, QueryBalanceRequest, QueryBalanceResponse, QueryDenomMetadataRequest, QueryDenomMetadataResponse, QueryDenomOwnersRequest, QueryDenomOwnersResponse, QueryDenomsMetadataRequest, QueryDenomsMetadataResponse, QueryParamsRequest, QueryParamsResponse, QuerySendEnabledRequest, QuerySendEnabledResponse, QuerySpendableBalanceByDenomRequest, QuerySpendableBalanceByDenomResponse, QuerySpendableBalancesRequest, QuerySpendableBalancesResponse, QuerySupplyOfRequest, QuerySupplyOfResponse, QueryTotalSupplyRequest, QueryTotalSupplyResponse } from "./query_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * Query defines the gRPC querier service.
 *
 * @generated from service cosmos.bank.v1beta1.Query
 */
export const Query = {
  typeName: "cosmos.bank.v1beta1.Query",
  methods: {
    /**
     * Balance queries the balance of a single coin for a single account.
     *
     * @generated from rpc cosmos.bank.v1beta1.Query.Balance
     */
    balance: {
      name: "Balance",
      I: QueryBalanceRequest,
      O: QueryBalanceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * AllBalances queries the balance of all coins for a single account.
     *
     * When called from another module, this query might consume a high amount of
     * gas if the pagination field is incorrectly set.
     *
     * @generated from rpc cosmos.bank.v1beta1.Query.AllBalances
     */
    allBalances: {
      name: "AllBalances",
      I: QueryAllBalancesRequest,
      O: QueryAllBalancesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * SpendableBalances queries the spendable balance of all coins for a single
     * account.
     *
     * When called from another module, this query might consume a high amount of
     * gas if the pagination field is incorrectly set.
     *
     * Since: cosmos-sdk 0.46
     *
     * @generated from rpc cosmos.bank.v1beta1.Query.SpendableBalances
     */
    spendableBalances: {
      name: "SpendableBalances",
      I: QuerySpendableBalancesRequest,
      O: QuerySpendableBalancesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * SpendableBalanceByDenom queries the spendable balance of a single denom for
     * a single account.
     *
     * When called from another module, this query might consume a high amount of
     * gas if the pagination field is incorrectly set.
     *
     * Since: cosmos-sdk 0.47
     *
     * @generated from rpc cosmos.bank.v1beta1.Query.SpendableBalanceByDenom
     */
    spendableBalanceByDenom: {
      name: "SpendableBalanceByDenom",
      I: QuerySpendableBalanceByDenomRequest,
      O: QuerySpendableBalanceByDenomResponse,
      kind: MethodKind.Unary,
    },
    /**
     * TotalSupply queries the total supply of all coins.
     *
     * When called from another module, this query might consume a high amount of
     * gas if the pagination field is incorrectly set.
     *
     * @generated from rpc cosmos.bank.v1beta1.Query.TotalSupply
     */
    totalSupply: {
      name: "TotalSupply",
      I: QueryTotalSupplyRequest,
      O: QueryTotalSupplyResponse,
      kind: MethodKind.Unary,
    },
    /**
     * SupplyOf queries the supply of a single coin.
     *
     * When called from another module, this query might consume a high amount of
     * gas if the pagination field is incorrectly set.
     *
     * @generated from rpc cosmos.bank.v1beta1.Query.SupplyOf
     */
    supplyOf: {
      name: "SupplyOf",
      I: QuerySupplyOfRequest,
      O: QuerySupplyOfResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Params queries the parameters of x/bank module.
     *
     * @generated from rpc cosmos.bank.v1beta1.Query.Params
     */
    params: {
      name: "Params",
      I: QueryParamsRequest,
      O: QueryParamsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DenomsMetadata queries the client metadata of a given coin denomination.
     *
     * @generated from rpc cosmos.bank.v1beta1.Query.DenomMetadata
     */
    denomMetadata: {
      name: "DenomMetadata",
      I: QueryDenomMetadataRequest,
      O: QueryDenomMetadataResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DenomsMetadata queries the client metadata for all registered coin
     * denominations.
     *
     * @generated from rpc cosmos.bank.v1beta1.Query.DenomsMetadata
     */
    denomsMetadata: {
      name: "DenomsMetadata",
      I: QueryDenomsMetadataRequest,
      O: QueryDenomsMetadataResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DenomOwners queries for all account addresses that own a particular token
     * denomination.
     *
     * When called from another module, this query might consume a high amount of
     * gas if the pagination field is incorrectly set.
     *
     * Since: cosmos-sdk 0.46
     *
     * @generated from rpc cosmos.bank.v1beta1.Query.DenomOwners
     */
    denomOwners: {
      name: "DenomOwners",
      I: QueryDenomOwnersRequest,
      O: QueryDenomOwnersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * SendEnabled queries for SendEnabled entries.
     *
     * This query only returns denominations that have specific SendEnabled settings.
     * Any denomination that does not have a specific setting will use the default
     * params.default_send_enabled, and will not be returned by this query.
     *
     * Since: cosmos-sdk 0.47
     *
     * @generated from rpc cosmos.bank.v1beta1.Query.SendEnabled
     */
    sendEnabled: {
      name: "SendEnabled",
      I: QuerySendEnabledRequest,
      O: QuerySendEnabledResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

