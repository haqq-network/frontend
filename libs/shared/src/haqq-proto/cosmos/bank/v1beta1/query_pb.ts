// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file cosmos/bank/v1beta1/query.proto (package cosmos.bank.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';
import { Coin } from '../../base/v1beta1/coin_pb';
import {
  PageRequest,
  PageResponse,
} from '../../base/query/v1beta1/pagination_pb';
import { Metadata, Params, SendEnabled } from './bank_pb';

/**
 * QueryBalanceRequest is the request type for the Query/Balance RPC method.
 *
 * @generated from message cosmos.bank.v1beta1.QueryBalanceRequest
 */
export class QueryBalanceRequest extends Message<QueryBalanceRequest> {
  /**
   * address is the address to query balances for.
   *
   * @generated from field: string address = 1;
   */
  address = '';

  /**
   * denom is the coin denom to query balances for.
   *
   * @generated from field: string denom = 2;
   */
  denom = '';

  constructor(data?: PartialMessage<QueryBalanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.bank.v1beta1.QueryBalanceRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'address', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'denom', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryBalanceRequest {
    return new QueryBalanceRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryBalanceRequest {
    return new QueryBalanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryBalanceRequest {
    return new QueryBalanceRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: QueryBalanceRequest | PlainMessage<QueryBalanceRequest> | undefined,
    b: QueryBalanceRequest | PlainMessage<QueryBalanceRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryBalanceRequest, a, b);
  }
}

/**
 * QueryBalanceResponse is the response type for the Query/Balance RPC method.
 *
 * @generated from message cosmos.bank.v1beta1.QueryBalanceResponse
 */
export class QueryBalanceResponse extends Message<QueryBalanceResponse> {
  /**
   * balance is the balance of the coin.
   *
   * @generated from field: cosmos.base.v1beta1.Coin balance = 1;
   */
  balance?: Coin;

  constructor(data?: PartialMessage<QueryBalanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.bank.v1beta1.QueryBalanceResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'balance', kind: 'message', T: Coin },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryBalanceResponse {
    return new QueryBalanceResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryBalanceResponse {
    return new QueryBalanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryBalanceResponse {
    return new QueryBalanceResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: QueryBalanceResponse | PlainMessage<QueryBalanceResponse> | undefined,
    b: QueryBalanceResponse | PlainMessage<QueryBalanceResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QueryBalanceResponse, a, b);
  }
}

/**
 * QueryBalanceRequest is the request type for the Query/AllBalances RPC method.
 *
 * @generated from message cosmos.bank.v1beta1.QueryAllBalancesRequest
 */
export class QueryAllBalancesRequest extends Message<QueryAllBalancesRequest> {
  /**
   * address is the address to query balances for.
   *
   * @generated from field: string address = 1;
   */
  address = '';

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllBalancesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.bank.v1beta1.QueryAllBalancesRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'address', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'pagination', kind: 'message', T: PageRequest },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryAllBalancesRequest {
    return new QueryAllBalancesRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryAllBalancesRequest {
    return new QueryAllBalancesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryAllBalancesRequest {
    return new QueryAllBalancesRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryAllBalancesRequest
      | PlainMessage<QueryAllBalancesRequest>
      | undefined,
    b:
      | QueryAllBalancesRequest
      | PlainMessage<QueryAllBalancesRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryAllBalancesRequest, a, b);
  }
}

/**
 * QueryAllBalancesResponse is the response type for the Query/AllBalances RPC
 * method.
 *
 * @generated from message cosmos.bank.v1beta1.QueryAllBalancesResponse
 */
export class QueryAllBalancesResponse extends Message<QueryAllBalancesResponse> {
  /**
   * balances is the balances of all the coins.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin balances = 1;
   */
  balances: Coin[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllBalancesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.bank.v1beta1.QueryAllBalancesResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'balances', kind: 'message', T: Coin, repeated: true },
    { no: 2, name: 'pagination', kind: 'message', T: PageResponse },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryAllBalancesResponse {
    return new QueryAllBalancesResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryAllBalancesResponse {
    return new QueryAllBalancesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryAllBalancesResponse {
    return new QueryAllBalancesResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryAllBalancesResponse
      | PlainMessage<QueryAllBalancesResponse>
      | undefined,
    b:
      | QueryAllBalancesResponse
      | PlainMessage<QueryAllBalancesResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryAllBalancesResponse, a, b);
  }
}

/**
 * QuerySpendableBalancesRequest defines the gRPC request structure for querying
 * an account's spendable balances.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.bank.v1beta1.QuerySpendableBalancesRequest
 */
export class QuerySpendableBalancesRequest extends Message<QuerySpendableBalancesRequest> {
  /**
   * address is the address to query spendable balances for.
   *
   * @generated from field: string address = 1;
   */
  address = '';

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QuerySpendableBalancesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'cosmos.bank.v1beta1.QuerySpendableBalancesRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'address', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'pagination', kind: 'message', T: PageRequest },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QuerySpendableBalancesRequest {
    return new QuerySpendableBalancesRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QuerySpendableBalancesRequest {
    return new QuerySpendableBalancesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QuerySpendableBalancesRequest {
    return new QuerySpendableBalancesRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QuerySpendableBalancesRequest
      | PlainMessage<QuerySpendableBalancesRequest>
      | undefined,
    b:
      | QuerySpendableBalancesRequest
      | PlainMessage<QuerySpendableBalancesRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QuerySpendableBalancesRequest, a, b);
  }
}

/**
 * QuerySpendableBalancesResponse defines the gRPC response structure for querying
 * an account's spendable balances.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.bank.v1beta1.QuerySpendableBalancesResponse
 */
export class QuerySpendableBalancesResponse extends Message<QuerySpendableBalancesResponse> {
  /**
   * balances is the spendable balances of all the coins.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin balances = 1;
   */
  balances: Coin[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QuerySpendableBalancesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'cosmos.bank.v1beta1.QuerySpendableBalancesResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'balances', kind: 'message', T: Coin, repeated: true },
    { no: 2, name: 'pagination', kind: 'message', T: PageResponse },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QuerySpendableBalancesResponse {
    return new QuerySpendableBalancesResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QuerySpendableBalancesResponse {
    return new QuerySpendableBalancesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QuerySpendableBalancesResponse {
    return new QuerySpendableBalancesResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QuerySpendableBalancesResponse
      | PlainMessage<QuerySpendableBalancesResponse>
      | undefined,
    b:
      | QuerySpendableBalancesResponse
      | PlainMessage<QuerySpendableBalancesResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QuerySpendableBalancesResponse, a, b);
  }
}

/**
 * QuerySpendableBalanceByDenomRequest defines the gRPC request structure for
 * querying an account's spendable balance for a specific denom.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest
 */
export class QuerySpendableBalanceByDenomRequest extends Message<QuerySpendableBalanceByDenomRequest> {
  /**
   * address is the address to query balances for.
   *
   * @generated from field: string address = 1;
   */
  address = '';

  /**
   * denom is the coin denom to query balances for.
   *
   * @generated from field: string denom = 2;
   */
  denom = '';

  constructor(data?: PartialMessage<QuerySpendableBalanceByDenomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'address', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'denom', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QuerySpendableBalanceByDenomRequest {
    return new QuerySpendableBalanceByDenomRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QuerySpendableBalanceByDenomRequest {
    return new QuerySpendableBalanceByDenomRequest().fromJson(
      jsonValue,
      options,
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QuerySpendableBalanceByDenomRequest {
    return new QuerySpendableBalanceByDenomRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QuerySpendableBalanceByDenomRequest
      | PlainMessage<QuerySpendableBalanceByDenomRequest>
      | undefined,
    b:
      | QuerySpendableBalanceByDenomRequest
      | PlainMessage<QuerySpendableBalanceByDenomRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QuerySpendableBalanceByDenomRequest, a, b);
  }
}

/**
 * QuerySpendableBalanceByDenomResponse defines the gRPC response structure for
 * querying an account's spendable balance for a specific denom.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse
 */
export class QuerySpendableBalanceByDenomResponse extends Message<QuerySpendableBalanceByDenomResponse> {
  /**
   * balance is the balance of the coin.
   *
   * @generated from field: cosmos.base.v1beta1.Coin balance = 1;
   */
  balance?: Coin;

  constructor(data?: PartialMessage<QuerySpendableBalanceByDenomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'balance', kind: 'message', T: Coin },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QuerySpendableBalanceByDenomResponse {
    return new QuerySpendableBalanceByDenomResponse().fromBinary(
      bytes,
      options,
    );
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QuerySpendableBalanceByDenomResponse {
    return new QuerySpendableBalanceByDenomResponse().fromJson(
      jsonValue,
      options,
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QuerySpendableBalanceByDenomResponse {
    return new QuerySpendableBalanceByDenomResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QuerySpendableBalanceByDenomResponse
      | PlainMessage<QuerySpendableBalanceByDenomResponse>
      | undefined,
    b:
      | QuerySpendableBalanceByDenomResponse
      | PlainMessage<QuerySpendableBalanceByDenomResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QuerySpendableBalanceByDenomResponse, a, b);
  }
}

/**
 * QueryTotalSupplyRequest is the request type for the Query/TotalSupply RPC
 * method.
 *
 * @generated from message cosmos.bank.v1beta1.QueryTotalSupplyRequest
 */
export class QueryTotalSupplyRequest extends Message<QueryTotalSupplyRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * Since: cosmos-sdk 0.43
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryTotalSupplyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.bank.v1beta1.QueryTotalSupplyRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'pagination', kind: 'message', T: PageRequest },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryTotalSupplyRequest {
    return new QueryTotalSupplyRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryTotalSupplyRequest {
    return new QueryTotalSupplyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryTotalSupplyRequest {
    return new QueryTotalSupplyRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryTotalSupplyRequest
      | PlainMessage<QueryTotalSupplyRequest>
      | undefined,
    b:
      | QueryTotalSupplyRequest
      | PlainMessage<QueryTotalSupplyRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryTotalSupplyRequest, a, b);
  }
}

/**
 * QueryTotalSupplyResponse is the response type for the Query/TotalSupply RPC
 * method
 *
 * @generated from message cosmos.bank.v1beta1.QueryTotalSupplyResponse
 */
export class QueryTotalSupplyResponse extends Message<QueryTotalSupplyResponse> {
  /**
   * supply is the supply of the coins
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin supply = 1;
   */
  supply: Coin[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * Since: cosmos-sdk 0.43
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryTotalSupplyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.bank.v1beta1.QueryTotalSupplyResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'supply', kind: 'message', T: Coin, repeated: true },
    { no: 2, name: 'pagination', kind: 'message', T: PageResponse },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryTotalSupplyResponse {
    return new QueryTotalSupplyResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryTotalSupplyResponse {
    return new QueryTotalSupplyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryTotalSupplyResponse {
    return new QueryTotalSupplyResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryTotalSupplyResponse
      | PlainMessage<QueryTotalSupplyResponse>
      | undefined,
    b:
      | QueryTotalSupplyResponse
      | PlainMessage<QueryTotalSupplyResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryTotalSupplyResponse, a, b);
  }
}

/**
 * QuerySupplyOfRequest is the request type for the Query/SupplyOf RPC method.
 *
 * @generated from message cosmos.bank.v1beta1.QuerySupplyOfRequest
 */
export class QuerySupplyOfRequest extends Message<QuerySupplyOfRequest> {
  /**
   * denom is the coin denom to query balances for.
   *
   * @generated from field: string denom = 1;
   */
  denom = '';

  constructor(data?: PartialMessage<QuerySupplyOfRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.bank.v1beta1.QuerySupplyOfRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'denom', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QuerySupplyOfRequest {
    return new QuerySupplyOfRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QuerySupplyOfRequest {
    return new QuerySupplyOfRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QuerySupplyOfRequest {
    return new QuerySupplyOfRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: QuerySupplyOfRequest | PlainMessage<QuerySupplyOfRequest> | undefined,
    b: QuerySupplyOfRequest | PlainMessage<QuerySupplyOfRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QuerySupplyOfRequest, a, b);
  }
}

/**
 * QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC method.
 *
 * @generated from message cosmos.bank.v1beta1.QuerySupplyOfResponse
 */
export class QuerySupplyOfResponse extends Message<QuerySupplyOfResponse> {
  /**
   * amount is the supply of the coin.
   *
   * @generated from field: cosmos.base.v1beta1.Coin amount = 1;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<QuerySupplyOfResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.bank.v1beta1.QuerySupplyOfResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'amount', kind: 'message', T: Coin },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QuerySupplyOfResponse {
    return new QuerySupplyOfResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QuerySupplyOfResponse {
    return new QuerySupplyOfResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QuerySupplyOfResponse {
    return new QuerySupplyOfResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: QuerySupplyOfResponse | PlainMessage<QuerySupplyOfResponse> | undefined,
    b: QuerySupplyOfResponse | PlainMessage<QuerySupplyOfResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QuerySupplyOfResponse, a, b);
  }
}

/**
 * QueryParamsRequest defines the request type for querying x/bank parameters.
 *
 * @generated from message cosmos.bank.v1beta1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.bank.v1beta1.QueryParamsRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined,
    b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse defines the response type for querying x/bank parameters.
 *
 * @generated from message cosmos.bank.v1beta1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * @generated from field: cosmos.bank.v1beta1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.bank.v1beta1.QueryParamsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'params', kind: 'message', T: Params },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined,
    b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryDenomsMetadataRequest is the request type for the Query/DenomsMetadata RPC method.
 *
 * @generated from message cosmos.bank.v1beta1.QueryDenomsMetadataRequest
 */
export class QueryDenomsMetadataRequest extends Message<QueryDenomsMetadataRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryDenomsMetadataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.bank.v1beta1.QueryDenomsMetadataRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'pagination', kind: 'message', T: PageRequest },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryDenomsMetadataRequest {
    return new QueryDenomsMetadataRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryDenomsMetadataRequest {
    return new QueryDenomsMetadataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryDenomsMetadataRequest {
    return new QueryDenomsMetadataRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryDenomsMetadataRequest
      | PlainMessage<QueryDenomsMetadataRequest>
      | undefined,
    b:
      | QueryDenomsMetadataRequest
      | PlainMessage<QueryDenomsMetadataRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryDenomsMetadataRequest, a, b);
  }
}

/**
 * QueryDenomsMetadataResponse is the response type for the Query/DenomsMetadata RPC
 * method.
 *
 * @generated from message cosmos.bank.v1beta1.QueryDenomsMetadataResponse
 */
export class QueryDenomsMetadataResponse extends Message<QueryDenomsMetadataResponse> {
  /**
   * metadata provides the client information for all the registered tokens.
   *
   * @generated from field: repeated cosmos.bank.v1beta1.Metadata metadatas = 1;
   */
  metadatas: Metadata[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryDenomsMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.bank.v1beta1.QueryDenomsMetadataResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'metadatas', kind: 'message', T: Metadata, repeated: true },
    { no: 2, name: 'pagination', kind: 'message', T: PageResponse },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryDenomsMetadataResponse {
    return new QueryDenomsMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryDenomsMetadataResponse {
    return new QueryDenomsMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryDenomsMetadataResponse {
    return new QueryDenomsMetadataResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QueryDenomsMetadataResponse
      | PlainMessage<QueryDenomsMetadataResponse>
      | undefined,
    b:
      | QueryDenomsMetadataResponse
      | PlainMessage<QueryDenomsMetadataResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryDenomsMetadataResponse, a, b);
  }
}

/**
 * QueryDenomMetadataRequest is the request type for the Query/DenomMetadata RPC method.
 *
 * @generated from message cosmos.bank.v1beta1.QueryDenomMetadataRequest
 */
export class QueryDenomMetadataRequest extends Message<QueryDenomMetadataRequest> {
  /**
   * denom is the coin denom to query the metadata for.
   *
   * @generated from field: string denom = 1;
   */
  denom = '';

  constructor(data?: PartialMessage<QueryDenomMetadataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.bank.v1beta1.QueryDenomMetadataRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'denom', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryDenomMetadataRequest {
    return new QueryDenomMetadataRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryDenomMetadataRequest {
    return new QueryDenomMetadataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryDenomMetadataRequest {
    return new QueryDenomMetadataRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryDenomMetadataRequest
      | PlainMessage<QueryDenomMetadataRequest>
      | undefined,
    b:
      | QueryDenomMetadataRequest
      | PlainMessage<QueryDenomMetadataRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryDenomMetadataRequest, a, b);
  }
}

/**
 * QueryDenomMetadataResponse is the response type for the Query/DenomMetadata RPC
 * method.
 *
 * @generated from message cosmos.bank.v1beta1.QueryDenomMetadataResponse
 */
export class QueryDenomMetadataResponse extends Message<QueryDenomMetadataResponse> {
  /**
   * metadata describes and provides all the client information for the requested token.
   *
   * @generated from field: cosmos.bank.v1beta1.Metadata metadata = 1;
   */
  metadata?: Metadata;

  constructor(data?: PartialMessage<QueryDenomMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.bank.v1beta1.QueryDenomMetadataResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'metadata', kind: 'message', T: Metadata },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryDenomMetadataResponse {
    return new QueryDenomMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryDenomMetadataResponse {
    return new QueryDenomMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryDenomMetadataResponse {
    return new QueryDenomMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryDenomMetadataResponse
      | PlainMessage<QueryDenomMetadataResponse>
      | undefined,
    b:
      | QueryDenomMetadataResponse
      | PlainMessage<QueryDenomMetadataResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryDenomMetadataResponse, a, b);
  }
}

/**
 * QueryDenomOwnersRequest defines the request type for the DenomOwners RPC query,
 * which queries for a paginated set of all account holders of a particular
 * denomination.
 *
 * @generated from message cosmos.bank.v1beta1.QueryDenomOwnersRequest
 */
export class QueryDenomOwnersRequest extends Message<QueryDenomOwnersRequest> {
  /**
   * denom defines the coin denomination to query all account holders for.
   *
   * @generated from field: string denom = 1;
   */
  denom = '';

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryDenomOwnersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.bank.v1beta1.QueryDenomOwnersRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'denom', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'pagination', kind: 'message', T: PageRequest },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryDenomOwnersRequest {
    return new QueryDenomOwnersRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryDenomOwnersRequest {
    return new QueryDenomOwnersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryDenomOwnersRequest {
    return new QueryDenomOwnersRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryDenomOwnersRequest
      | PlainMessage<QueryDenomOwnersRequest>
      | undefined,
    b:
      | QueryDenomOwnersRequest
      | PlainMessage<QueryDenomOwnersRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryDenomOwnersRequest, a, b);
  }
}

/**
 * DenomOwner defines structure representing an account that owns or holds a
 * particular denominated token. It contains the account address and account
 * balance of the denominated token.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.bank.v1beta1.DenomOwner
 */
export class DenomOwner extends Message<DenomOwner> {
  /**
   * address defines the address that owns a particular denomination.
   *
   * @generated from field: string address = 1;
   */
  address = '';

  /**
   * balance is the balance of the denominated coin for an account.
   *
   * @generated from field: cosmos.base.v1beta1.Coin balance = 2;
   */
  balance?: Coin;

  constructor(data?: PartialMessage<DenomOwner>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.bank.v1beta1.DenomOwner';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'address', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'balance', kind: 'message', T: Coin },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DenomOwner {
    return new DenomOwner().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DenomOwner {
    return new DenomOwner().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DenomOwner {
    return new DenomOwner().fromJsonString(jsonString, options);
  }

  static equals(
    a: DenomOwner | PlainMessage<DenomOwner> | undefined,
    b: DenomOwner | PlainMessage<DenomOwner> | undefined,
  ): boolean {
    return proto3.util.equals(DenomOwner, a, b);
  }
}

/**
 * QueryDenomOwnersResponse defines the RPC response of a DenomOwners RPC query.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.bank.v1beta1.QueryDenomOwnersResponse
 */
export class QueryDenomOwnersResponse extends Message<QueryDenomOwnersResponse> {
  /**
   * @generated from field: repeated cosmos.bank.v1beta1.DenomOwner denom_owners = 1;
   */
  denomOwners: DenomOwner[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryDenomOwnersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.bank.v1beta1.QueryDenomOwnersResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'denom_owners',
      kind: 'message',
      T: DenomOwner,
      repeated: true,
    },
    { no: 2, name: 'pagination', kind: 'message', T: PageResponse },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryDenomOwnersResponse {
    return new QueryDenomOwnersResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryDenomOwnersResponse {
    return new QueryDenomOwnersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryDenomOwnersResponse {
    return new QueryDenomOwnersResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryDenomOwnersResponse
      | PlainMessage<QueryDenomOwnersResponse>
      | undefined,
    b:
      | QueryDenomOwnersResponse
      | PlainMessage<QueryDenomOwnersResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryDenomOwnersResponse, a, b);
  }
}

/**
 * QuerySendEnabledRequest defines the RPC request for looking up SendEnabled entries.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message cosmos.bank.v1beta1.QuerySendEnabledRequest
 */
export class QuerySendEnabledRequest extends Message<QuerySendEnabledRequest> {
  /**
   * denoms is the specific denoms you want look up. Leave empty to get all entries.
   *
   * @generated from field: repeated string denoms = 1;
   */
  denoms: string[] = [];

  /**
   * pagination defines an optional pagination for the request. This field is
   * only read if the denoms field is empty.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 99;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QuerySendEnabledRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.bank.v1beta1.QuerySendEnabledRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'denoms',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    { no: 99, name: 'pagination', kind: 'message', T: PageRequest },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QuerySendEnabledRequest {
    return new QuerySendEnabledRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QuerySendEnabledRequest {
    return new QuerySendEnabledRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QuerySendEnabledRequest {
    return new QuerySendEnabledRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QuerySendEnabledRequest
      | PlainMessage<QuerySendEnabledRequest>
      | undefined,
    b:
      | QuerySendEnabledRequest
      | PlainMessage<QuerySendEnabledRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QuerySendEnabledRequest, a, b);
  }
}

/**
 * QuerySendEnabledResponse defines the RPC response of a SendEnable query.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message cosmos.bank.v1beta1.QuerySendEnabledResponse
 */
export class QuerySendEnabledResponse extends Message<QuerySendEnabledResponse> {
  /**
   * @generated from field: repeated cosmos.bank.v1beta1.SendEnabled send_enabled = 1;
   */
  sendEnabled: SendEnabled[] = [];

  /**
   * pagination defines the pagination in the response. This field is only
   * populated if the denoms field in the request is empty.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 99;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QuerySendEnabledResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.bank.v1beta1.QuerySendEnabledResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'send_enabled',
      kind: 'message',
      T: SendEnabled,
      repeated: true,
    },
    { no: 99, name: 'pagination', kind: 'message', T: PageResponse },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QuerySendEnabledResponse {
    return new QuerySendEnabledResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QuerySendEnabledResponse {
    return new QuerySendEnabledResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QuerySendEnabledResponse {
    return new QuerySendEnabledResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QuerySendEnabledResponse
      | PlainMessage<QuerySendEnabledResponse>
      | undefined,
    b:
      | QuerySendEnabledResponse
      | PlainMessage<QuerySendEnabledResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QuerySendEnabledResponse, a, b);
  }
}
