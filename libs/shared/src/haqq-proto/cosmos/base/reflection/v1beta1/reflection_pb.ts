// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file cosmos/base/reflection/v1beta1/reflection.proto (package cosmos.base.reflection.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * ListAllInterfacesRequest is the request type of the ListAllInterfaces RPC.
 *
 * @generated from message cosmos.base.reflection.v1beta1.ListAllInterfacesRequest
 */
export class ListAllInterfacesRequest extends Message<ListAllInterfacesRequest> {
  constructor(data?: PartialMessage<ListAllInterfacesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.base.reflection.v1beta1.ListAllInterfacesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAllInterfacesRequest {
    return new ListAllInterfacesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAllInterfacesRequest {
    return new ListAllInterfacesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAllInterfacesRequest {
    return new ListAllInterfacesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAllInterfacesRequest | PlainMessage<ListAllInterfacesRequest> | undefined, b: ListAllInterfacesRequest | PlainMessage<ListAllInterfacesRequest> | undefined): boolean {
    return proto3.util.equals(ListAllInterfacesRequest, a, b);
  }
}

/**
 * ListAllInterfacesResponse is the response type of the ListAllInterfaces RPC.
 *
 * @generated from message cosmos.base.reflection.v1beta1.ListAllInterfacesResponse
 */
export class ListAllInterfacesResponse extends Message<ListAllInterfacesResponse> {
  /**
   * interface_names is an array of all the registered interfaces.
   *
   * @generated from field: repeated string interface_names = 1;
   */
  interfaceNames: string[] = [];

  constructor(data?: PartialMessage<ListAllInterfacesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.base.reflection.v1beta1.ListAllInterfacesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "interface_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAllInterfacesResponse {
    return new ListAllInterfacesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAllInterfacesResponse {
    return new ListAllInterfacesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAllInterfacesResponse {
    return new ListAllInterfacesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAllInterfacesResponse | PlainMessage<ListAllInterfacesResponse> | undefined, b: ListAllInterfacesResponse | PlainMessage<ListAllInterfacesResponse> | undefined): boolean {
    return proto3.util.equals(ListAllInterfacesResponse, a, b);
  }
}

/**
 * ListImplementationsRequest is the request type of the ListImplementations
 * RPC.
 *
 * @generated from message cosmos.base.reflection.v1beta1.ListImplementationsRequest
 */
export class ListImplementationsRequest extends Message<ListImplementationsRequest> {
  /**
   * interface_name defines the interface to query the implementations for.
   *
   * @generated from field: string interface_name = 1;
   */
  interfaceName = "";

  constructor(data?: PartialMessage<ListImplementationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.base.reflection.v1beta1.ListImplementationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "interface_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListImplementationsRequest {
    return new ListImplementationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListImplementationsRequest {
    return new ListImplementationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListImplementationsRequest {
    return new ListImplementationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListImplementationsRequest | PlainMessage<ListImplementationsRequest> | undefined, b: ListImplementationsRequest | PlainMessage<ListImplementationsRequest> | undefined): boolean {
    return proto3.util.equals(ListImplementationsRequest, a, b);
  }
}

/**
 * ListImplementationsResponse is the response type of the ListImplementations
 * RPC.
 *
 * @generated from message cosmos.base.reflection.v1beta1.ListImplementationsResponse
 */
export class ListImplementationsResponse extends Message<ListImplementationsResponse> {
  /**
   * @generated from field: repeated string implementation_message_names = 1;
   */
  implementationMessageNames: string[] = [];

  constructor(data?: PartialMessage<ListImplementationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.base.reflection.v1beta1.ListImplementationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "implementation_message_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListImplementationsResponse {
    return new ListImplementationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListImplementationsResponse {
    return new ListImplementationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListImplementationsResponse {
    return new ListImplementationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListImplementationsResponse | PlainMessage<ListImplementationsResponse> | undefined, b: ListImplementationsResponse | PlainMessage<ListImplementationsResponse> | undefined): boolean {
    return proto3.util.equals(ListImplementationsResponse, a, b);
  }
}

