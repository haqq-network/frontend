// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file cosmos/staking/v1beta1/query.proto (package cosmos.staking.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3, protoInt64 } from '@bufbuild/protobuf';
import {
  PageRequest,
  PageResponse,
} from '../../base/query/v1beta1/pagination_pb';
import {
  DelegationResponse,
  HistoricalInfo,
  Params,
  Pool,
  RedelegationResponse,
  UnbondingDelegation,
  Validator,
} from './staking_pb';

/**
 * QueryValidatorsRequest is request type for Query/Validators RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorsRequest
 */
export class QueryValidatorsRequest extends Message<QueryValidatorsRequest> {
  /**
   * status enables to query for validators matching a given status.
   *
   * @generated from field: string status = 1;
   */
  status = '';

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryValidatorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.staking.v1beta1.QueryValidatorsRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'status', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'pagination', kind: 'message', T: PageRequest },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryValidatorsRequest {
    return new QueryValidatorsRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryValidatorsRequest {
    return new QueryValidatorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryValidatorsRequest {
    return new QueryValidatorsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryValidatorsRequest
      | PlainMessage<QueryValidatorsRequest>
      | undefined,
    b:
      | QueryValidatorsRequest
      | PlainMessage<QueryValidatorsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryValidatorsRequest, a, b);
  }
}

/**
 * QueryValidatorsResponse is response type for the Query/Validators RPC method
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorsResponse
 */
export class QueryValidatorsResponse extends Message<QueryValidatorsResponse> {
  /**
   * validators contains all the queried validators.
   *
   * @generated from field: repeated cosmos.staking.v1beta1.Validator validators = 1;
   */
  validators: Validator[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryValidatorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.staking.v1beta1.QueryValidatorsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'validators',
      kind: 'message',
      T: Validator,
      repeated: true,
    },
    { no: 2, name: 'pagination', kind: 'message', T: PageResponse },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryValidatorsResponse {
    return new QueryValidatorsResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryValidatorsResponse {
    return new QueryValidatorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryValidatorsResponse {
    return new QueryValidatorsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryValidatorsResponse
      | PlainMessage<QueryValidatorsResponse>
      | undefined,
    b:
      | QueryValidatorsResponse
      | PlainMessage<QueryValidatorsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryValidatorsResponse, a, b);
  }
}

/**
 * QueryValidatorRequest is response type for the Query/Validator RPC method
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorRequest
 */
export class QueryValidatorRequest extends Message<QueryValidatorRequest> {
  /**
   * validator_addr defines the validator address to query for.
   *
   * @generated from field: string validator_addr = 1;
   */
  validatorAddr = '';

  constructor(data?: PartialMessage<QueryValidatorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.staking.v1beta1.QueryValidatorRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'validator_addr',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryValidatorRequest {
    return new QueryValidatorRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryValidatorRequest {
    return new QueryValidatorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryValidatorRequest {
    return new QueryValidatorRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: QueryValidatorRequest | PlainMessage<QueryValidatorRequest> | undefined,
    b: QueryValidatorRequest | PlainMessage<QueryValidatorRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryValidatorRequest, a, b);
  }
}

/**
 * QueryValidatorResponse is response type for the Query/Validator RPC method
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorResponse
 */
export class QueryValidatorResponse extends Message<QueryValidatorResponse> {
  /**
   * validator defines the validator info.
   *
   * @generated from field: cosmos.staking.v1beta1.Validator validator = 1;
   */
  validator?: Validator;

  constructor(data?: PartialMessage<QueryValidatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.staking.v1beta1.QueryValidatorResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'validator', kind: 'message', T: Validator },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryValidatorResponse {
    return new QueryValidatorResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryValidatorResponse {
    return new QueryValidatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryValidatorResponse {
    return new QueryValidatorResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryValidatorResponse
      | PlainMessage<QueryValidatorResponse>
      | undefined,
    b:
      | QueryValidatorResponse
      | PlainMessage<QueryValidatorResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryValidatorResponse, a, b);
  }
}

/**
 * QueryValidatorDelegationsRequest is request type for the
 * Query/ValidatorDelegations RPC method
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorDelegationsRequest
 */
export class QueryValidatorDelegationsRequest extends Message<QueryValidatorDelegationsRequest> {
  /**
   * validator_addr defines the validator address to query for.
   *
   * @generated from field: string validator_addr = 1;
   */
  validatorAddr = '';

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryValidatorDelegationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'cosmos.staking.v1beta1.QueryValidatorDelegationsRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'validator_addr',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 2, name: 'pagination', kind: 'message', T: PageRequest },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryValidatorDelegationsRequest {
    return new QueryValidatorDelegationsRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryValidatorDelegationsRequest {
    return new QueryValidatorDelegationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryValidatorDelegationsRequest {
    return new QueryValidatorDelegationsRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QueryValidatorDelegationsRequest
      | PlainMessage<QueryValidatorDelegationsRequest>
      | undefined,
    b:
      | QueryValidatorDelegationsRequest
      | PlainMessage<QueryValidatorDelegationsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryValidatorDelegationsRequest, a, b);
  }
}

/**
 * QueryValidatorDelegationsResponse is response type for the
 * Query/ValidatorDelegations RPC method
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorDelegationsResponse
 */
export class QueryValidatorDelegationsResponse extends Message<QueryValidatorDelegationsResponse> {
  /**
   * @generated from field: repeated cosmos.staking.v1beta1.DelegationResponse delegation_responses = 1;
   */
  delegationResponses: DelegationResponse[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryValidatorDelegationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'cosmos.staking.v1beta1.QueryValidatorDelegationsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'delegation_responses',
      kind: 'message',
      T: DelegationResponse,
      repeated: true,
    },
    { no: 2, name: 'pagination', kind: 'message', T: PageResponse },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryValidatorDelegationsResponse {
    return new QueryValidatorDelegationsResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryValidatorDelegationsResponse {
    return new QueryValidatorDelegationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryValidatorDelegationsResponse {
    return new QueryValidatorDelegationsResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QueryValidatorDelegationsResponse
      | PlainMessage<QueryValidatorDelegationsResponse>
      | undefined,
    b:
      | QueryValidatorDelegationsResponse
      | PlainMessage<QueryValidatorDelegationsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryValidatorDelegationsResponse, a, b);
  }
}

/**
 * QueryValidatorUnbondingDelegationsRequest is required type for the
 * Query/ValidatorUnbondingDelegations RPC method
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest
 */
export class QueryValidatorUnbondingDelegationsRequest extends Message<QueryValidatorUnbondingDelegationsRequest> {
  /**
   * validator_addr defines the validator address to query for.
   *
   * @generated from field: string validator_addr = 1;
   */
  validatorAddr = '';

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(
    data?: PartialMessage<QueryValidatorUnbondingDelegationsRequest>,
  ) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'validator_addr',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 2, name: 'pagination', kind: 'message', T: PageRequest },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryValidatorUnbondingDelegationsRequest {
    return new QueryValidatorUnbondingDelegationsRequest().fromBinary(
      bytes,
      options,
    );
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryValidatorUnbondingDelegationsRequest {
    return new QueryValidatorUnbondingDelegationsRequest().fromJson(
      jsonValue,
      options,
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryValidatorUnbondingDelegationsRequest {
    return new QueryValidatorUnbondingDelegationsRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QueryValidatorUnbondingDelegationsRequest
      | PlainMessage<QueryValidatorUnbondingDelegationsRequest>
      | undefined,
    b:
      | QueryValidatorUnbondingDelegationsRequest
      | PlainMessage<QueryValidatorUnbondingDelegationsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryValidatorUnbondingDelegationsRequest, a, b);
  }
}

/**
 * QueryValidatorUnbondingDelegationsResponse is response type for the
 * Query/ValidatorUnbondingDelegations RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse
 */
export class QueryValidatorUnbondingDelegationsResponse extends Message<QueryValidatorUnbondingDelegationsResponse> {
  /**
   * @generated from field: repeated cosmos.staking.v1beta1.UnbondingDelegation unbonding_responses = 1;
   */
  unbondingResponses: UnbondingDelegation[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(
    data?: PartialMessage<QueryValidatorUnbondingDelegationsResponse>,
  ) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'unbonding_responses',
      kind: 'message',
      T: UnbondingDelegation,
      repeated: true,
    },
    { no: 2, name: 'pagination', kind: 'message', T: PageResponse },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryValidatorUnbondingDelegationsResponse {
    return new QueryValidatorUnbondingDelegationsResponse().fromBinary(
      bytes,
      options,
    );
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryValidatorUnbondingDelegationsResponse {
    return new QueryValidatorUnbondingDelegationsResponse().fromJson(
      jsonValue,
      options,
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryValidatorUnbondingDelegationsResponse {
    return new QueryValidatorUnbondingDelegationsResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QueryValidatorUnbondingDelegationsResponse
      | PlainMessage<QueryValidatorUnbondingDelegationsResponse>
      | undefined,
    b:
      | QueryValidatorUnbondingDelegationsResponse
      | PlainMessage<QueryValidatorUnbondingDelegationsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryValidatorUnbondingDelegationsResponse, a, b);
  }
}

/**
 * QueryDelegationRequest is request type for the Query/Delegation RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegationRequest
 */
export class QueryDelegationRequest extends Message<QueryDelegationRequest> {
  /**
   * delegator_addr defines the delegator address to query for.
   *
   * @generated from field: string delegator_addr = 1;
   */
  delegatorAddr = '';

  /**
   * validator_addr defines the validator address to query for.
   *
   * @generated from field: string validator_addr = 2;
   */
  validatorAddr = '';

  constructor(data?: PartialMessage<QueryDelegationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.staking.v1beta1.QueryDelegationRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'delegator_addr',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 2,
      name: 'validator_addr',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryDelegationRequest {
    return new QueryDelegationRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryDelegationRequest {
    return new QueryDelegationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryDelegationRequest {
    return new QueryDelegationRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryDelegationRequest
      | PlainMessage<QueryDelegationRequest>
      | undefined,
    b:
      | QueryDelegationRequest
      | PlainMessage<QueryDelegationRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryDelegationRequest, a, b);
  }
}

/**
 * QueryDelegationResponse is response type for the Query/Delegation RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegationResponse
 */
export class QueryDelegationResponse extends Message<QueryDelegationResponse> {
  /**
   * delegation_responses defines the delegation info of a delegation.
   *
   * @generated from field: cosmos.staking.v1beta1.DelegationResponse delegation_response = 1;
   */
  delegationResponse?: DelegationResponse;

  constructor(data?: PartialMessage<QueryDelegationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.staking.v1beta1.QueryDelegationResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'delegation_response',
      kind: 'message',
      T: DelegationResponse,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryDelegationResponse {
    return new QueryDelegationResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryDelegationResponse {
    return new QueryDelegationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryDelegationResponse {
    return new QueryDelegationResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryDelegationResponse
      | PlainMessage<QueryDelegationResponse>
      | undefined,
    b:
      | QueryDelegationResponse
      | PlainMessage<QueryDelegationResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryDelegationResponse, a, b);
  }
}

/**
 * QueryUnbondingDelegationRequest is request type for the
 * Query/UnbondingDelegation RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryUnbondingDelegationRequest
 */
export class QueryUnbondingDelegationRequest extends Message<QueryUnbondingDelegationRequest> {
  /**
   * delegator_addr defines the delegator address to query for.
   *
   * @generated from field: string delegator_addr = 1;
   */
  delegatorAddr = '';

  /**
   * validator_addr defines the validator address to query for.
   *
   * @generated from field: string validator_addr = 2;
   */
  validatorAddr = '';

  constructor(data?: PartialMessage<QueryUnbondingDelegationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'cosmos.staking.v1beta1.QueryUnbondingDelegationRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'delegator_addr',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 2,
      name: 'validator_addr',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryUnbondingDelegationRequest {
    return new QueryUnbondingDelegationRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryUnbondingDelegationRequest {
    return new QueryUnbondingDelegationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryUnbondingDelegationRequest {
    return new QueryUnbondingDelegationRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QueryUnbondingDelegationRequest
      | PlainMessage<QueryUnbondingDelegationRequest>
      | undefined,
    b:
      | QueryUnbondingDelegationRequest
      | PlainMessage<QueryUnbondingDelegationRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryUnbondingDelegationRequest, a, b);
  }
}

/**
 * QueryDelegationResponse is response type for the Query/UnbondingDelegation
 * RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryUnbondingDelegationResponse
 */
export class QueryUnbondingDelegationResponse extends Message<QueryUnbondingDelegationResponse> {
  /**
   * unbond defines the unbonding information of a delegation.
   *
   * @generated from field: cosmos.staking.v1beta1.UnbondingDelegation unbond = 1;
   */
  unbond?: UnbondingDelegation;

  constructor(data?: PartialMessage<QueryUnbondingDelegationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'cosmos.staking.v1beta1.QueryUnbondingDelegationResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'unbond', kind: 'message', T: UnbondingDelegation },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryUnbondingDelegationResponse {
    return new QueryUnbondingDelegationResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryUnbondingDelegationResponse {
    return new QueryUnbondingDelegationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryUnbondingDelegationResponse {
    return new QueryUnbondingDelegationResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QueryUnbondingDelegationResponse
      | PlainMessage<QueryUnbondingDelegationResponse>
      | undefined,
    b:
      | QueryUnbondingDelegationResponse
      | PlainMessage<QueryUnbondingDelegationResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryUnbondingDelegationResponse, a, b);
  }
}

/**
 * QueryDelegatorDelegationsRequest is request type for the
 * Query/DelegatorDelegations RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest
 */
export class QueryDelegatorDelegationsRequest extends Message<QueryDelegatorDelegationsRequest> {
  /**
   * delegator_addr defines the delegator address to query for.
   *
   * @generated from field: string delegator_addr = 1;
   */
  delegatorAddr = '';

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryDelegatorDelegationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'delegator_addr',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 2, name: 'pagination', kind: 'message', T: PageRequest },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryDelegatorDelegationsRequest {
    return new QueryDelegatorDelegationsRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryDelegatorDelegationsRequest {
    return new QueryDelegatorDelegationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryDelegatorDelegationsRequest {
    return new QueryDelegatorDelegationsRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QueryDelegatorDelegationsRequest
      | PlainMessage<QueryDelegatorDelegationsRequest>
      | undefined,
    b:
      | QueryDelegatorDelegationsRequest
      | PlainMessage<QueryDelegatorDelegationsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryDelegatorDelegationsRequest, a, b);
  }
}

/**
 * QueryDelegatorDelegationsResponse is response type for the
 * Query/DelegatorDelegations RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse
 */
export class QueryDelegatorDelegationsResponse extends Message<QueryDelegatorDelegationsResponse> {
  /**
   * delegation_responses defines all the delegations' info of a delegator.
   *
   * @generated from field: repeated cosmos.staking.v1beta1.DelegationResponse delegation_responses = 1;
   */
  delegationResponses: DelegationResponse[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryDelegatorDelegationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'delegation_responses',
      kind: 'message',
      T: DelegationResponse,
      repeated: true,
    },
    { no: 2, name: 'pagination', kind: 'message', T: PageResponse },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryDelegatorDelegationsResponse {
    return new QueryDelegatorDelegationsResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryDelegatorDelegationsResponse {
    return new QueryDelegatorDelegationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryDelegatorDelegationsResponse {
    return new QueryDelegatorDelegationsResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QueryDelegatorDelegationsResponse
      | PlainMessage<QueryDelegatorDelegationsResponse>
      | undefined,
    b:
      | QueryDelegatorDelegationsResponse
      | PlainMessage<QueryDelegatorDelegationsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryDelegatorDelegationsResponse, a, b);
  }
}

/**
 * QueryDelegatorUnbondingDelegationsRequest is request type for the
 * Query/DelegatorUnbondingDelegations RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest
 */
export class QueryDelegatorUnbondingDelegationsRequest extends Message<QueryDelegatorUnbondingDelegationsRequest> {
  /**
   * delegator_addr defines the delegator address to query for.
   *
   * @generated from field: string delegator_addr = 1;
   */
  delegatorAddr = '';

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(
    data?: PartialMessage<QueryDelegatorUnbondingDelegationsRequest>,
  ) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'delegator_addr',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 2, name: 'pagination', kind: 'message', T: PageRequest },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryDelegatorUnbondingDelegationsRequest {
    return new QueryDelegatorUnbondingDelegationsRequest().fromBinary(
      bytes,
      options,
    );
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryDelegatorUnbondingDelegationsRequest {
    return new QueryDelegatorUnbondingDelegationsRequest().fromJson(
      jsonValue,
      options,
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryDelegatorUnbondingDelegationsRequest {
    return new QueryDelegatorUnbondingDelegationsRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QueryDelegatorUnbondingDelegationsRequest
      | PlainMessage<QueryDelegatorUnbondingDelegationsRequest>
      | undefined,
    b:
      | QueryDelegatorUnbondingDelegationsRequest
      | PlainMessage<QueryDelegatorUnbondingDelegationsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryDelegatorUnbondingDelegationsRequest, a, b);
  }
}

/**
 * QueryUnbondingDelegatorDelegationsResponse is response type for the
 * Query/UnbondingDelegatorDelegations RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse
 */
export class QueryDelegatorUnbondingDelegationsResponse extends Message<QueryDelegatorUnbondingDelegationsResponse> {
  /**
   * @generated from field: repeated cosmos.staking.v1beta1.UnbondingDelegation unbonding_responses = 1;
   */
  unbondingResponses: UnbondingDelegation[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(
    data?: PartialMessage<QueryDelegatorUnbondingDelegationsResponse>,
  ) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'unbonding_responses',
      kind: 'message',
      T: UnbondingDelegation,
      repeated: true,
    },
    { no: 2, name: 'pagination', kind: 'message', T: PageResponse },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryDelegatorUnbondingDelegationsResponse {
    return new QueryDelegatorUnbondingDelegationsResponse().fromBinary(
      bytes,
      options,
    );
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryDelegatorUnbondingDelegationsResponse {
    return new QueryDelegatorUnbondingDelegationsResponse().fromJson(
      jsonValue,
      options,
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryDelegatorUnbondingDelegationsResponse {
    return new QueryDelegatorUnbondingDelegationsResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QueryDelegatorUnbondingDelegationsResponse
      | PlainMessage<QueryDelegatorUnbondingDelegationsResponse>
      | undefined,
    b:
      | QueryDelegatorUnbondingDelegationsResponse
      | PlainMessage<QueryDelegatorUnbondingDelegationsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryDelegatorUnbondingDelegationsResponse, a, b);
  }
}

/**
 * QueryRedelegationsRequest is request type for the Query/Redelegations RPC
 * method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryRedelegationsRequest
 */
export class QueryRedelegationsRequest extends Message<QueryRedelegationsRequest> {
  /**
   * delegator_addr defines the delegator address to query for.
   *
   * @generated from field: string delegator_addr = 1;
   */
  delegatorAddr = '';

  /**
   * src_validator_addr defines the validator address to redelegate from.
   *
   * @generated from field: string src_validator_addr = 2;
   */
  srcValidatorAddr = '';

  /**
   * dst_validator_addr defines the validator address to redelegate to.
   *
   * @generated from field: string dst_validator_addr = 3;
   */
  dstValidatorAddr = '';

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 4;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryRedelegationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.staking.v1beta1.QueryRedelegationsRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'delegator_addr',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 2,
      name: 'src_validator_addr',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 3,
      name: 'dst_validator_addr',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 4, name: 'pagination', kind: 'message', T: PageRequest },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryRedelegationsRequest {
    return new QueryRedelegationsRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryRedelegationsRequest {
    return new QueryRedelegationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryRedelegationsRequest {
    return new QueryRedelegationsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryRedelegationsRequest
      | PlainMessage<QueryRedelegationsRequest>
      | undefined,
    b:
      | QueryRedelegationsRequest
      | PlainMessage<QueryRedelegationsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryRedelegationsRequest, a, b);
  }
}

/**
 * QueryRedelegationsResponse is response type for the Query/Redelegations RPC
 * method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryRedelegationsResponse
 */
export class QueryRedelegationsResponse extends Message<QueryRedelegationsResponse> {
  /**
   * @generated from field: repeated cosmos.staking.v1beta1.RedelegationResponse redelegation_responses = 1;
   */
  redelegationResponses: RedelegationResponse[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryRedelegationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'cosmos.staking.v1beta1.QueryRedelegationsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'redelegation_responses',
      kind: 'message',
      T: RedelegationResponse,
      repeated: true,
    },
    { no: 2, name: 'pagination', kind: 'message', T: PageResponse },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryRedelegationsResponse {
    return new QueryRedelegationsResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryRedelegationsResponse {
    return new QueryRedelegationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryRedelegationsResponse {
    return new QueryRedelegationsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryRedelegationsResponse
      | PlainMessage<QueryRedelegationsResponse>
      | undefined,
    b:
      | QueryRedelegationsResponse
      | PlainMessage<QueryRedelegationsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryRedelegationsResponse, a, b);
  }
}

/**
 * QueryDelegatorValidatorsRequest is request type for the
 * Query/DelegatorValidators RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest
 */
export class QueryDelegatorValidatorsRequest extends Message<QueryDelegatorValidatorsRequest> {
  /**
   * delegator_addr defines the delegator address to query for.
   *
   * @generated from field: string delegator_addr = 1;
   */
  delegatorAddr = '';

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryDelegatorValidatorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'delegator_addr',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 2, name: 'pagination', kind: 'message', T: PageRequest },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryDelegatorValidatorsRequest {
    return new QueryDelegatorValidatorsRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryDelegatorValidatorsRequest {
    return new QueryDelegatorValidatorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryDelegatorValidatorsRequest {
    return new QueryDelegatorValidatorsRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QueryDelegatorValidatorsRequest
      | PlainMessage<QueryDelegatorValidatorsRequest>
      | undefined,
    b:
      | QueryDelegatorValidatorsRequest
      | PlainMessage<QueryDelegatorValidatorsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryDelegatorValidatorsRequest, a, b);
  }
}

/**
 * QueryDelegatorValidatorsResponse is response type for the
 * Query/DelegatorValidators RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse
 */
export class QueryDelegatorValidatorsResponse extends Message<QueryDelegatorValidatorsResponse> {
  /**
   * validators defines the validators' info of a delegator.
   *
   * @generated from field: repeated cosmos.staking.v1beta1.Validator validators = 1;
   */
  validators: Validator[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryDelegatorValidatorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'validators',
      kind: 'message',
      T: Validator,
      repeated: true,
    },
    { no: 2, name: 'pagination', kind: 'message', T: PageResponse },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryDelegatorValidatorsResponse {
    return new QueryDelegatorValidatorsResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryDelegatorValidatorsResponse {
    return new QueryDelegatorValidatorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryDelegatorValidatorsResponse {
    return new QueryDelegatorValidatorsResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QueryDelegatorValidatorsResponse
      | PlainMessage<QueryDelegatorValidatorsResponse>
      | undefined,
    b:
      | QueryDelegatorValidatorsResponse
      | PlainMessage<QueryDelegatorValidatorsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryDelegatorValidatorsResponse, a, b);
  }
}

/**
 * QueryDelegatorValidatorRequest is request type for the
 * Query/DelegatorValidator RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorValidatorRequest
 */
export class QueryDelegatorValidatorRequest extends Message<QueryDelegatorValidatorRequest> {
  /**
   * delegator_addr defines the delegator address to query for.
   *
   * @generated from field: string delegator_addr = 1;
   */
  delegatorAddr = '';

  /**
   * validator_addr defines the validator address to query for.
   *
   * @generated from field: string validator_addr = 2;
   */
  validatorAddr = '';

  constructor(data?: PartialMessage<QueryDelegatorValidatorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'cosmos.staking.v1beta1.QueryDelegatorValidatorRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'delegator_addr',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 2,
      name: 'validator_addr',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryDelegatorValidatorRequest {
    return new QueryDelegatorValidatorRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryDelegatorValidatorRequest {
    return new QueryDelegatorValidatorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryDelegatorValidatorRequest {
    return new QueryDelegatorValidatorRequest().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QueryDelegatorValidatorRequest
      | PlainMessage<QueryDelegatorValidatorRequest>
      | undefined,
    b:
      | QueryDelegatorValidatorRequest
      | PlainMessage<QueryDelegatorValidatorRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryDelegatorValidatorRequest, a, b);
  }
}

/**
 * QueryDelegatorValidatorResponse response type for the
 * Query/DelegatorValidator RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorValidatorResponse
 */
export class QueryDelegatorValidatorResponse extends Message<QueryDelegatorValidatorResponse> {
  /**
   * validator defines the validator info.
   *
   * @generated from field: cosmos.staking.v1beta1.Validator validator = 1;
   */
  validator?: Validator;

  constructor(data?: PartialMessage<QueryDelegatorValidatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'cosmos.staking.v1beta1.QueryDelegatorValidatorResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'validator', kind: 'message', T: Validator },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryDelegatorValidatorResponse {
    return new QueryDelegatorValidatorResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryDelegatorValidatorResponse {
    return new QueryDelegatorValidatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryDelegatorValidatorResponse {
    return new QueryDelegatorValidatorResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QueryDelegatorValidatorResponse
      | PlainMessage<QueryDelegatorValidatorResponse>
      | undefined,
    b:
      | QueryDelegatorValidatorResponse
      | PlainMessage<QueryDelegatorValidatorResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryDelegatorValidatorResponse, a, b);
  }
}

/**
 * QueryHistoricalInfoRequest is request type for the Query/HistoricalInfo RPC
 * method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryHistoricalInfoRequest
 */
export class QueryHistoricalInfoRequest extends Message<QueryHistoricalInfoRequest> {
  /**
   * height defines at which height to query the historical info.
   *
   * @generated from field: int64 height = 1;
   */
  height = protoInt64.zero;

  constructor(data?: PartialMessage<QueryHistoricalInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'cosmos.staking.v1beta1.QueryHistoricalInfoRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'height', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryHistoricalInfoRequest {
    return new QueryHistoricalInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryHistoricalInfoRequest {
    return new QueryHistoricalInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryHistoricalInfoRequest {
    return new QueryHistoricalInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryHistoricalInfoRequest
      | PlainMessage<QueryHistoricalInfoRequest>
      | undefined,
    b:
      | QueryHistoricalInfoRequest
      | PlainMessage<QueryHistoricalInfoRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryHistoricalInfoRequest, a, b);
  }
}

/**
 * QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo RPC
 * method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryHistoricalInfoResponse
 */
export class QueryHistoricalInfoResponse extends Message<QueryHistoricalInfoResponse> {
  /**
   * hist defines the historical info at the given height.
   *
   * @generated from field: cosmos.staking.v1beta1.HistoricalInfo hist = 1;
   */
  hist?: HistoricalInfo;

  constructor(data?: PartialMessage<QueryHistoricalInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'cosmos.staking.v1beta1.QueryHistoricalInfoResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'hist', kind: 'message', T: HistoricalInfo },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryHistoricalInfoResponse {
    return new QueryHistoricalInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryHistoricalInfoResponse {
    return new QueryHistoricalInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryHistoricalInfoResponse {
    return new QueryHistoricalInfoResponse().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | QueryHistoricalInfoResponse
      | PlainMessage<QueryHistoricalInfoResponse>
      | undefined,
    b:
      | QueryHistoricalInfoResponse
      | PlainMessage<QueryHistoricalInfoResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryHistoricalInfoResponse, a, b);
  }
}

/**
 * QueryPoolRequest is request type for the Query/Pool RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryPoolRequest
 */
export class QueryPoolRequest extends Message<QueryPoolRequest> {
  constructor(data?: PartialMessage<QueryPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.staking.v1beta1.QueryPoolRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryPoolRequest {
    return new QueryPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryPoolRequest {
    return new QueryPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryPoolRequest {
    return new QueryPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: QueryPoolRequest | PlainMessage<QueryPoolRequest> | undefined,
    b: QueryPoolRequest | PlainMessage<QueryPoolRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryPoolRequest, a, b);
  }
}

/**
 * QueryPoolResponse is response type for the Query/Pool RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryPoolResponse
 */
export class QueryPoolResponse extends Message<QueryPoolResponse> {
  /**
   * pool defines the pool info.
   *
   * @generated from field: cosmos.staking.v1beta1.Pool pool = 1;
   */
  pool?: Pool;

  constructor(data?: PartialMessage<QueryPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.staking.v1beta1.QueryPoolResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'pool', kind: 'message', T: Pool },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryPoolResponse {
    return new QueryPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryPoolResponse {
    return new QueryPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryPoolResponse {
    return new QueryPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: QueryPoolResponse | PlainMessage<QueryPoolResponse> | undefined,
    b: QueryPoolResponse | PlainMessage<QueryPoolResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QueryPoolResponse, a, b);
  }
}

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.staking.v1beta1.QueryParamsRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined,
    b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: cosmos.staking.v1beta1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.staking.v1beta1.QueryParamsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'params', kind: 'message', T: Params },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined,
    b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}
