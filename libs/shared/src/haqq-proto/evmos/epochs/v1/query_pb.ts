// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file evmos/epochs/v1/query.proto (package evmos.epochs.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3, protoInt64 } from '@bufbuild/protobuf';
import {
  PageRequest,
  PageResponse,
} from '../../../cosmos/base/query/v1beta1/pagination_pb';
import { EpochInfo } from './genesis_pb';

/**
 * QueryEpochsInfoRequest is the request type for the Query/EpochInfos RPC
 * method.
 *
 * @generated from message evmos.epochs.v1.QueryEpochsInfoRequest
 */
export class QueryEpochsInfoRequest extends Message<QueryEpochsInfoRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryEpochsInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'evmos.epochs.v1.QueryEpochsInfoRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'pagination', kind: 'message', T: PageRequest },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryEpochsInfoRequest {
    return new QueryEpochsInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryEpochsInfoRequest {
    return new QueryEpochsInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryEpochsInfoRequest {
    return new QueryEpochsInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryEpochsInfoRequest
      | PlainMessage<QueryEpochsInfoRequest>
      | undefined,
    b:
      | QueryEpochsInfoRequest
      | PlainMessage<QueryEpochsInfoRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryEpochsInfoRequest, a, b);
  }
}

/**
 * QueryEpochsInfoResponse is the response type for the Query/EpochInfos RPC
 * method.
 *
 * @generated from message evmos.epochs.v1.QueryEpochsInfoResponse
 */
export class QueryEpochsInfoResponse extends Message<QueryEpochsInfoResponse> {
  /**
   * epochs is a slice of all EpochInfos
   *
   * @generated from field: repeated evmos.epochs.v1.EpochInfo epochs = 1;
   */
  epochs: EpochInfo[] = [];

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryEpochsInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'evmos.epochs.v1.QueryEpochsInfoResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'epochs', kind: 'message', T: EpochInfo, repeated: true },
    { no: 2, name: 'pagination', kind: 'message', T: PageResponse },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryEpochsInfoResponse {
    return new QueryEpochsInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryEpochsInfoResponse {
    return new QueryEpochsInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryEpochsInfoResponse {
    return new QueryEpochsInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryEpochsInfoResponse
      | PlainMessage<QueryEpochsInfoResponse>
      | undefined,
    b:
      | QueryEpochsInfoResponse
      | PlainMessage<QueryEpochsInfoResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryEpochsInfoResponse, a, b);
  }
}

/**
 * QueryCurrentEpochRequest is the request type for the Query/EpochInfos RPC
 * method.
 *
 * @generated from message evmos.epochs.v1.QueryCurrentEpochRequest
 */
export class QueryCurrentEpochRequest extends Message<QueryCurrentEpochRequest> {
  /**
   * identifier of the current epoch
   *
   * @generated from field: string identifier = 1;
   */
  identifier = '';

  constructor(data?: PartialMessage<QueryCurrentEpochRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'evmos.epochs.v1.QueryCurrentEpochRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'identifier', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryCurrentEpochRequest {
    return new QueryCurrentEpochRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryCurrentEpochRequest {
    return new QueryCurrentEpochRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryCurrentEpochRequest {
    return new QueryCurrentEpochRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryCurrentEpochRequest
      | PlainMessage<QueryCurrentEpochRequest>
      | undefined,
    b:
      | QueryCurrentEpochRequest
      | PlainMessage<QueryCurrentEpochRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryCurrentEpochRequest, a, b);
  }
}

/**
 * QueryCurrentEpochResponse is the response type for the Query/EpochInfos RPC
 * method.
 *
 * @generated from message evmos.epochs.v1.QueryCurrentEpochResponse
 */
export class QueryCurrentEpochResponse extends Message<QueryCurrentEpochResponse> {
  /**
   * current_epoch is the number of the current epoch
   *
   * @generated from field: int64 current_epoch = 1;
   */
  currentEpoch = protoInt64.zero;

  constructor(data?: PartialMessage<QueryCurrentEpochResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'evmos.epochs.v1.QueryCurrentEpochResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'current_epoch',
      kind: 'scalar',
      T: 3 /* ScalarType.INT64 */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryCurrentEpochResponse {
    return new QueryCurrentEpochResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryCurrentEpochResponse {
    return new QueryCurrentEpochResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryCurrentEpochResponse {
    return new QueryCurrentEpochResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryCurrentEpochResponse
      | PlainMessage<QueryCurrentEpochResponse>
      | undefined,
    b:
      | QueryCurrentEpochResponse
      | PlainMessage<QueryCurrentEpochResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryCurrentEpochResponse, a, b);
  }
}
