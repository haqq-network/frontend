// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file haqq/liquidvesting/v1/query.proto (package haqq.liquidvesting.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';
import { Denom } from './liquidvesting_pb';
import {
  PageRequest,
  PageResponse,
} from '../../../cosmos/base/query/v1beta1/pagination_pb';

/**
 * QueryDenomRequest is request fo Denom rpc method
 *
 * @generated from message haqq.liquidvesting.v1.QueryDenomRequest
 */
export class QueryDenomRequest extends Message<QueryDenomRequest> {
  /**
   * denom is liquidated vesting token
   *
   * @generated from field: string denom = 1;
   */
  denom = '';

  constructor(data?: PartialMessage<QueryDenomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'haqq.liquidvesting.v1.QueryDenomRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'denom', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryDenomRequest {
    return new QueryDenomRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryDenomRequest {
    return new QueryDenomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryDenomRequest {
    return new QueryDenomRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: QueryDenomRequest | PlainMessage<QueryDenomRequest> | undefined,
    b: QueryDenomRequest | PlainMessage<QueryDenomRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryDenomRequest, a, b);
  }
}

/**
 * QueryDenomResponse is response for Denom rpc method
 *
 * @generated from message haqq.liquidvesting.v1.QueryDenomResponse
 */
export class QueryDenomResponse extends Message<QueryDenomResponse> {
  /**
   * denom is liquidated vesting token
   *
   * @generated from field: haqq.liquidvesting.v1.Denom denom = 1;
   */
  denom?: Denom;

  constructor(data?: PartialMessage<QueryDenomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'haqq.liquidvesting.v1.QueryDenomResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'denom', kind: 'message', T: Denom },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryDenomResponse {
    return new QueryDenomResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryDenomResponse {
    return new QueryDenomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryDenomResponse {
    return new QueryDenomResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: QueryDenomResponse | PlainMessage<QueryDenomResponse> | undefined,
    b: QueryDenomResponse | PlainMessage<QueryDenomResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QueryDenomResponse, a, b);
  }
}

/**
 * QueryDenomsRequest is request for Denoms rpc method
 *
 * @generated from message haqq.liquidvesting.v1.QueryDenomsRequest
 */
export class QueryDenomsRequest extends Message<QueryDenomsRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryDenomsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'haqq.liquidvesting.v1.QueryDenomsRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'pagination', kind: 'message', T: PageRequest },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryDenomsRequest {
    return new QueryDenomsRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryDenomsRequest {
    return new QueryDenomsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryDenomsRequest {
    return new QueryDenomsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: QueryDenomsRequest | PlainMessage<QueryDenomsRequest> | undefined,
    b: QueryDenomsRequest | PlainMessage<QueryDenomsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryDenomsRequest, a, b);
  }
}

/**
 * QueryDenomsResponse is response for Denoms rpc method
 *
 * @generated from message haqq.liquidvesting.v1.QueryDenomsResponse
 */
export class QueryDenomsResponse extends Message<QueryDenomsResponse> {
  /**
   * denoms are liquidated vesting tokens
   *
   * @generated from field: repeated haqq.liquidvesting.v1.Denom denoms = 1;
   */
  denoms: Denom[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryDenomsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'haqq.liquidvesting.v1.QueryDenomsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'denoms', kind: 'message', T: Denom, repeated: true },
    { no: 2, name: 'pagination', kind: 'message', T: PageResponse },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryDenomsResponse {
    return new QueryDenomsResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryDenomsResponse {
    return new QueryDenomsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryDenomsResponse {
    return new QueryDenomsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: QueryDenomsResponse | PlainMessage<QueryDenomsResponse> | undefined,
    b: QueryDenomsResponse | PlainMessage<QueryDenomsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QueryDenomsResponse, a, b);
  }
}
