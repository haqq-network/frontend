// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file haqq/liquidvesting/v1/liquidvesting.proto (package haqq.liquidvesting.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3, Timestamp } from '@bufbuild/protobuf';
import { Period } from '../../../cosmos/vesting/v1beta1/vesting_pb';

/**
 * Denom represents liquid token bonded to some specific vesting schedule
 *
 * @generated from message haqq.liquidvesting.v1.Denom
 */
export class Denom extends Message<Denom> {
  /**
   * base_denom main identifier for the denom, used to query it from store.
   *
   * @generated from field: string base_denom = 1;
   */
  baseDenom = '';

  /**
   * display_denom identifier used for display name for broad audience
   *
   * @generated from field: string display_denom = 2;
   */
  displayDenom = '';

  /**
   * original_denom which liquid denom derived from
   *
   * @generated from field: string original_denom = 3;
   */
  originalDenom = '';

  /**
   * start date
   *
   * @generated from field: google.protobuf.Timestamp start_time = 4;
   */
  startTime?: Timestamp;

  /**
   * end_date
   *
   * @generated from field: google.protobuf.Timestamp end_time = 5;
   */
  endTime?: Timestamp;

  /**
   * lockup periods
   *
   * @generated from field: repeated cosmos.vesting.v1beta1.Period lockup_periods = 6;
   */
  lockupPeriods: Period[] = [];

  constructor(data?: PartialMessage<Denom>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'haqq.liquidvesting.v1.Denom';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'base_denom', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'display_denom',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 3,
      name: 'original_denom',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 4, name: 'start_time', kind: 'message', T: Timestamp },
    { no: 5, name: 'end_time', kind: 'message', T: Timestamp },
    {
      no: 6,
      name: 'lockup_periods',
      kind: 'message',
      T: Period,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Denom {
    return new Denom().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Denom {
    return new Denom().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Denom {
    return new Denom().fromJsonString(jsonString, options);
  }

  static equals(
    a: Denom | PlainMessage<Denom> | undefined,
    b: Denom | PlainMessage<Denom> | undefined,
  ): boolean {
    return proto3.util.equals(Denom, a, b);
  }
}
