// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file haqq/liquidvesting/v1/genesis.proto (package haqq.liquidvesting.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3, protoInt64 } from '@bufbuild/protobuf';
import { Denom } from './liquidvesting_pb';

/**
 * GenesisState defines the liquidvesting module's genesis state.
 *
 * @generated from message haqq.liquidvesting.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * params defines all the paramaters of the module.
   *
   * @generated from field: haqq.liquidvesting.v1.Params params = 1;
   */
  params?: Params;

  /**
   * @generated from field: uint64 denom_counter = 2;
   */
  denomCounter = protoInt64.zero;

  /**
   * @generated from field: repeated haqq.liquidvesting.v1.Denom denoms = 3;
   */
  denoms: Denom[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'haqq.liquidvesting.v1.GenesisState';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'params', kind: 'message', T: Params },
    {
      no: 2,
      name: 'denom_counter',
      kind: 'scalar',
      T: 4 /* ScalarType.UINT64 */,
    },
    { no: 3, name: 'denoms', kind: 'message', T: Denom, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(
    a: GenesisState | PlainMessage<GenesisState> | undefined,
    b: GenesisState | PlainMessage<GenesisState> | undefined,
  ): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * Params holds parameters for the liquidvesting module.
 *
 * @generated from message haqq.liquidvesting.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * @generated from field: string minimum_liquidation_amount = 1;
   */
  minimumLiquidationAmount = '';

  /**
   * parameter to enable liquid vesting
   *
   * @generated from field: bool enable_liquid_vesting = 2;
   */
  enableLiquidVesting = false;

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'haqq.liquidvesting.v1.Params';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'minimum_liquidation_amount',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 2,
      name: 'enable_liquid_vesting',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(
    a: Params | PlainMessage<Params> | undefined,
    b: Params | PlainMessage<Params> | undefined,
  ): boolean {
    return proto3.util.equals(Params, a, b);
  }
}
