// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file haqq/ucdao/v1/query.proto (package haqq.ucdao.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';
import { Coin } from '../../../cosmos/base/v1beta1/coin_pb';
import {
  PageRequest,
  PageResponse,
} from '../../../cosmos/base/query/v1beta1/pagination_pb';
import { Params } from './ucdao_pb';

/**
 * QueryBalanceRequest is the request type for the Query/Balance RPC method.
 *
 * @generated from message haqq.ucdao.v1.QueryBalanceRequest
 */
export class QueryBalanceRequest extends Message<QueryBalanceRequest> {
  /**
   * address is the address to query balances for.
   *
   * @generated from field: string address = 1;
   */
  address = '';

  /**
   * denom is the coin denom to query balances for.
   *
   * @generated from field: string denom = 2;
   */
  denom = '';

  constructor(data?: PartialMessage<QueryBalanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'haqq.ucdao.v1.QueryBalanceRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'address', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'denom', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryBalanceRequest {
    return new QueryBalanceRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryBalanceRequest {
    return new QueryBalanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryBalanceRequest {
    return new QueryBalanceRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: QueryBalanceRequest | PlainMessage<QueryBalanceRequest> | undefined,
    b: QueryBalanceRequest | PlainMessage<QueryBalanceRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryBalanceRequest, a, b);
  }
}

/**
 * QueryBalanceResponse is the response type for the Query/Balance RPC method.
 *
 * @generated from message haqq.ucdao.v1.QueryBalanceResponse
 */
export class QueryBalanceResponse extends Message<QueryBalanceResponse> {
  /**
   * balance is the balance of the coin.
   *
   * @generated from field: cosmos.base.v1beta1.Coin balance = 1;
   */
  balance?: Coin;

  constructor(data?: PartialMessage<QueryBalanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'haqq.ucdao.v1.QueryBalanceResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'balance', kind: 'message', T: Coin },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryBalanceResponse {
    return new QueryBalanceResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryBalanceResponse {
    return new QueryBalanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryBalanceResponse {
    return new QueryBalanceResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: QueryBalanceResponse | PlainMessage<QueryBalanceResponse> | undefined,
    b: QueryBalanceResponse | PlainMessage<QueryBalanceResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QueryBalanceResponse, a, b);
  }
}

/**
 * QueryBalanceRequest is the request type for the Query/AllBalances RPC method.
 *
 * @generated from message haqq.ucdao.v1.QueryAllBalancesRequest
 */
export class QueryAllBalancesRequest extends Message<QueryAllBalancesRequest> {
  /**
   * address is the address to query balances for.
   *
   * @generated from field: string address = 1;
   */
  address = '';

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllBalancesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'haqq.ucdao.v1.QueryAllBalancesRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'address', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'pagination', kind: 'message', T: PageRequest },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryAllBalancesRequest {
    return new QueryAllBalancesRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryAllBalancesRequest {
    return new QueryAllBalancesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryAllBalancesRequest {
    return new QueryAllBalancesRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryAllBalancesRequest
      | PlainMessage<QueryAllBalancesRequest>
      | undefined,
    b:
      | QueryAllBalancesRequest
      | PlainMessage<QueryAllBalancesRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryAllBalancesRequest, a, b);
  }
}

/**
 * QueryAllBalancesResponse is the response type for the Query/AllBalances RPC
 * method.
 *
 * @generated from message haqq.ucdao.v1.QueryAllBalancesResponse
 */
export class QueryAllBalancesResponse extends Message<QueryAllBalancesResponse> {
  /**
   * balances is the balances of all the coins.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin balances = 1;
   */
  balances: Coin[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllBalancesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'haqq.ucdao.v1.QueryAllBalancesResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'balances', kind: 'message', T: Coin, repeated: true },
    { no: 2, name: 'pagination', kind: 'message', T: PageResponse },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryAllBalancesResponse {
    return new QueryAllBalancesResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryAllBalancesResponse {
    return new QueryAllBalancesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryAllBalancesResponse {
    return new QueryAllBalancesResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryAllBalancesResponse
      | PlainMessage<QueryAllBalancesResponse>
      | undefined,
    b:
      | QueryAllBalancesResponse
      | PlainMessage<QueryAllBalancesResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryAllBalancesResponse, a, b);
  }
}

/**
 * QueryTotalBalanceRequest is the request type for the Query/TotalBalance RPC
 * method.
 *
 * @generated from message haqq.ucdao.v1.QueryTotalBalanceRequest
 */
export class QueryTotalBalanceRequest extends Message<QueryTotalBalanceRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * Since: cosmos-sdk 0.43
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryTotalBalanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'haqq.ucdao.v1.QueryTotalBalanceRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'pagination', kind: 'message', T: PageRequest },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryTotalBalanceRequest {
    return new QueryTotalBalanceRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryTotalBalanceRequest {
    return new QueryTotalBalanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryTotalBalanceRequest {
    return new QueryTotalBalanceRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryTotalBalanceRequest
      | PlainMessage<QueryTotalBalanceRequest>
      | undefined,
    b:
      | QueryTotalBalanceRequest
      | PlainMessage<QueryTotalBalanceRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryTotalBalanceRequest, a, b);
  }
}

/**
 * QueryTotalBalanceResponse is the response type for the Query/TotalBalance RPC
 * method
 *
 * @generated from message haqq.ucdao.v1.QueryTotalBalanceResponse
 */
export class QueryTotalBalanceResponse extends Message<QueryTotalBalanceResponse> {
  /**
   * supply is the supply of the coins
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin total_balance = 1;
   */
  totalBalance: Coin[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * Since: cosmos-sdk 0.43
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryTotalBalanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'haqq.ucdao.v1.QueryTotalBalanceResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'total_balance', kind: 'message', T: Coin, repeated: true },
    { no: 2, name: 'pagination', kind: 'message', T: PageResponse },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryTotalBalanceResponse {
    return new QueryTotalBalanceResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryTotalBalanceResponse {
    return new QueryTotalBalanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryTotalBalanceResponse {
    return new QueryTotalBalanceResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | QueryTotalBalanceResponse
      | PlainMessage<QueryTotalBalanceResponse>
      | undefined,
    b:
      | QueryTotalBalanceResponse
      | PlainMessage<QueryTotalBalanceResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryTotalBalanceResponse, a, b);
  }
}

/**
 * QueryParamsRequest defines the request type for querying x/ucdao parameters.
 *
 * @generated from message haqq.ucdao.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'haqq.ucdao.v1.QueryParamsRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined,
    b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse defines the response type for querying x/ucdao parameters.
 *
 * @generated from message haqq.ucdao.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * @generated from field: haqq.ucdao.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'haqq.ucdao.v1.QueryParamsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'params', kind: 'message', T: Params },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined,
    b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}
