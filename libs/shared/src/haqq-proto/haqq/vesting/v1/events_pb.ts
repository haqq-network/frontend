// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file haqq/vesting/v1/events.proto (package haqq.vesting.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';

/**
 * EventCreateClawbackVestingAccount defines the event type
 * for creating a clawback vesting account
 *
 * @generated from message haqq.vesting.v1.EventCreateClawbackVestingAccount
 */
export class EventCreateClawbackVestingAccount extends Message<EventCreateClawbackVestingAccount> {
  /**
   * sender is the address of the sender
   *
   * @generated from field: string sender = 1;
   */
  sender = '';

  /**
   * coins to be vested
   *
   * @generated from field: string coins = 2;
   */
  coins = '';

  /**
   * start_time is the time when the coins start to vest
   *
   * @generated from field: string start_time = 3;
   */
  startTime = '';

  /**
   * merge
   *
   * @generated from field: string merge = 4;
   */
  merge = '';

  /**
   * account address of recipient
   *
   * @generated from field: string account = 5;
   */
  account = '';

  constructor(data?: PartialMessage<EventCreateClawbackVestingAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName =
    'haqq.vesting.v1.EventCreateClawbackVestingAccount';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'sender', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'coins', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'start_time', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'merge', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'account', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): EventCreateClawbackVestingAccount {
    return new EventCreateClawbackVestingAccount().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): EventCreateClawbackVestingAccount {
    return new EventCreateClawbackVestingAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): EventCreateClawbackVestingAccount {
    return new EventCreateClawbackVestingAccount().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | EventCreateClawbackVestingAccount
      | PlainMessage<EventCreateClawbackVestingAccount>
      | undefined,
    b:
      | EventCreateClawbackVestingAccount
      | PlainMessage<EventCreateClawbackVestingAccount>
      | undefined,
  ): boolean {
    return proto3.util.equals(EventCreateClawbackVestingAccount, a, b);
  }
}

/**
 * EventClawback defines the event type for clawback
 *
 * @generated from message haqq.vesting.v1.EventClawback
 */
export class EventClawback extends Message<EventClawback> {
  /**
   * funder is the address of the funder
   *
   * @generated from field: string funder = 1;
   */
  funder = '';

  /**
   * account is the address of the account
   *
   * @generated from field: string account = 2;
   */
  account = '';

  /**
   * destination is the address of the destination
   *
   * @generated from field: string destination = 3;
   */
  destination = '';

  constructor(data?: PartialMessage<EventClawback>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'haqq.vesting.v1.EventClawback';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'funder', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'account', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 3,
      name: 'destination',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): EventClawback {
    return new EventClawback().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): EventClawback {
    return new EventClawback().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): EventClawback {
    return new EventClawback().fromJsonString(jsonString, options);
  }

  static equals(
    a: EventClawback | PlainMessage<EventClawback> | undefined,
    b: EventClawback | PlainMessage<EventClawback> | undefined,
  ): boolean {
    return proto3.util.equals(EventClawback, a, b);
  }
}

/**
 * EventUpdateVestingFunder defines the event type for updating the vesting
 * funder
 *
 * @generated from message haqq.vesting.v1.EventUpdateVestingFunder
 */
export class EventUpdateVestingFunder extends Message<EventUpdateVestingFunder> {
  /**
   * funder is the address of the funder
   *
   * @generated from field: string funder = 1;
   */
  funder = '';

  /**
   * account is the address of the account
   *
   * @generated from field: string account = 2;
   */
  account = '';

  /**
   * new_funder is the address of the new funder
   *
   * @generated from field: string new_funder = 3;
   */
  newFunder = '';

  constructor(data?: PartialMessage<EventUpdateVestingFunder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'haqq.vesting.v1.EventUpdateVestingFunder';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'funder', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'account', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'new_funder', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): EventUpdateVestingFunder {
    return new EventUpdateVestingFunder().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): EventUpdateVestingFunder {
    return new EventUpdateVestingFunder().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): EventUpdateVestingFunder {
    return new EventUpdateVestingFunder().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | EventUpdateVestingFunder
      | PlainMessage<EventUpdateVestingFunder>
      | undefined,
    b:
      | EventUpdateVestingFunder
      | PlainMessage<EventUpdateVestingFunder>
      | undefined,
  ): boolean {
    return proto3.util.equals(EventUpdateVestingFunder, a, b);
  }
}
