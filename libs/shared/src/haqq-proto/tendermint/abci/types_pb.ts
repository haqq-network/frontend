// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file tendermint/abci/types.proto (package tendermint.abci, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { ConsensusParams } from "../types/params_pb.js";
import { Header } from "../types/types_pb.js";
import { ProofOps } from "../crypto/proof_pb.js";
import { PublicKey } from "../crypto/keys_pb.js";

/**
 * @generated from enum tendermint.abci.CheckTxType
 */
export enum CheckTxType {
  /**
   * @generated from enum value: NEW = 0;
   */
  NEW = 0,

  /**
   * @generated from enum value: RECHECK = 1;
   */
  RECHECK = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(CheckTxType)
proto3.util.setEnumType(CheckTxType, "tendermint.abci.CheckTxType", [
  { no: 0, name: "NEW" },
  { no: 1, name: "RECHECK" },
]);

/**
 * @generated from enum tendermint.abci.MisbehaviorType
 */
export enum MisbehaviorType {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: DUPLICATE_VOTE = 1;
   */
  DUPLICATE_VOTE = 1,

  /**
   * @generated from enum value: LIGHT_CLIENT_ATTACK = 2;
   */
  LIGHT_CLIENT_ATTACK = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(MisbehaviorType)
proto3.util.setEnumType(MisbehaviorType, "tendermint.abci.MisbehaviorType", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "DUPLICATE_VOTE" },
  { no: 2, name: "LIGHT_CLIENT_ATTACK" },
]);

/**
 * @generated from message tendermint.abci.Request
 */
export class Request extends Message<Request> {
  /**
   * @generated from oneof tendermint.abci.Request.value
   */
  value: {
    /**
     * @generated from field: tendermint.abci.RequestEcho echo = 1;
     */
    value: RequestEcho;
    case: "echo";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestFlush flush = 2;
     */
    value: RequestFlush;
    case: "flush";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestInfo info = 3;
     */
    value: RequestInfo;
    case: "info";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestInitChain init_chain = 5;
     */
    value: RequestInitChain;
    case: "initChain";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestQuery query = 6;
     */
    value: RequestQuery;
    case: "query";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestBeginBlock begin_block = 7;
     */
    value: RequestBeginBlock;
    case: "beginBlock";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestCheckTx check_tx = 8;
     */
    value: RequestCheckTx;
    case: "checkTx";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestDeliverTx deliver_tx = 9;
     */
    value: RequestDeliverTx;
    case: "deliverTx";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestEndBlock end_block = 10;
     */
    value: RequestEndBlock;
    case: "endBlock";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestCommit commit = 11;
     */
    value: RequestCommit;
    case: "commit";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestListSnapshots list_snapshots = 12;
     */
    value: RequestListSnapshots;
    case: "listSnapshots";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestOfferSnapshot offer_snapshot = 13;
     */
    value: RequestOfferSnapshot;
    case: "offerSnapshot";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestLoadSnapshotChunk load_snapshot_chunk = 14;
     */
    value: RequestLoadSnapshotChunk;
    case: "loadSnapshotChunk";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestApplySnapshotChunk apply_snapshot_chunk = 15;
     */
    value: RequestApplySnapshotChunk;
    case: "applySnapshotChunk";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestPrepareProposal prepare_proposal = 16;
     */
    value: RequestPrepareProposal;
    case: "prepareProposal";
  } | {
    /**
     * @generated from field: tendermint.abci.RequestProcessProposal process_proposal = 17;
     */
    value: RequestProcessProposal;
    case: "processProposal";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Request>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.Request";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "echo", kind: "message", T: RequestEcho, oneof: "value" },
    { no: 2, name: "flush", kind: "message", T: RequestFlush, oneof: "value" },
    { no: 3, name: "info", kind: "message", T: RequestInfo, oneof: "value" },
    { no: 5, name: "init_chain", kind: "message", T: RequestInitChain, oneof: "value" },
    { no: 6, name: "query", kind: "message", T: RequestQuery, oneof: "value" },
    { no: 7, name: "begin_block", kind: "message", T: RequestBeginBlock, oneof: "value" },
    { no: 8, name: "check_tx", kind: "message", T: RequestCheckTx, oneof: "value" },
    { no: 9, name: "deliver_tx", kind: "message", T: RequestDeliverTx, oneof: "value" },
    { no: 10, name: "end_block", kind: "message", T: RequestEndBlock, oneof: "value" },
    { no: 11, name: "commit", kind: "message", T: RequestCommit, oneof: "value" },
    { no: 12, name: "list_snapshots", kind: "message", T: RequestListSnapshots, oneof: "value" },
    { no: 13, name: "offer_snapshot", kind: "message", T: RequestOfferSnapshot, oneof: "value" },
    { no: 14, name: "load_snapshot_chunk", kind: "message", T: RequestLoadSnapshotChunk, oneof: "value" },
    { no: 15, name: "apply_snapshot_chunk", kind: "message", T: RequestApplySnapshotChunk, oneof: "value" },
    { no: 16, name: "prepare_proposal", kind: "message", T: RequestPrepareProposal, oneof: "value" },
    { no: 17, name: "process_proposal", kind: "message", T: RequestProcessProposal, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Request {
    return new Request().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Request {
    return new Request().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Request {
    return new Request().fromJsonString(jsonString, options);
  }

  static equals(a: Request | PlainMessage<Request> | undefined, b: Request | PlainMessage<Request> | undefined): boolean {
    return proto3.util.equals(Request, a, b);
  }
}

/**
 * @generated from message tendermint.abci.RequestEcho
 */
export class RequestEcho extends Message<RequestEcho> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<RequestEcho>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.RequestEcho";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestEcho {
    return new RequestEcho().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestEcho {
    return new RequestEcho().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestEcho {
    return new RequestEcho().fromJsonString(jsonString, options);
  }

  static equals(a: RequestEcho | PlainMessage<RequestEcho> | undefined, b: RequestEcho | PlainMessage<RequestEcho> | undefined): boolean {
    return proto3.util.equals(RequestEcho, a, b);
  }
}

/**
 * @generated from message tendermint.abci.RequestFlush
 */
export class RequestFlush extends Message<RequestFlush> {
  constructor(data?: PartialMessage<RequestFlush>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.RequestFlush";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestFlush {
    return new RequestFlush().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestFlush {
    return new RequestFlush().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestFlush {
    return new RequestFlush().fromJsonString(jsonString, options);
  }

  static equals(a: RequestFlush | PlainMessage<RequestFlush> | undefined, b: RequestFlush | PlainMessage<RequestFlush> | undefined): boolean {
    return proto3.util.equals(RequestFlush, a, b);
  }
}

/**
 * @generated from message tendermint.abci.RequestInfo
 */
export class RequestInfo extends Message<RequestInfo> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * @generated from field: uint64 block_version = 2;
   */
  blockVersion = protoInt64.zero;

  /**
   * @generated from field: uint64 p2p_version = 3;
   */
  p2pVersion = protoInt64.zero;

  /**
   * @generated from field: string abci_version = 4;
   */
  abciVersion = "";

  constructor(data?: PartialMessage<RequestInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.RequestInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "block_version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "p2p_version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "abci_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestInfo {
    return new RequestInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestInfo {
    return new RequestInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestInfo {
    return new RequestInfo().fromJsonString(jsonString, options);
  }

  static equals(a: RequestInfo | PlainMessage<RequestInfo> | undefined, b: RequestInfo | PlainMessage<RequestInfo> | undefined): boolean {
    return proto3.util.equals(RequestInfo, a, b);
  }
}

/**
 * @generated from message tendermint.abci.RequestInitChain
 */
export class RequestInitChain extends Message<RequestInitChain> {
  /**
   * @generated from field: google.protobuf.Timestamp time = 1;
   */
  time?: Timestamp;

  /**
   * @generated from field: string chain_id = 2;
   */
  chainId = "";

  /**
   * @generated from field: tendermint.types.ConsensusParams consensus_params = 3;
   */
  consensusParams?: ConsensusParams;

  /**
   * @generated from field: repeated tendermint.abci.ValidatorUpdate validators = 4;
   */
  validators: ValidatorUpdate[] = [];

  /**
   * @generated from field: bytes app_state_bytes = 5;
   */
  appStateBytes = new Uint8Array(0);

  /**
   * @generated from field: int64 initial_height = 6;
   */
  initialHeight = protoInt64.zero;

  constructor(data?: PartialMessage<RequestInitChain>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.RequestInitChain";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "message", T: Timestamp },
    { no: 2, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "consensus_params", kind: "message", T: ConsensusParams },
    { no: 4, name: "validators", kind: "message", T: ValidatorUpdate, repeated: true },
    { no: 5, name: "app_state_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "initial_height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestInitChain {
    return new RequestInitChain().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestInitChain {
    return new RequestInitChain().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestInitChain {
    return new RequestInitChain().fromJsonString(jsonString, options);
  }

  static equals(a: RequestInitChain | PlainMessage<RequestInitChain> | undefined, b: RequestInitChain | PlainMessage<RequestInitChain> | undefined): boolean {
    return proto3.util.equals(RequestInitChain, a, b);
  }
}

/**
 * @generated from message tendermint.abci.RequestQuery
 */
export class RequestQuery extends Message<RequestQuery> {
  /**
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * @generated from field: int64 height = 3;
   */
  height = protoInt64.zero;

  /**
   * @generated from field: bool prove = 4;
   */
  prove = false;

  constructor(data?: PartialMessage<RequestQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.RequestQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "prove", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestQuery {
    return new RequestQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestQuery {
    return new RequestQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestQuery {
    return new RequestQuery().fromJsonString(jsonString, options);
  }

  static equals(a: RequestQuery | PlainMessage<RequestQuery> | undefined, b: RequestQuery | PlainMessage<RequestQuery> | undefined): boolean {
    return proto3.util.equals(RequestQuery, a, b);
  }
}

/**
 * @generated from message tendermint.abci.RequestBeginBlock
 */
export class RequestBeginBlock extends Message<RequestBeginBlock> {
  /**
   * @generated from field: bytes hash = 1;
   */
  hash = new Uint8Array(0);

  /**
   * @generated from field: tendermint.types.Header header = 2;
   */
  header?: Header;

  /**
   * @generated from field: tendermint.abci.CommitInfo last_commit_info = 3;
   */
  lastCommitInfo?: CommitInfo;

  /**
   * @generated from field: repeated tendermint.abci.Misbehavior byzantine_validators = 4;
   */
  byzantineValidators: Misbehavior[] = [];

  constructor(data?: PartialMessage<RequestBeginBlock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.RequestBeginBlock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "header", kind: "message", T: Header },
    { no: 3, name: "last_commit_info", kind: "message", T: CommitInfo },
    { no: 4, name: "byzantine_validators", kind: "message", T: Misbehavior, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestBeginBlock {
    return new RequestBeginBlock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestBeginBlock {
    return new RequestBeginBlock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestBeginBlock {
    return new RequestBeginBlock().fromJsonString(jsonString, options);
  }

  static equals(a: RequestBeginBlock | PlainMessage<RequestBeginBlock> | undefined, b: RequestBeginBlock | PlainMessage<RequestBeginBlock> | undefined): boolean {
    return proto3.util.equals(RequestBeginBlock, a, b);
  }
}

/**
 * @generated from message tendermint.abci.RequestCheckTx
 */
export class RequestCheckTx extends Message<RequestCheckTx> {
  /**
   * @generated from field: bytes tx = 1;
   */
  tx = new Uint8Array(0);

  /**
   * @generated from field: tendermint.abci.CheckTxType type = 2;
   */
  type = CheckTxType.NEW;

  constructor(data?: PartialMessage<RequestCheckTx>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.RequestCheckTx";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(CheckTxType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestCheckTx {
    return new RequestCheckTx().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestCheckTx {
    return new RequestCheckTx().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestCheckTx {
    return new RequestCheckTx().fromJsonString(jsonString, options);
  }

  static equals(a: RequestCheckTx | PlainMessage<RequestCheckTx> | undefined, b: RequestCheckTx | PlainMessage<RequestCheckTx> | undefined): boolean {
    return proto3.util.equals(RequestCheckTx, a, b);
  }
}

/**
 * @generated from message tendermint.abci.RequestDeliverTx
 */
export class RequestDeliverTx extends Message<RequestDeliverTx> {
  /**
   * @generated from field: bytes tx = 1;
   */
  tx = new Uint8Array(0);

  constructor(data?: PartialMessage<RequestDeliverTx>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.RequestDeliverTx";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestDeliverTx {
    return new RequestDeliverTx().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestDeliverTx {
    return new RequestDeliverTx().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestDeliverTx {
    return new RequestDeliverTx().fromJsonString(jsonString, options);
  }

  static equals(a: RequestDeliverTx | PlainMessage<RequestDeliverTx> | undefined, b: RequestDeliverTx | PlainMessage<RequestDeliverTx> | undefined): boolean {
    return proto3.util.equals(RequestDeliverTx, a, b);
  }
}

/**
 * @generated from message tendermint.abci.RequestEndBlock
 */
export class RequestEndBlock extends Message<RequestEndBlock> {
  /**
   * @generated from field: int64 height = 1;
   */
  height = protoInt64.zero;

  constructor(data?: PartialMessage<RequestEndBlock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.RequestEndBlock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestEndBlock {
    return new RequestEndBlock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestEndBlock {
    return new RequestEndBlock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestEndBlock {
    return new RequestEndBlock().fromJsonString(jsonString, options);
  }

  static equals(a: RequestEndBlock | PlainMessage<RequestEndBlock> | undefined, b: RequestEndBlock | PlainMessage<RequestEndBlock> | undefined): boolean {
    return proto3.util.equals(RequestEndBlock, a, b);
  }
}

/**
 * @generated from message tendermint.abci.RequestCommit
 */
export class RequestCommit extends Message<RequestCommit> {
  constructor(data?: PartialMessage<RequestCommit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.RequestCommit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestCommit {
    return new RequestCommit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestCommit {
    return new RequestCommit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestCommit {
    return new RequestCommit().fromJsonString(jsonString, options);
  }

  static equals(a: RequestCommit | PlainMessage<RequestCommit> | undefined, b: RequestCommit | PlainMessage<RequestCommit> | undefined): boolean {
    return proto3.util.equals(RequestCommit, a, b);
  }
}

/**
 * lists available snapshots
 *
 * @generated from message tendermint.abci.RequestListSnapshots
 */
export class RequestListSnapshots extends Message<RequestListSnapshots> {
  constructor(data?: PartialMessage<RequestListSnapshots>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.RequestListSnapshots";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestListSnapshots {
    return new RequestListSnapshots().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestListSnapshots {
    return new RequestListSnapshots().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestListSnapshots {
    return new RequestListSnapshots().fromJsonString(jsonString, options);
  }

  static equals(a: RequestListSnapshots | PlainMessage<RequestListSnapshots> | undefined, b: RequestListSnapshots | PlainMessage<RequestListSnapshots> | undefined): boolean {
    return proto3.util.equals(RequestListSnapshots, a, b);
  }
}

/**
 * offers a snapshot to the application
 *
 * @generated from message tendermint.abci.RequestOfferSnapshot
 */
export class RequestOfferSnapshot extends Message<RequestOfferSnapshot> {
  /**
   * snapshot offered by peers
   *
   * @generated from field: tendermint.abci.Snapshot snapshot = 1;
   */
  snapshot?: Snapshot;

  /**
   * light client-verified app hash for snapshot height
   *
   * @generated from field: bytes app_hash = 2;
   */
  appHash = new Uint8Array(0);

  constructor(data?: PartialMessage<RequestOfferSnapshot>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.RequestOfferSnapshot";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "snapshot", kind: "message", T: Snapshot },
    { no: 2, name: "app_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestOfferSnapshot {
    return new RequestOfferSnapshot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestOfferSnapshot {
    return new RequestOfferSnapshot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestOfferSnapshot {
    return new RequestOfferSnapshot().fromJsonString(jsonString, options);
  }

  static equals(a: RequestOfferSnapshot | PlainMessage<RequestOfferSnapshot> | undefined, b: RequestOfferSnapshot | PlainMessage<RequestOfferSnapshot> | undefined): boolean {
    return proto3.util.equals(RequestOfferSnapshot, a, b);
  }
}

/**
 * loads a snapshot chunk
 *
 * @generated from message tendermint.abci.RequestLoadSnapshotChunk
 */
export class RequestLoadSnapshotChunk extends Message<RequestLoadSnapshotChunk> {
  /**
   * @generated from field: uint64 height = 1;
   */
  height = protoInt64.zero;

  /**
   * @generated from field: uint32 format = 2;
   */
  format = 0;

  /**
   * @generated from field: uint32 chunk = 3;
   */
  chunk = 0;

  constructor(data?: PartialMessage<RequestLoadSnapshotChunk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.RequestLoadSnapshotChunk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "format", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "chunk", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestLoadSnapshotChunk {
    return new RequestLoadSnapshotChunk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestLoadSnapshotChunk {
    return new RequestLoadSnapshotChunk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestLoadSnapshotChunk {
    return new RequestLoadSnapshotChunk().fromJsonString(jsonString, options);
  }

  static equals(a: RequestLoadSnapshotChunk | PlainMessage<RequestLoadSnapshotChunk> | undefined, b: RequestLoadSnapshotChunk | PlainMessage<RequestLoadSnapshotChunk> | undefined): boolean {
    return proto3.util.equals(RequestLoadSnapshotChunk, a, b);
  }
}

/**
 * Applies a snapshot chunk
 *
 * @generated from message tendermint.abci.RequestApplySnapshotChunk
 */
export class RequestApplySnapshotChunk extends Message<RequestApplySnapshotChunk> {
  /**
   * @generated from field: uint32 index = 1;
   */
  index = 0;

  /**
   * @generated from field: bytes chunk = 2;
   */
  chunk = new Uint8Array(0);

  /**
   * @generated from field: string sender = 3;
   */
  sender = "";

  constructor(data?: PartialMessage<RequestApplySnapshotChunk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.RequestApplySnapshotChunk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "chunk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestApplySnapshotChunk {
    return new RequestApplySnapshotChunk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestApplySnapshotChunk {
    return new RequestApplySnapshotChunk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestApplySnapshotChunk {
    return new RequestApplySnapshotChunk().fromJsonString(jsonString, options);
  }

  static equals(a: RequestApplySnapshotChunk | PlainMessage<RequestApplySnapshotChunk> | undefined, b: RequestApplySnapshotChunk | PlainMessage<RequestApplySnapshotChunk> | undefined): boolean {
    return proto3.util.equals(RequestApplySnapshotChunk, a, b);
  }
}

/**
 * @generated from message tendermint.abci.RequestPrepareProposal
 */
export class RequestPrepareProposal extends Message<RequestPrepareProposal> {
  /**
   * the modified transactions cannot exceed this size.
   *
   * @generated from field: int64 max_tx_bytes = 1;
   */
  maxTxBytes = protoInt64.zero;

  /**
   * txs is an array of transactions that will be included in a block,
   * sent to the app for possible modifications.
   *
   * @generated from field: repeated bytes txs = 2;
   */
  txs: Uint8Array[] = [];

  /**
   * @generated from field: tendermint.abci.ExtendedCommitInfo local_last_commit = 3;
   */
  localLastCommit?: ExtendedCommitInfo;

  /**
   * @generated from field: repeated tendermint.abci.Misbehavior misbehavior = 4;
   */
  misbehavior: Misbehavior[] = [];

  /**
   * @generated from field: int64 height = 5;
   */
  height = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp time = 6;
   */
  time?: Timestamp;

  /**
   * @generated from field: bytes next_validators_hash = 7;
   */
  nextValidatorsHash = new Uint8Array(0);

  /**
   * address of the public key of the validator proposing the block.
   *
   * @generated from field: bytes proposer_address = 8;
   */
  proposerAddress = new Uint8Array(0);

  constructor(data?: PartialMessage<RequestPrepareProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.RequestPrepareProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "max_tx_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "txs", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 3, name: "local_last_commit", kind: "message", T: ExtendedCommitInfo },
    { no: 4, name: "misbehavior", kind: "message", T: Misbehavior, repeated: true },
    { no: 5, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "time", kind: "message", T: Timestamp },
    { no: 7, name: "next_validators_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "proposer_address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestPrepareProposal {
    return new RequestPrepareProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestPrepareProposal {
    return new RequestPrepareProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestPrepareProposal {
    return new RequestPrepareProposal().fromJsonString(jsonString, options);
  }

  static equals(a: RequestPrepareProposal | PlainMessage<RequestPrepareProposal> | undefined, b: RequestPrepareProposal | PlainMessage<RequestPrepareProposal> | undefined): boolean {
    return proto3.util.equals(RequestPrepareProposal, a, b);
  }
}

/**
 * @generated from message tendermint.abci.RequestProcessProposal
 */
export class RequestProcessProposal extends Message<RequestProcessProposal> {
  /**
   * @generated from field: repeated bytes txs = 1;
   */
  txs: Uint8Array[] = [];

  /**
   * @generated from field: tendermint.abci.CommitInfo proposed_last_commit = 2;
   */
  proposedLastCommit?: CommitInfo;

  /**
   * @generated from field: repeated tendermint.abci.Misbehavior misbehavior = 3;
   */
  misbehavior: Misbehavior[] = [];

  /**
   * hash is the merkle root hash of the fields of the proposed block.
   *
   * @generated from field: bytes hash = 4;
   */
  hash = new Uint8Array(0);

  /**
   * @generated from field: int64 height = 5;
   */
  height = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp time = 6;
   */
  time?: Timestamp;

  /**
   * @generated from field: bytes next_validators_hash = 7;
   */
  nextValidatorsHash = new Uint8Array(0);

  /**
   * address of the public key of the original proposer of the block.
   *
   * @generated from field: bytes proposer_address = 8;
   */
  proposerAddress = new Uint8Array(0);

  constructor(data?: PartialMessage<RequestProcessProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.RequestProcessProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "txs", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 2, name: "proposed_last_commit", kind: "message", T: CommitInfo },
    { no: 3, name: "misbehavior", kind: "message", T: Misbehavior, repeated: true },
    { no: 4, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "time", kind: "message", T: Timestamp },
    { no: 7, name: "next_validators_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "proposer_address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestProcessProposal {
    return new RequestProcessProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestProcessProposal {
    return new RequestProcessProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestProcessProposal {
    return new RequestProcessProposal().fromJsonString(jsonString, options);
  }

  static equals(a: RequestProcessProposal | PlainMessage<RequestProcessProposal> | undefined, b: RequestProcessProposal | PlainMessage<RequestProcessProposal> | undefined): boolean {
    return proto3.util.equals(RequestProcessProposal, a, b);
  }
}

/**
 * @generated from message tendermint.abci.Response
 */
export class Response extends Message<Response> {
  /**
   * @generated from oneof tendermint.abci.Response.value
   */
  value: {
    /**
     * @generated from field: tendermint.abci.ResponseException exception = 1;
     */
    value: ResponseException;
    case: "exception";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseEcho echo = 2;
     */
    value: ResponseEcho;
    case: "echo";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseFlush flush = 3;
     */
    value: ResponseFlush;
    case: "flush";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseInfo info = 4;
     */
    value: ResponseInfo;
    case: "info";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseInitChain init_chain = 6;
     */
    value: ResponseInitChain;
    case: "initChain";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseQuery query = 7;
     */
    value: ResponseQuery;
    case: "query";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseBeginBlock begin_block = 8;
     */
    value: ResponseBeginBlock;
    case: "beginBlock";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseCheckTx check_tx = 9;
     */
    value: ResponseCheckTx;
    case: "checkTx";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseDeliverTx deliver_tx = 10;
     */
    value: ResponseDeliverTx;
    case: "deliverTx";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseEndBlock end_block = 11;
     */
    value: ResponseEndBlock;
    case: "endBlock";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseCommit commit = 12;
     */
    value: ResponseCommit;
    case: "commit";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseListSnapshots list_snapshots = 13;
     */
    value: ResponseListSnapshots;
    case: "listSnapshots";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseOfferSnapshot offer_snapshot = 14;
     */
    value: ResponseOfferSnapshot;
    case: "offerSnapshot";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseLoadSnapshotChunk load_snapshot_chunk = 15;
     */
    value: ResponseLoadSnapshotChunk;
    case: "loadSnapshotChunk";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseApplySnapshotChunk apply_snapshot_chunk = 16;
     */
    value: ResponseApplySnapshotChunk;
    case: "applySnapshotChunk";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponsePrepareProposal prepare_proposal = 17;
     */
    value: ResponsePrepareProposal;
    case: "prepareProposal";
  } | {
    /**
     * @generated from field: tendermint.abci.ResponseProcessProposal process_proposal = 18;
     */
    value: ResponseProcessProposal;
    case: "processProposal";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Response>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.Response";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exception", kind: "message", T: ResponseException, oneof: "value" },
    { no: 2, name: "echo", kind: "message", T: ResponseEcho, oneof: "value" },
    { no: 3, name: "flush", kind: "message", T: ResponseFlush, oneof: "value" },
    { no: 4, name: "info", kind: "message", T: ResponseInfo, oneof: "value" },
    { no: 6, name: "init_chain", kind: "message", T: ResponseInitChain, oneof: "value" },
    { no: 7, name: "query", kind: "message", T: ResponseQuery, oneof: "value" },
    { no: 8, name: "begin_block", kind: "message", T: ResponseBeginBlock, oneof: "value" },
    { no: 9, name: "check_tx", kind: "message", T: ResponseCheckTx, oneof: "value" },
    { no: 10, name: "deliver_tx", kind: "message", T: ResponseDeliverTx, oneof: "value" },
    { no: 11, name: "end_block", kind: "message", T: ResponseEndBlock, oneof: "value" },
    { no: 12, name: "commit", kind: "message", T: ResponseCommit, oneof: "value" },
    { no: 13, name: "list_snapshots", kind: "message", T: ResponseListSnapshots, oneof: "value" },
    { no: 14, name: "offer_snapshot", kind: "message", T: ResponseOfferSnapshot, oneof: "value" },
    { no: 15, name: "load_snapshot_chunk", kind: "message", T: ResponseLoadSnapshotChunk, oneof: "value" },
    { no: 16, name: "apply_snapshot_chunk", kind: "message", T: ResponseApplySnapshotChunk, oneof: "value" },
    { no: 17, name: "prepare_proposal", kind: "message", T: ResponsePrepareProposal, oneof: "value" },
    { no: 18, name: "process_proposal", kind: "message", T: ResponseProcessProposal, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Response {
    return new Response().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Response {
    return new Response().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Response {
    return new Response().fromJsonString(jsonString, options);
  }

  static equals(a: Response | PlainMessage<Response> | undefined, b: Response | PlainMessage<Response> | undefined): boolean {
    return proto3.util.equals(Response, a, b);
  }
}

/**
 * nondeterministic
 *
 * @generated from message tendermint.abci.ResponseException
 */
export class ResponseException extends Message<ResponseException> {
  /**
   * @generated from field: string error = 1;
   */
  error = "";

  constructor(data?: PartialMessage<ResponseException>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.ResponseException";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseException {
    return new ResponseException().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseException {
    return new ResponseException().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseException {
    return new ResponseException().fromJsonString(jsonString, options);
  }

  static equals(a: ResponseException | PlainMessage<ResponseException> | undefined, b: ResponseException | PlainMessage<ResponseException> | undefined): boolean {
    return proto3.util.equals(ResponseException, a, b);
  }
}

/**
 * @generated from message tendermint.abci.ResponseEcho
 */
export class ResponseEcho extends Message<ResponseEcho> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<ResponseEcho>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.ResponseEcho";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseEcho {
    return new ResponseEcho().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseEcho {
    return new ResponseEcho().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseEcho {
    return new ResponseEcho().fromJsonString(jsonString, options);
  }

  static equals(a: ResponseEcho | PlainMessage<ResponseEcho> | undefined, b: ResponseEcho | PlainMessage<ResponseEcho> | undefined): boolean {
    return proto3.util.equals(ResponseEcho, a, b);
  }
}

/**
 * @generated from message tendermint.abci.ResponseFlush
 */
export class ResponseFlush extends Message<ResponseFlush> {
  constructor(data?: PartialMessage<ResponseFlush>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.ResponseFlush";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseFlush {
    return new ResponseFlush().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseFlush {
    return new ResponseFlush().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseFlush {
    return new ResponseFlush().fromJsonString(jsonString, options);
  }

  static equals(a: ResponseFlush | PlainMessage<ResponseFlush> | undefined, b: ResponseFlush | PlainMessage<ResponseFlush> | undefined): boolean {
    return proto3.util.equals(ResponseFlush, a, b);
  }
}

/**
 * @generated from message tendermint.abci.ResponseInfo
 */
export class ResponseInfo extends Message<ResponseInfo> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  /**
   * @generated from field: string version = 2;
   */
  version = "";

  /**
   * @generated from field: uint64 app_version = 3;
   */
  appVersion = protoInt64.zero;

  /**
   * @generated from field: int64 last_block_height = 4;
   */
  lastBlockHeight = protoInt64.zero;

  /**
   * @generated from field: bytes last_block_app_hash = 5;
   */
  lastBlockAppHash = new Uint8Array(0);

  constructor(data?: PartialMessage<ResponseInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.ResponseInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "app_version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "last_block_height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "last_block_app_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseInfo {
    return new ResponseInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseInfo {
    return new ResponseInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseInfo {
    return new ResponseInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ResponseInfo | PlainMessage<ResponseInfo> | undefined, b: ResponseInfo | PlainMessage<ResponseInfo> | undefined): boolean {
    return proto3.util.equals(ResponseInfo, a, b);
  }
}

/**
 * @generated from message tendermint.abci.ResponseInitChain
 */
export class ResponseInitChain extends Message<ResponseInitChain> {
  /**
   * @generated from field: tendermint.types.ConsensusParams consensus_params = 1;
   */
  consensusParams?: ConsensusParams;

  /**
   * @generated from field: repeated tendermint.abci.ValidatorUpdate validators = 2;
   */
  validators: ValidatorUpdate[] = [];

  /**
   * @generated from field: bytes app_hash = 3;
   */
  appHash = new Uint8Array(0);

  constructor(data?: PartialMessage<ResponseInitChain>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.ResponseInitChain";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "consensus_params", kind: "message", T: ConsensusParams },
    { no: 2, name: "validators", kind: "message", T: ValidatorUpdate, repeated: true },
    { no: 3, name: "app_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseInitChain {
    return new ResponseInitChain().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseInitChain {
    return new ResponseInitChain().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseInitChain {
    return new ResponseInitChain().fromJsonString(jsonString, options);
  }

  static equals(a: ResponseInitChain | PlainMessage<ResponseInitChain> | undefined, b: ResponseInitChain | PlainMessage<ResponseInitChain> | undefined): boolean {
    return proto3.util.equals(ResponseInitChain, a, b);
  }
}

/**
 * @generated from message tendermint.abci.ResponseQuery
 */
export class ResponseQuery extends Message<ResponseQuery> {
  /**
   * @generated from field: uint32 code = 1;
   */
  code = 0;

  /**
   * bytes data = 2; // use "value" instead.
   *
   * nondeterministic
   *
   * @generated from field: string log = 3;
   */
  log = "";

  /**
   * nondeterministic
   *
   * @generated from field: string info = 4;
   */
  info = "";

  /**
   * @generated from field: int64 index = 5;
   */
  index = protoInt64.zero;

  /**
   * @generated from field: bytes key = 6;
   */
  key = new Uint8Array(0);

  /**
   * @generated from field: bytes value = 7;
   */
  value = new Uint8Array(0);

  /**
   * @generated from field: tendermint.crypto.ProofOps proof_ops = 8;
   */
  proofOps?: ProofOps;

  /**
   * @generated from field: int64 height = 9;
   */
  height = protoInt64.zero;

  /**
   * @generated from field: string codespace = 10;
   */
  codespace = "";

  constructor(data?: PartialMessage<ResponseQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.ResponseQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "log", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "proof_ops", kind: "message", T: ProofOps },
    { no: 9, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "codespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseQuery {
    return new ResponseQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseQuery {
    return new ResponseQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseQuery {
    return new ResponseQuery().fromJsonString(jsonString, options);
  }

  static equals(a: ResponseQuery | PlainMessage<ResponseQuery> | undefined, b: ResponseQuery | PlainMessage<ResponseQuery> | undefined): boolean {
    return proto3.util.equals(ResponseQuery, a, b);
  }
}

/**
 * @generated from message tendermint.abci.ResponseBeginBlock
 */
export class ResponseBeginBlock extends Message<ResponseBeginBlock> {
  /**
   * @generated from field: repeated tendermint.abci.Event events = 1;
   */
  events: Event[] = [];

  constructor(data?: PartialMessage<ResponseBeginBlock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.ResponseBeginBlock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: Event, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseBeginBlock {
    return new ResponseBeginBlock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseBeginBlock {
    return new ResponseBeginBlock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseBeginBlock {
    return new ResponseBeginBlock().fromJsonString(jsonString, options);
  }

  static equals(a: ResponseBeginBlock | PlainMessage<ResponseBeginBlock> | undefined, b: ResponseBeginBlock | PlainMessage<ResponseBeginBlock> | undefined): boolean {
    return proto3.util.equals(ResponseBeginBlock, a, b);
  }
}

/**
 * @generated from message tendermint.abci.ResponseCheckTx
 */
export class ResponseCheckTx extends Message<ResponseCheckTx> {
  /**
   * @generated from field: uint32 code = 1;
   */
  code = 0;

  /**
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  /**
   * nondeterministic
   *
   * @generated from field: string log = 3;
   */
  log = "";

  /**
   * nondeterministic
   *
   * @generated from field: string info = 4;
   */
  info = "";

  /**
   * @generated from field: int64 gas_wanted = 5 [json_name = "gas_wanted"];
   */
  gasWanted = protoInt64.zero;

  /**
   * @generated from field: int64 gas_used = 6 [json_name = "gas_used"];
   */
  gasUsed = protoInt64.zero;

  /**
   * @generated from field: repeated tendermint.abci.Event events = 7;
   */
  events: Event[] = [];

  /**
   * @generated from field: string codespace = 8;
   */
  codespace = "";

  /**
   * @generated from field: string sender = 9;
   */
  sender = "";

  /**
   * @generated from field: int64 priority = 10;
   */
  priority = protoInt64.zero;

  /**
   * mempool_error is set by CometBFT.
   * ABCI applictions creating a ResponseCheckTX should not set mempool_error.
   *
   * @generated from field: string mempool_error = 11;
   */
  mempoolError = "";

  constructor(data?: PartialMessage<ResponseCheckTx>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.ResponseCheckTx";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "log", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "gas_wanted", jsonName: "gas_wanted", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "gas_used", jsonName: "gas_used", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "events", kind: "message", T: Event, repeated: true },
    { no: 8, name: "codespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "priority", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "mempool_error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseCheckTx {
    return new ResponseCheckTx().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseCheckTx {
    return new ResponseCheckTx().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseCheckTx {
    return new ResponseCheckTx().fromJsonString(jsonString, options);
  }

  static equals(a: ResponseCheckTx | PlainMessage<ResponseCheckTx> | undefined, b: ResponseCheckTx | PlainMessage<ResponseCheckTx> | undefined): boolean {
    return proto3.util.equals(ResponseCheckTx, a, b);
  }
}

/**
 * @generated from message tendermint.abci.ResponseDeliverTx
 */
export class ResponseDeliverTx extends Message<ResponseDeliverTx> {
  /**
   * @generated from field: uint32 code = 1;
   */
  code = 0;

  /**
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  /**
   * nondeterministic
   *
   * @generated from field: string log = 3;
   */
  log = "";

  /**
   * nondeterministic
   *
   * @generated from field: string info = 4;
   */
  info = "";

  /**
   * @generated from field: int64 gas_wanted = 5 [json_name = "gas_wanted"];
   */
  gasWanted = protoInt64.zero;

  /**
   * @generated from field: int64 gas_used = 6 [json_name = "gas_used"];
   */
  gasUsed = protoInt64.zero;

  /**
   * nondeterministic
   *
   * @generated from field: repeated tendermint.abci.Event events = 7;
   */
  events: Event[] = [];

  /**
   * @generated from field: string codespace = 8;
   */
  codespace = "";

  constructor(data?: PartialMessage<ResponseDeliverTx>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.ResponseDeliverTx";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "log", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "gas_wanted", jsonName: "gas_wanted", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "gas_used", jsonName: "gas_used", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "events", kind: "message", T: Event, repeated: true },
    { no: 8, name: "codespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseDeliverTx {
    return new ResponseDeliverTx().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseDeliverTx {
    return new ResponseDeliverTx().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseDeliverTx {
    return new ResponseDeliverTx().fromJsonString(jsonString, options);
  }

  static equals(a: ResponseDeliverTx | PlainMessage<ResponseDeliverTx> | undefined, b: ResponseDeliverTx | PlainMessage<ResponseDeliverTx> | undefined): boolean {
    return proto3.util.equals(ResponseDeliverTx, a, b);
  }
}

/**
 * @generated from message tendermint.abci.ResponseEndBlock
 */
export class ResponseEndBlock extends Message<ResponseEndBlock> {
  /**
   * @generated from field: repeated tendermint.abci.ValidatorUpdate validator_updates = 1;
   */
  validatorUpdates: ValidatorUpdate[] = [];

  /**
   * @generated from field: tendermint.types.ConsensusParams consensus_param_updates = 2;
   */
  consensusParamUpdates?: ConsensusParams;

  /**
   * @generated from field: repeated tendermint.abci.Event events = 3;
   */
  events: Event[] = [];

  constructor(data?: PartialMessage<ResponseEndBlock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.ResponseEndBlock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_updates", kind: "message", T: ValidatorUpdate, repeated: true },
    { no: 2, name: "consensus_param_updates", kind: "message", T: ConsensusParams },
    { no: 3, name: "events", kind: "message", T: Event, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseEndBlock {
    return new ResponseEndBlock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseEndBlock {
    return new ResponseEndBlock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseEndBlock {
    return new ResponseEndBlock().fromJsonString(jsonString, options);
  }

  static equals(a: ResponseEndBlock | PlainMessage<ResponseEndBlock> | undefined, b: ResponseEndBlock | PlainMessage<ResponseEndBlock> | undefined): boolean {
    return proto3.util.equals(ResponseEndBlock, a, b);
  }
}

/**
 * @generated from message tendermint.abci.ResponseCommit
 */
export class ResponseCommit extends Message<ResponseCommit> {
  /**
   * reserve 1
   *
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  /**
   * @generated from field: int64 retain_height = 3;
   */
  retainHeight = protoInt64.zero;

  constructor(data?: PartialMessage<ResponseCommit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.ResponseCommit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "retain_height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseCommit {
    return new ResponseCommit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseCommit {
    return new ResponseCommit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseCommit {
    return new ResponseCommit().fromJsonString(jsonString, options);
  }

  static equals(a: ResponseCommit | PlainMessage<ResponseCommit> | undefined, b: ResponseCommit | PlainMessage<ResponseCommit> | undefined): boolean {
    return proto3.util.equals(ResponseCommit, a, b);
  }
}

/**
 * @generated from message tendermint.abci.ResponseListSnapshots
 */
export class ResponseListSnapshots extends Message<ResponseListSnapshots> {
  /**
   * @generated from field: repeated tendermint.abci.Snapshot snapshots = 1;
   */
  snapshots: Snapshot[] = [];

  constructor(data?: PartialMessage<ResponseListSnapshots>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.ResponseListSnapshots";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "snapshots", kind: "message", T: Snapshot, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseListSnapshots {
    return new ResponseListSnapshots().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseListSnapshots {
    return new ResponseListSnapshots().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseListSnapshots {
    return new ResponseListSnapshots().fromJsonString(jsonString, options);
  }

  static equals(a: ResponseListSnapshots | PlainMessage<ResponseListSnapshots> | undefined, b: ResponseListSnapshots | PlainMessage<ResponseListSnapshots> | undefined): boolean {
    return proto3.util.equals(ResponseListSnapshots, a, b);
  }
}

/**
 * @generated from message tendermint.abci.ResponseOfferSnapshot
 */
export class ResponseOfferSnapshot extends Message<ResponseOfferSnapshot> {
  /**
   * @generated from field: tendermint.abci.ResponseOfferSnapshot.Result result = 1;
   */
  result = ResponseOfferSnapshot_Result.UNKNOWN;

  constructor(data?: PartialMessage<ResponseOfferSnapshot>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.ResponseOfferSnapshot";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(ResponseOfferSnapshot_Result) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseOfferSnapshot {
    return new ResponseOfferSnapshot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseOfferSnapshot {
    return new ResponseOfferSnapshot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseOfferSnapshot {
    return new ResponseOfferSnapshot().fromJsonString(jsonString, options);
  }

  static equals(a: ResponseOfferSnapshot | PlainMessage<ResponseOfferSnapshot> | undefined, b: ResponseOfferSnapshot | PlainMessage<ResponseOfferSnapshot> | undefined): boolean {
    return proto3.util.equals(ResponseOfferSnapshot, a, b);
  }
}

/**
 * @generated from enum tendermint.abci.ResponseOfferSnapshot.Result
 */
export enum ResponseOfferSnapshot_Result {
  /**
   * Unknown result, abort all snapshot restoration
   *
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Snapshot accepted, apply chunks
   *
   * @generated from enum value: ACCEPT = 1;
   */
  ACCEPT = 1,

  /**
   * Abort all snapshot restoration
   *
   * @generated from enum value: ABORT = 2;
   */
  ABORT = 2,

  /**
   * Reject this specific snapshot, try others
   *
   * @generated from enum value: REJECT = 3;
   */
  REJECT = 3,

  /**
   * Reject all snapshots of this format, try others
   *
   * @generated from enum value: REJECT_FORMAT = 4;
   */
  REJECT_FORMAT = 4,

  /**
   * Reject all snapshots from the sender(s), try others
   *
   * @generated from enum value: REJECT_SENDER = 5;
   */
  REJECT_SENDER = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(ResponseOfferSnapshot_Result)
proto3.util.setEnumType(ResponseOfferSnapshot_Result, "tendermint.abci.ResponseOfferSnapshot.Result", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "ACCEPT" },
  { no: 2, name: "ABORT" },
  { no: 3, name: "REJECT" },
  { no: 4, name: "REJECT_FORMAT" },
  { no: 5, name: "REJECT_SENDER" },
]);

/**
 * @generated from message tendermint.abci.ResponseLoadSnapshotChunk
 */
export class ResponseLoadSnapshotChunk extends Message<ResponseLoadSnapshotChunk> {
  /**
   * @generated from field: bytes chunk = 1;
   */
  chunk = new Uint8Array(0);

  constructor(data?: PartialMessage<ResponseLoadSnapshotChunk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.ResponseLoadSnapshotChunk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chunk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseLoadSnapshotChunk {
    return new ResponseLoadSnapshotChunk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseLoadSnapshotChunk {
    return new ResponseLoadSnapshotChunk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseLoadSnapshotChunk {
    return new ResponseLoadSnapshotChunk().fromJsonString(jsonString, options);
  }

  static equals(a: ResponseLoadSnapshotChunk | PlainMessage<ResponseLoadSnapshotChunk> | undefined, b: ResponseLoadSnapshotChunk | PlainMessage<ResponseLoadSnapshotChunk> | undefined): boolean {
    return proto3.util.equals(ResponseLoadSnapshotChunk, a, b);
  }
}

/**
 * @generated from message tendermint.abci.ResponseApplySnapshotChunk
 */
export class ResponseApplySnapshotChunk extends Message<ResponseApplySnapshotChunk> {
  /**
   * @generated from field: tendermint.abci.ResponseApplySnapshotChunk.Result result = 1;
   */
  result = ResponseApplySnapshotChunk_Result.UNKNOWN;

  /**
   * Chunks to refetch and reapply
   *
   * @generated from field: repeated uint32 refetch_chunks = 2;
   */
  refetchChunks: number[] = [];

  /**
   * Chunk senders to reject and ban
   *
   * @generated from field: repeated string reject_senders = 3;
   */
  rejectSenders: string[] = [];

  constructor(data?: PartialMessage<ResponseApplySnapshotChunk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.ResponseApplySnapshotChunk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(ResponseApplySnapshotChunk_Result) },
    { no: 2, name: "refetch_chunks", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
    { no: 3, name: "reject_senders", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseApplySnapshotChunk {
    return new ResponseApplySnapshotChunk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseApplySnapshotChunk {
    return new ResponseApplySnapshotChunk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseApplySnapshotChunk {
    return new ResponseApplySnapshotChunk().fromJsonString(jsonString, options);
  }

  static equals(a: ResponseApplySnapshotChunk | PlainMessage<ResponseApplySnapshotChunk> | undefined, b: ResponseApplySnapshotChunk | PlainMessage<ResponseApplySnapshotChunk> | undefined): boolean {
    return proto3.util.equals(ResponseApplySnapshotChunk, a, b);
  }
}

/**
 * @generated from enum tendermint.abci.ResponseApplySnapshotChunk.Result
 */
export enum ResponseApplySnapshotChunk_Result {
  /**
   * Unknown result, abort all snapshot restoration
   *
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Chunk successfully accepted
   *
   * @generated from enum value: ACCEPT = 1;
   */
  ACCEPT = 1,

  /**
   * Abort all snapshot restoration
   *
   * @generated from enum value: ABORT = 2;
   */
  ABORT = 2,

  /**
   * Retry chunk (combine with refetch and reject)
   *
   * @generated from enum value: RETRY = 3;
   */
  RETRY = 3,

  /**
   * Retry snapshot (combine with refetch and reject)
   *
   * @generated from enum value: RETRY_SNAPSHOT = 4;
   */
  RETRY_SNAPSHOT = 4,

  /**
   * Reject this snapshot, try others
   *
   * @generated from enum value: REJECT_SNAPSHOT = 5;
   */
  REJECT_SNAPSHOT = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(ResponseApplySnapshotChunk_Result)
proto3.util.setEnumType(ResponseApplySnapshotChunk_Result, "tendermint.abci.ResponseApplySnapshotChunk.Result", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "ACCEPT" },
  { no: 2, name: "ABORT" },
  { no: 3, name: "RETRY" },
  { no: 4, name: "RETRY_SNAPSHOT" },
  { no: 5, name: "REJECT_SNAPSHOT" },
]);

/**
 * @generated from message tendermint.abci.ResponsePrepareProposal
 */
export class ResponsePrepareProposal extends Message<ResponsePrepareProposal> {
  /**
   * @generated from field: repeated bytes txs = 1;
   */
  txs: Uint8Array[] = [];

  constructor(data?: PartialMessage<ResponsePrepareProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.ResponsePrepareProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "txs", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponsePrepareProposal {
    return new ResponsePrepareProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponsePrepareProposal {
    return new ResponsePrepareProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponsePrepareProposal {
    return new ResponsePrepareProposal().fromJsonString(jsonString, options);
  }

  static equals(a: ResponsePrepareProposal | PlainMessage<ResponsePrepareProposal> | undefined, b: ResponsePrepareProposal | PlainMessage<ResponsePrepareProposal> | undefined): boolean {
    return proto3.util.equals(ResponsePrepareProposal, a, b);
  }
}

/**
 * @generated from message tendermint.abci.ResponseProcessProposal
 */
export class ResponseProcessProposal extends Message<ResponseProcessProposal> {
  /**
   * @generated from field: tendermint.abci.ResponseProcessProposal.ProposalStatus status = 1;
   */
  status = ResponseProcessProposal_ProposalStatus.UNKNOWN;

  constructor(data?: PartialMessage<ResponseProcessProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.ResponseProcessProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(ResponseProcessProposal_ProposalStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseProcessProposal {
    return new ResponseProcessProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseProcessProposal {
    return new ResponseProcessProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseProcessProposal {
    return new ResponseProcessProposal().fromJsonString(jsonString, options);
  }

  static equals(a: ResponseProcessProposal | PlainMessage<ResponseProcessProposal> | undefined, b: ResponseProcessProposal | PlainMessage<ResponseProcessProposal> | undefined): boolean {
    return proto3.util.equals(ResponseProcessProposal, a, b);
  }
}

/**
 * @generated from enum tendermint.abci.ResponseProcessProposal.ProposalStatus
 */
export enum ResponseProcessProposal_ProposalStatus {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: ACCEPT = 1;
   */
  ACCEPT = 1,

  /**
   * @generated from enum value: REJECT = 2;
   */
  REJECT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ResponseProcessProposal_ProposalStatus)
proto3.util.setEnumType(ResponseProcessProposal_ProposalStatus, "tendermint.abci.ResponseProcessProposal.ProposalStatus", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "ACCEPT" },
  { no: 2, name: "REJECT" },
]);

/**
 * @generated from message tendermint.abci.CommitInfo
 */
export class CommitInfo extends Message<CommitInfo> {
  /**
   * @generated from field: int32 round = 1;
   */
  round = 0;

  /**
   * @generated from field: repeated tendermint.abci.VoteInfo votes = 2;
   */
  votes: VoteInfo[] = [];

  constructor(data?: PartialMessage<CommitInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.CommitInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "votes", kind: "message", T: VoteInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommitInfo {
    return new CommitInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommitInfo {
    return new CommitInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommitInfo {
    return new CommitInfo().fromJsonString(jsonString, options);
  }

  static equals(a: CommitInfo | PlainMessage<CommitInfo> | undefined, b: CommitInfo | PlainMessage<CommitInfo> | undefined): boolean {
    return proto3.util.equals(CommitInfo, a, b);
  }
}

/**
 * @generated from message tendermint.abci.ExtendedCommitInfo
 */
export class ExtendedCommitInfo extends Message<ExtendedCommitInfo> {
  /**
   * The round at which the block proposer decided in the previous height.
   *
   * @generated from field: int32 round = 1;
   */
  round = 0;

  /**
   * List of validators' addresses in the last validator set with their voting
   * information, including vote extensions.
   *
   * @generated from field: repeated tendermint.abci.ExtendedVoteInfo votes = 2;
   */
  votes: ExtendedVoteInfo[] = [];

  constructor(data?: PartialMessage<ExtendedCommitInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.ExtendedCommitInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "votes", kind: "message", T: ExtendedVoteInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExtendedCommitInfo {
    return new ExtendedCommitInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExtendedCommitInfo {
    return new ExtendedCommitInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExtendedCommitInfo {
    return new ExtendedCommitInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ExtendedCommitInfo | PlainMessage<ExtendedCommitInfo> | undefined, b: ExtendedCommitInfo | PlainMessage<ExtendedCommitInfo> | undefined): boolean {
    return proto3.util.equals(ExtendedCommitInfo, a, b);
  }
}

/**
 * Event allows application developers to attach additional information to
 * ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and ResponseDeliverTx.
 * Later, transactions may be queried using these events.
 *
 * @generated from message tendermint.abci.Event
 */
export class Event extends Message<Event> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: repeated tendermint.abci.EventAttribute attributes = 2;
   */
  attributes: EventAttribute[] = [];

  constructor(data?: PartialMessage<Event>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.Event";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "attributes", kind: "message", T: EventAttribute, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event {
    return new Event().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJsonString(jsonString, options);
  }

  static equals(a: Event | PlainMessage<Event> | undefined, b: Event | PlainMessage<Event> | undefined): boolean {
    return proto3.util.equals(Event, a, b);
  }
}

/**
 * EventAttribute is a single key-value pair, associated with an event.
 *
 * @generated from message tendermint.abci.EventAttribute
 */
export class EventAttribute extends Message<EventAttribute> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  /**
   * nondeterministic
   *
   * @generated from field: bool index = 3;
   */
  index = false;

  constructor(data?: PartialMessage<EventAttribute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.EventAttribute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "index", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventAttribute {
    return new EventAttribute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventAttribute {
    return new EventAttribute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventAttribute {
    return new EventAttribute().fromJsonString(jsonString, options);
  }

  static equals(a: EventAttribute | PlainMessage<EventAttribute> | undefined, b: EventAttribute | PlainMessage<EventAttribute> | undefined): boolean {
    return proto3.util.equals(EventAttribute, a, b);
  }
}

/**
 * TxResult contains results of executing the transaction.
 *
 * One usage is indexing transaction results.
 *
 * @generated from message tendermint.abci.TxResult
 */
export class TxResult extends Message<TxResult> {
  /**
   * @generated from field: int64 height = 1;
   */
  height = protoInt64.zero;

  /**
   * @generated from field: uint32 index = 2;
   */
  index = 0;

  /**
   * @generated from field: bytes tx = 3;
   */
  tx = new Uint8Array(0);

  /**
   * @generated from field: tendermint.abci.ResponseDeliverTx result = 4;
   */
  result?: ResponseDeliverTx;

  constructor(data?: PartialMessage<TxResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.TxResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "tx", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "result", kind: "message", T: ResponseDeliverTx },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxResult {
    return new TxResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxResult {
    return new TxResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxResult {
    return new TxResult().fromJsonString(jsonString, options);
  }

  static equals(a: TxResult | PlainMessage<TxResult> | undefined, b: TxResult | PlainMessage<TxResult> | undefined): boolean {
    return proto3.util.equals(TxResult, a, b);
  }
}

/**
 * Validator
 *
 * @generated from message tendermint.abci.Validator
 */
export class Validator extends Message<Validator> {
  /**
   * The first 20 bytes of SHA256(public key)
   *
   * @generated from field: bytes address = 1;
   */
  address = new Uint8Array(0);

  /**
   * PubKey pub_key = 2 [(gogoproto.nullable)=false];
   *
   * The voting power
   *
   * @generated from field: int64 power = 3;
   */
  power = protoInt64.zero;

  constructor(data?: PartialMessage<Validator>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.Validator";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "power", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Validator {
    return new Validator().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Validator {
    return new Validator().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Validator {
    return new Validator().fromJsonString(jsonString, options);
  }

  static equals(a: Validator | PlainMessage<Validator> | undefined, b: Validator | PlainMessage<Validator> | undefined): boolean {
    return proto3.util.equals(Validator, a, b);
  }
}

/**
 * ValidatorUpdate
 *
 * @generated from message tendermint.abci.ValidatorUpdate
 */
export class ValidatorUpdate extends Message<ValidatorUpdate> {
  /**
   * @generated from field: tendermint.crypto.PublicKey pub_key = 1;
   */
  pubKey?: PublicKey;

  /**
   * @generated from field: int64 power = 2;
   */
  power = protoInt64.zero;

  constructor(data?: PartialMessage<ValidatorUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.ValidatorUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pub_key", kind: "message", T: PublicKey },
    { no: 2, name: "power", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidatorUpdate {
    return new ValidatorUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidatorUpdate {
    return new ValidatorUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidatorUpdate {
    return new ValidatorUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: ValidatorUpdate | PlainMessage<ValidatorUpdate> | undefined, b: ValidatorUpdate | PlainMessage<ValidatorUpdate> | undefined): boolean {
    return proto3.util.equals(ValidatorUpdate, a, b);
  }
}

/**
 * VoteInfo
 *
 * @generated from message tendermint.abci.VoteInfo
 */
export class VoteInfo extends Message<VoteInfo> {
  /**
   * @generated from field: tendermint.abci.Validator validator = 1;
   */
  validator?: Validator;

  /**
   * @generated from field: bool signed_last_block = 2;
   */
  signedLastBlock = false;

  constructor(data?: PartialMessage<VoteInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.VoteInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator", kind: "message", T: Validator },
    { no: 2, name: "signed_last_block", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoteInfo {
    return new VoteInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoteInfo {
    return new VoteInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoteInfo {
    return new VoteInfo().fromJsonString(jsonString, options);
  }

  static equals(a: VoteInfo | PlainMessage<VoteInfo> | undefined, b: VoteInfo | PlainMessage<VoteInfo> | undefined): boolean {
    return proto3.util.equals(VoteInfo, a, b);
  }
}

/**
 * @generated from message tendermint.abci.ExtendedVoteInfo
 */
export class ExtendedVoteInfo extends Message<ExtendedVoteInfo> {
  /**
   * @generated from field: tendermint.abci.Validator validator = 1;
   */
  validator?: Validator;

  /**
   * @generated from field: bool signed_last_block = 2;
   */
  signedLastBlock = false;

  /**
   * Reserved for future use
   *
   * @generated from field: bytes vote_extension = 3;
   */
  voteExtension = new Uint8Array(0);

  constructor(data?: PartialMessage<ExtendedVoteInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.ExtendedVoteInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator", kind: "message", T: Validator },
    { no: 2, name: "signed_last_block", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "vote_extension", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExtendedVoteInfo {
    return new ExtendedVoteInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExtendedVoteInfo {
    return new ExtendedVoteInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExtendedVoteInfo {
    return new ExtendedVoteInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ExtendedVoteInfo | PlainMessage<ExtendedVoteInfo> | undefined, b: ExtendedVoteInfo | PlainMessage<ExtendedVoteInfo> | undefined): boolean {
    return proto3.util.equals(ExtendedVoteInfo, a, b);
  }
}

/**
 * @generated from message tendermint.abci.Misbehavior
 */
export class Misbehavior extends Message<Misbehavior> {
  /**
   * @generated from field: tendermint.abci.MisbehaviorType type = 1;
   */
  type = MisbehaviorType.UNKNOWN;

  /**
   * The offending validator
   *
   * @generated from field: tendermint.abci.Validator validator = 2;
   */
  validator?: Validator;

  /**
   * The height when the offense occurred
   *
   * @generated from field: int64 height = 3;
   */
  height = protoInt64.zero;

  /**
   * The corresponding time where the offense occurred
   *
   * @generated from field: google.protobuf.Timestamp time = 4;
   */
  time?: Timestamp;

  /**
   * Total voting power of the validator set in case the ABCI application does
   * not store historical validators.
   * https://github.com/tendermint/tendermint/issues/4581
   *
   * @generated from field: int64 total_voting_power = 5;
   */
  totalVotingPower = protoInt64.zero;

  constructor(data?: PartialMessage<Misbehavior>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.Misbehavior";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(MisbehaviorType) },
    { no: 2, name: "validator", kind: "message", T: Validator },
    { no: 3, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "time", kind: "message", T: Timestamp },
    { no: 5, name: "total_voting_power", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Misbehavior {
    return new Misbehavior().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Misbehavior {
    return new Misbehavior().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Misbehavior {
    return new Misbehavior().fromJsonString(jsonString, options);
  }

  static equals(a: Misbehavior | PlainMessage<Misbehavior> | undefined, b: Misbehavior | PlainMessage<Misbehavior> | undefined): boolean {
    return proto3.util.equals(Misbehavior, a, b);
  }
}

/**
 * @generated from message tendermint.abci.Snapshot
 */
export class Snapshot extends Message<Snapshot> {
  /**
   * The height at which the snapshot was taken
   *
   * @generated from field: uint64 height = 1;
   */
  height = protoInt64.zero;

  /**
   * The application-specific snapshot format
   *
   * @generated from field: uint32 format = 2;
   */
  format = 0;

  /**
   * Number of chunks in the snapshot
   *
   * @generated from field: uint32 chunks = 3;
   */
  chunks = 0;

  /**
   * Arbitrary snapshot hash, equal only if identical
   *
   * @generated from field: bytes hash = 4;
   */
  hash = new Uint8Array(0);

  /**
   * Arbitrary application metadata
   *
   * @generated from field: bytes metadata = 5;
   */
  metadata = new Uint8Array(0);

  constructor(data?: PartialMessage<Snapshot>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.abci.Snapshot";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "format", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "chunks", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "metadata", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Snapshot {
    return new Snapshot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Snapshot {
    return new Snapshot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Snapshot {
    return new Snapshot().fromJsonString(jsonString, options);
  }

  static equals(a: Snapshot | PlainMessage<Snapshot> | undefined, b: Snapshot | PlainMessage<Snapshot> | undefined): boolean {
    return proto3.util.equals(Snapshot, a, b);
  }
}

