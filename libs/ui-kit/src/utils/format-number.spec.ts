import { formatNumber } from './format-number';

// Generated by CodiumAI

describe('formatNumber()', () => {
  // Format a positive integer with default parameters
  it('should format a positive integer using default locale and fraction digits', () => {
    const result = formatNumber(1234);
    expect(result).toBe('1,234');
  });

  // Format a negative integer with default parameters
  it('should format a negative integer using default locale and fraction digits', () => {
    const result = formatNumber(-1234);
    expect(result).toBe('-1,234');
  });

  // Format a decimal number with specified minimum and maximum fraction digits
  it('should format a decimal number with specified minimum and maximum fraction digits', () => {
    const result = formatNumber(1234.56789, 2, 4);
    expect(result).toBe('1,234.5679');
  });

  // Format a number using a non-default locale
  it('should format a number using a non-default locale', () => {
    const result = formatNumber(1234.567, 2, 2, 'de-DE');
    expect(result).toBe('1.234,57');
  });

  // Format zero with varying fraction digits
  it('should format zero with 0 fraction digits', () => {
    const result = formatNumber(0, 0);
    expect(result).toBe('0');
  });

  // Format a number using an invalid locale string
  it('should format number with invalid locale', () => {
    const result = formatNumber(1234, 2, 2, 'invalid_locale');
    expect(result).toBe('1,234.00');
  });

  // Format with maximumFractionDigits set to zero
  it('should format a number with maximumFractionDigits set to zero', () => {
    const result = formatNumber(1234, 0, 0);
    expect(result).toBe('1,234');
  });

  // Format a number with minimumFractionDigits equal to maximumFractionDigits
  it('should format a number with minimumFractionDigits equal to maximumFractionDigits', () => {
    const result = formatNumber(1234, 2, 2);
    expect(result).toBe('1,234.00');
  });

  // Test formatting with locale that includes complex character sets (e.g., Arabic or Hindi)
  it('should format a number with complex character set locale', () => {
    const result = formatNumber(1234, 2, 4, 'ar-EG');
    expect(result).toBe('١٬٢٣٤٫٠٠');
  });

  // Test formatting a string representation of a number
  it('should format a string representation of a number', () => {
    const result = formatNumber('1234.567');
    expect(result).toBe('1,234.567');
  });

  // Test formatting a string with more decimal places than maximumFractionDigits
  it('should format a string with more decimal places than maximumFractionDigits', () => {
    const result = formatNumber('1234.56789', 2, 4);
    expect(result).toBe('1,234.5679');
  });

  // Test formatting a string with invalid number format
  it('should return "0" for an invalid number format string', () => {
    const result = formatNumber('invalid_number');
    expect(result).toBe('0');
  });

  // Test formatting a string with a valid number and non-default locale
  it('should format a string with a valid number and non-default locale', () => {
    const result = formatNumber('1234.567', 2, 2, 'de-DE');
    expect(result).toBe('1.234,57');
  });
});
