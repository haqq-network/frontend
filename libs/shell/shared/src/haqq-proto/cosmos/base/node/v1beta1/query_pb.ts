// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file cosmos/base/node/v1beta1/query.proto (package cosmos.base.node.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';

/**
 * ConfigRequest defines the request structure for the Config gRPC query.
 *
 * @generated from message cosmos.base.node.v1beta1.ConfigRequest
 */
export class ConfigRequest extends Message<ConfigRequest> {
  constructor(data?: PartialMessage<ConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.base.node.v1beta1.ConfigRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ConfigRequest {
    return new ConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ConfigRequest {
    return new ConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ConfigRequest {
    return new ConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: ConfigRequest | PlainMessage<ConfigRequest> | undefined,
    b: ConfigRequest | PlainMessage<ConfigRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ConfigRequest, a, b);
  }
}

/**
 * ConfigResponse defines the response structure for the Config gRPC query.
 *
 * @generated from message cosmos.base.node.v1beta1.ConfigResponse
 */
export class ConfigResponse extends Message<ConfigResponse> {
  /**
   * @generated from field: string minimum_gas_price = 1;
   */
  minimumGasPrice = '';

  constructor(data?: PartialMessage<ConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.base.node.v1beta1.ConfigResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'minimum_gas_price',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ConfigResponse {
    return new ConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ConfigResponse {
    return new ConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ConfigResponse {
    return new ConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: ConfigResponse | PlainMessage<ConfigResponse> | undefined,
    b: ConfigResponse | PlainMessage<ConfigResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ConfigResponse, a, b);
  }
}
