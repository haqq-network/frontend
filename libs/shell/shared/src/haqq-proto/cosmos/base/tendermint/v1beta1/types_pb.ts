// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file cosmos/base/tendermint/v1beta1/types.proto (package cosmos.base.tendermint.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3, protoInt64, Timestamp } from '@bufbuild/protobuf';
import { BlockID, Commit, Data } from '../../../../tendermint/types/types_pb';
import { EvidenceList } from '../../../../tendermint/types/evidence_pb';
import { Consensus } from '../../../../tendermint/version/types_pb';

/**
 * Block is tendermint type Block, with the Header proposer address
 * field converted to bech32 string.
 *
 * @generated from message cosmos.base.tendermint.v1beta1.Block
 */
export class Block extends Message<Block> {
  /**
   * @generated from field: cosmos.base.tendermint.v1beta1.Header header = 1;
   */
  header?: Header;

  /**
   * @generated from field: tendermint.types.Data data = 2;
   */
  data?: Data;

  /**
   * @generated from field: tendermint.types.EvidenceList evidence = 3;
   */
  evidence?: EvidenceList;

  /**
   * @generated from field: tendermint.types.Commit last_commit = 4;
   */
  lastCommit?: Commit;

  constructor(data?: PartialMessage<Block>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.base.tendermint.v1beta1.Block';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'header', kind: 'message', T: Header },
    { no: 2, name: 'data', kind: 'message', T: Data },
    { no: 3, name: 'evidence', kind: 'message', T: EvidenceList },
    { no: 4, name: 'last_commit', kind: 'message', T: Commit },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Block {
    return new Block().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Block {
    return new Block().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Block {
    return new Block().fromJsonString(jsonString, options);
  }

  static equals(
    a: Block | PlainMessage<Block> | undefined,
    b: Block | PlainMessage<Block> | undefined,
  ): boolean {
    return proto3.util.equals(Block, a, b);
  }
}

/**
 * Header defines the structure of a Tendermint block header.
 *
 * @generated from message cosmos.base.tendermint.v1beta1.Header
 */
export class Header extends Message<Header> {
  /**
   * basic block info
   *
   * @generated from field: tendermint.version.Consensus version = 1;
   */
  version?: Consensus;

  /**
   * @generated from field: string chain_id = 2;
   */
  chainId = '';

  /**
   * @generated from field: int64 height = 3;
   */
  height = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp time = 4;
   */
  time?: Timestamp;

  /**
   * prev block info
   *
   * @generated from field: tendermint.types.BlockID last_block_id = 5;
   */
  lastBlockId?: BlockID;

  /**
   * hashes of block data
   *
   * commit from validators from the last block
   *
   * @generated from field: bytes last_commit_hash = 6;
   */
  lastCommitHash = new Uint8Array(0);

  /**
   * transactions
   *
   * @generated from field: bytes data_hash = 7;
   */
  dataHash = new Uint8Array(0);

  /**
   * hashes from the app output from the prev block
   *
   * validators for the current block
   *
   * @generated from field: bytes validators_hash = 8;
   */
  validatorsHash = new Uint8Array(0);

  /**
   * validators for the next block
   *
   * @generated from field: bytes next_validators_hash = 9;
   */
  nextValidatorsHash = new Uint8Array(0);

  /**
   * consensus params for current block
   *
   * @generated from field: bytes consensus_hash = 10;
   */
  consensusHash = new Uint8Array(0);

  /**
   * state after txs from the previous block
   *
   * @generated from field: bytes app_hash = 11;
   */
  appHash = new Uint8Array(0);

  /**
   * root hash of all results from the txs from the previous block
   *
   * @generated from field: bytes last_results_hash = 12;
   */
  lastResultsHash = new Uint8Array(0);

  /**
   * consensus info
   *
   * evidence included in the block
   *
   * @generated from field: bytes evidence_hash = 13;
   */
  evidenceHash = new Uint8Array(0);

  /**
   * proposer_address is the original block proposer address, formatted as a Bech32 string.
   * In Tendermint, this type is `bytes`, but in the SDK, we convert it to a Bech32 string
   * for better UX.
   *
   * original proposer of the block
   *
   * @generated from field: string proposer_address = 14;
   */
  proposerAddress = '';

  constructor(data?: PartialMessage<Header>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cosmos.base.tendermint.v1beta1.Header';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'version', kind: 'message', T: Consensus },
    { no: 2, name: 'chain_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'height', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: 'time', kind: 'message', T: Timestamp },
    { no: 5, name: 'last_block_id', kind: 'message', T: BlockID },
    {
      no: 6,
      name: 'last_commit_hash',
      kind: 'scalar',
      T: 12 /* ScalarType.BYTES */,
    },
    { no: 7, name: 'data_hash', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    {
      no: 8,
      name: 'validators_hash',
      kind: 'scalar',
      T: 12 /* ScalarType.BYTES */,
    },
    {
      no: 9,
      name: 'next_validators_hash',
      kind: 'scalar',
      T: 12 /* ScalarType.BYTES */,
    },
    {
      no: 10,
      name: 'consensus_hash',
      kind: 'scalar',
      T: 12 /* ScalarType.BYTES */,
    },
    { no: 11, name: 'app_hash', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    {
      no: 12,
      name: 'last_results_hash',
      kind: 'scalar',
      T: 12 /* ScalarType.BYTES */,
    },
    {
      no: 13,
      name: 'evidence_hash',
      kind: 'scalar',
      T: 12 /* ScalarType.BYTES */,
    },
    {
      no: 14,
      name: 'proposer_address',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Header {
    return new Header().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Header {
    return new Header().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Header {
    return new Header().fromJsonString(jsonString, options);
  }

  static equals(
    a: Header | PlainMessage<Header> | undefined,
    b: Header | PlainMessage<Header> | undefined,
  ): boolean {
    return proto3.util.equals(Header, a, b);
  }
}
